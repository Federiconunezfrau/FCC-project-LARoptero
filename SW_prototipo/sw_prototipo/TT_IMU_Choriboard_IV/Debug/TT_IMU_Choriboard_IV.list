
TT_IMU_Choriboard_IV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f54  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009208  08009208  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009210  08009210  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000017c  08009394  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08009394  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021965  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ea1  00000000  00000000  00041b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  000479f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001456  00000000  00000000  000494d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d9d4  00000000  00000000  0004a92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022170  00000000  00000000  00078302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100a1f  00000000  00000000  0009a472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007458  00000000  00000000  0019ae94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001a22ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009104 	.word	0x08009104

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	08009104 	.word	0x08009104

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000198 	.word	0x20000198

0800053c <_Z8CNI_initv>:


void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f004 fd48 	bl	8004ff0 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000198 	.word	0x20000198
 8000580:	200000c8 	.word	0x200000c8
 8000584:	2000011c 	.word	0x2000011c

08000588 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <_Z9CNI_startv+0x20>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fe0d 	bl	80051b0 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <_Z9CNI_startv+0x20>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f005 f8cf 	bl	8005740 <HAL_CAN_ActivateNotification>
#endif
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000198 	.word	0x20000198

080005ac <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 80005b4:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <_Z12CNI_send_msgm+0x114>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d301      	bcc.n	80005c2 <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80005be:	2301      	movs	r3, #1
 80005c0:	e079      	b.n	80006b6 <_Z12CNI_send_msgm+0x10a>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80005c2:	4940      	ldr	r1, [pc, #256]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	3304      	adds	r3, #4
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d001      	beq.n	80005dc <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005d8:	2302      	movs	r3, #2
 80005da:	e06c      	b.n	80006b6 <_Z12CNI_send_msgm+0x10a>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005dc:	4939      	ldr	r1, [pc, #228]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	f043 0303 	orr.w	r3, r3, #3
 80005f6:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 80005f8:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2107      	movs	r1, #7
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fee9 	bl	80053d8 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 800060a:	e02a      	b.n	8000662 <_Z12CNI_send_msgm+0xb6>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 800060c:	bf00      	nop
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f004 ff25 	bl	8005462 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f2      	bne.n	800060e <_Z12CNI_send_msgm+0x62>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000628:	4926      	ldr	r1, [pc, #152]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3310      	adds	r3, #16
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 800063c:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	4613      	mov	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	3308      	adds	r3, #8
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 8000650:	441a      	add	r2, r3
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	491d      	ldr	r1, [pc, #116]	; (80006cc <_Z12CNI_send_msgm+0x120>)
 8000658:	f004 fdee 	bl	8005238 <HAL_CAN_AddTxMessage>
		i++;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <_Z12CNI_send_msgm+0x114>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	429a      	cmp	r2, r3
 800066a:	d215      	bcs.n	8000698 <_Z12CNI_send_msgm+0xec>
 800066c:	4915      	ldr	r1, [pc, #84]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 800066e:	697a      	ldr	r2, [r7, #20]
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	429a      	cmp	r2, r3
 8000680:	d10a      	bne.n	8000698 <_Z12CNI_send_msgm+0xec>
 8000682:	4910      	ldr	r1, [pc, #64]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d0b9      	beq.n	800060c <_Z12CNI_send_msgm+0x60>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000698:	bf00      	nop
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fedf 	bl	8005462 <HAL_CAN_GetTxMailboxesFreeLevel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f2      	bne.n	800069a <_Z12CNI_send_msgm+0xee>

	return CNI_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000118 	.word	0x20000118
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000198 	.word	0x20000198
 80006cc:	200001a0 	.word	0x200001a0

080006d0 <_Z15CNI_receive_msgm>:


CNI_status_t CNI_receive_msg(uint32_t msgHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t i;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80006d8:	4b45      	ldr	r3, [pc, #276]	; (80007f0 <_Z15CNI_receive_msgm+0x120>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d301      	bcc.n	80006e6 <_Z15CNI_receive_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e080      	b.n	80007e8 <_Z15CNI_receive_msgm+0x118>
	}

	if(CANmsgList[msgHandle].mNodeID_ == MY_NODE_ID)
 80006e6:	4943      	ldr	r1, [pc, #268]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	3304      	adds	r3, #4
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d101      	bne.n	8000700 <_Z15CNI_receive_msgm+0x30>
	{
		return CNI_MSG_HANDLE_RX_NOT_ALLOWED;
 80006fc:	2303      	movs	r3, #3
 80006fe:	e073      	b.n	80007e8 <_Z15CNI_receive_msgm+0x118>
	}

	i = msgHandle;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000704:	493b      	ldr	r1, [pc, #236]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8000716:	4937      	ldr	r1, [pc, #220]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	3304      	adds	r3, #4
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	627b      	str	r3, [r7, #36]	; 0x24

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 800072a:	e040      	b.n	80007ae <_Z15CNI_receive_msgm+0xde>
	{
		while( (HAL_CAN_GetRxFifoFillLevel(_instance.mHcan_, CAN_RX_FIFO0) == 0) );
 800072c:	bf00      	nop
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <_Z15CNI_receive_msgm+0x128>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 ffdb 	bl	80056f0 <HAL_CAN_GetRxFifoFillLevel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf0c      	ite	eq
 8000740:	2301      	moveq	r3, #1
 8000742:	2300      	movne	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <_Z15CNI_receive_msgm+0x5e>
		HAL_CAN_GetRxMessage(_instance.mHcan_, CAN_RX_FIFO0, &auxCANrxHeader, CANmsgList[i].mPayload_);
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <_Z15CNI_receive_msgm+0x128>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	3308      	adds	r3, #8
 800075a:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 800075c:	4413      	add	r3, r2
 800075e:	f107 0208 	add.w	r2, r7, #8
 8000762:	2100      	movs	r1, #0
 8000764:	f004 feb2 	bl	80054cc <HAL_CAN_GetRxMessage>
		if( (rxMsgServiceID == CAN_MSG_GET_SERVICE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) && (rxNodeID == CAN_MSG_GET_NODE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) )
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800076e:	429a      	cmp	r2, r3
 8000770:	d113      	bne.n	800079a <_Z15CNI_receive_msgm+0xca>
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	d10d      	bne.n	800079a <_Z15CNI_receive_msgm+0xca>
		{
			CANmsgList[i].mLenPayload_ = auxCANrxHeader.DLC;
 800077e:	69b9      	ldr	r1, [r7, #24]
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 8000782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4403      	add	r3, r0
 800078e:	3310      	adds	r3, #16
 8000790:	6019      	str	r1, [r3, #0]
			i++;
 8000792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000794:	3301      	adds	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000798:	e009      	b.n	80007ae <_Z15CNI_receive_msgm+0xde>
		}
		else
		{
			CANmsgList[i].mLenPayload_ = 0;
 800079a:	4916      	ldr	r1, [pc, #88]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 800079c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	3310      	adds	r3, #16
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <_Z15CNI_receive_msgm+0x120>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d216      	bcs.n	80007e6 <_Z15CNI_receive_msgm+0x116>
 80007b8:	490e      	ldr	r1, [pc, #56]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 80007ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d10b      	bne.n	80007e6 <_Z15CNI_receive_msgm+0x116>
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <_Z15CNI_receive_msgm+0x124>)
 80007d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	3304      	adds	r3, #4
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d0a2      	beq.n	800072c <_Z15CNI_receive_msgm+0x5c>
		}
	}

	return CNI_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3730      	adds	r7, #48	; 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000118 	.word	0x20000118
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000198 	.word	0x20000198

080007fc <_Z22CNI_update_msg_contentmPhm>:

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8000808:	4b48      	ldr	r3, [pc, #288]	; (800092c <_Z22CNI_update_msg_contentmPhm+0x130>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	429a      	cmp	r2, r3
 8000810:	d301      	bcc.n	8000816 <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8000812:	2301      	movs	r3, #1
 8000814:	e086      	b.n	8000924 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8000816:	4946      	ldr	r1, [pc, #280]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	3304      	adds	r3, #4
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d001      	beq.n	8000830 <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 800082c:	2302      	movs	r3, #2
 800082e:	e079      	b.n	8000924 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000834:	493e      	ldr	r1, [pc, #248]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8000846:	493a      	ldr	r1, [pc, #232]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	440b      	add	r3, r1
 8000854:	3304      	adds	r3, #4
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 800085e:	e041      	b.n	80008e4 <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	2b08      	cmp	r3, #8
 8000864:	d91e      	bls.n	80008a4 <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	3308      	adds	r3, #8
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000874:	1898      	adds	r0, r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	2208      	movs	r2, #8
 8000882:	4619      	mov	r1, r3
 8000884:	f003 fd37 	bl	80042f6 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 8000888:	4929      	ldr	r1, [pc, #164]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3310      	adds	r3, #16
 8000898:	2208      	movs	r2, #8
 800089a:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3b08      	subs	r3, #8
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	e01c      	b.n	80008de <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 80008a4:	69fa      	ldr	r2, [r7, #28]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	3308      	adds	r3, #8
 80008b0:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80008b2:	1898      	adds	r0, r3, r2
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	4413      	add	r3, r2
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f003 fd18 	bl	80042f6 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 80008c6:	491a      	ldr	r1, [pc, #104]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	3310      	adds	r3, #16
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
		}
		i++;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3301      	adds	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_Z22CNI_update_msg_contentmPhm+0x130>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d219      	bcs.n	8000922 <_Z22CNI_update_msg_contentmPhm+0x126>
 80008ee:	4910      	ldr	r1, [pc, #64]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	d10e      	bne.n	8000922 <_Z22CNI_update_msg_contentmPhm+0x126>
 8000904:	490a      	ldr	r1, [pc, #40]	; (8000930 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	440b      	add	r3, r1
 8000912:	3304      	adds	r3, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d102      	bne.n	8000922 <_Z22CNI_update_msg_contentmPhm+0x126>
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d19e      	bne.n	8000860 <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000118 	.word	0x20000118
 8000930:	20000000 	.word	0x20000000

08000934 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_CAN1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_CAN1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_CAN1_Init+0x68>)
 8000940:	2206      	movs	r2, #6
 8000942:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_CAN1_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_CAN1_Init+0x68>)
 800094c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000950:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_CAN1_Init+0x68>)
 8000954:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000958:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_CAN1_Init+0x68>)
 800095c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000960:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_CAN1_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_CAN1_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_CAN1_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_CAN1_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_CAN1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_CAN1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_CAN1_Init+0x68>)
 8000988:	f004 fa36 	bl	8004df8 <HAL_CAN_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000992:	f003 f9e9 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001b8 	.word	0x200001b8
 80009a0:	40006400 	.word	0x40006400

080009a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <MX_CAN2_Init+0x6c>)
 80009ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009b0:	2206      	movs	r2, #6
 80009b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009c0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009c4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80009c8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009d0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_CAN2_Init+0x68>)
 80009f8:	f004 f9fe 	bl	8004df8 <HAL_CAN_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000a02:	f003 f9b1 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001e0 	.word	0x200001e0
 8000a10:	40006800 	.word	0x40006800

08000a14 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a41      	ldr	r2, [pc, #260]	; (8000b38 <HAL_CAN_MspInit+0x124>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d13a      	bne.n	8000aac <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a3f      	ldr	r2, [pc, #252]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000a3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a40:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10b      	bne.n	8000a60 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a48:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482b      	ldr	r0, [pc, #172]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000a96:	f005 fa13 	bl	8005ec0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2014      	movs	r0, #20
 8000aa0:	f005 f9c9 	bl	8005e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aa4:	2014      	movs	r0, #20
 8000aa6:	f005 f9e2 	bl	8005e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000aaa:	e041      	b.n	8000b30 <HAL_CAN_MspInit+0x11c>
  else if(canHandle->Instance==CAN2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <HAL_CAN_MspInit+0x134>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d13c      	bne.n	8000b30 <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000ad6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_CAN_MspInit+0x128>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d10b      	bne.n	8000af8 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_CAN_MspInit+0x12c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b20:	2309      	movs	r3, #9
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_CAN_MspInit+0x130>)
 8000b2c:	f005 f9c8 	bl	8005ec0 <HAL_GPIO_Init>
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	20000208 	.word	0x20000208
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40006800 	.word	0x40006800

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0320 	and.w	r3, r3, #32
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a2a      	ldr	r2, [pc, #168]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_GPIO_Init+0x13c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	217a      	movs	r1, #122	; 0x7a
 8000bf6:	4825      	ldr	r0, [pc, #148]	; (8000c8c <MX_GPIO_Init+0x140>)
 8000bf8:	f005 fb0e 	bl	8006218 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	211c      	movs	r1, #28
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_GPIO_Init+0x144>)
 8000c02:	f005 fb09 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0c:	4821      	ldr	r0, [pc, #132]	; (8000c94 <MX_GPIO_Init+0x148>)
 8000c0e:	f005 fb03 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000c12:	237a      	movs	r3, #122	; 0x7a
 8000c14:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x140>)
 8000c2a:	f005 f949 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 8000c2e:	231c      	movs	r3, #28
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <MX_GPIO_Init+0x144>)
 8000c46:	f005 f93b 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_GPIO_Init+0x148>)
 8000c64:	f005 f92c 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_GPIO_Init+0x14c>)
 8000c7c:	f005 f920 	bl	8005ec0 <HAL_GPIO_Init>

}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40021400 	.word	0x40021400
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f854 	bl	8000d5a <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	829a      	strh	r2, [r3, #20]
    }
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	8a9b      	ldrh	r3, [r3, #20]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f005 fab5 	bl	800624a <HAL_GPIO_TogglePin>
    }
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8000cf2:	6838      	ldr	r0, [r7, #0]
 8000cf4:	f000 f80e 	bl	8000d14 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6918      	ldr	r0, [r3, #16]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	8a9b      	ldrh	r3, [r3, #20]
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	4619      	mov	r1, r3
 8000d08:	f005 fa86 	bl	8006218 <HAL_GPIO_WritePin>
    }
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8000d26:	2300      	movs	r3, #0
	}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	6053      	str	r3, [r2, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	461a      	mov	r2, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	6053      	str	r3, [r2, #4]
 8000d6c:	6093      	str	r3, [r2, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ffdf 	bl	8000d34 <_ZNSt14_Function_baseC1Ev>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_I2C4_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <MX_I2C4_Init+0x7c>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000dc4:	f005 fa5c 	bl	8006280 <HAL_I2C_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dce:	f002 ffcb 	bl	8003d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000dd6:	f005 fae3 	bl	80063a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000de0:	f002 ffc2 	bl	8003d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_I2C4_Init+0x74>)
 8000de8:	f005 fb25 	bl	8006436 <HAL_I2CEx_ConfigDigitalFilter>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f002 ffb9 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000020c 	.word	0x2000020c
 8000e00:	40006000 	.word	0x40006000
 8000e04:	20404768 	.word	0x20404768

08000e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0aa      	sub	sp, #168	; 0xa8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2284      	movs	r2, #132	; 0x84
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f008 f889 	bl	8008f40 <memset>
  if(i2cHandle->Instance==I2C4)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <HAL_I2C_MspInit+0xb4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d13d      	bne.n	8000eb4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 f845 	bl	8006ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e54:	f002 ff88 	bl	8003d68 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_I2C_MspInit+0xbc>)
 8000e98:	f005 f812 	bl	8005ec0 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_I2C_MspInit+0xb8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	37a8      	adds	r7, #168	; 0xa8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40006000 	.word	0x40006000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021400 	.word	0x40021400

08000ec8 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4798      	blx	r3
    }
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7a1b      	ldrb	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <_ZN9iPHandler4lockEv+0x14>
			return false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e003      	b.n	8000f36 <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	721a      	strb	r2, [r3, #8]
		return true;
 8000f34:	2301      	movs	r3, #1
	}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7a1b      	ldrb	r3, [r3, #8]
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e003      	b.n	8000f64 <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	721a      	strb	r2, [r3, #8]
		return true;
 8000f62:	2301      	movs	r3, #1
	}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	b2db      	uxtb	r3, r3
		}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	b2dc      	uxtb	r4, r3
 8001030:	2105      	movs	r1, #5
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff ffae 	bl	8000f94 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8001038:	4603      	mov	r3, r0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4323      	orrs	r3, r4
 800103e:	b2db      	uxtb	r3, r3
        }
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f023 030f 	bic.w	r3, r3, #15
 800105a:	b2dc      	uxtb	r4, r3
 800105c:	2100      	movs	r1, #0
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f7ff ff86 	bl	8000f70 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8001064:	4603      	mov	r3, r0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4323      	orrs	r3, r4
 800106a:	b2db      	uxtb	r3, r3
        }
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	b2dc      	uxtb	r4, r3
 8001088:	2105      	movs	r1, #5
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f7ff ffa6 	bl	8000fdc <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8001090:	4603      	mov	r3, r0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4323      	orrs	r3, r4
 8001096:	b2db      	uxtb	r3, r3
        }
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}

080010a0 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f023 030f 	bic.w	r3, r3, #15
 80010b2:	b2dc      	uxtb	r4, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f7ff ff7e 	bl	8000fb8 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 80010bc:	4603      	mov	r3, r0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4323      	orrs	r3, r4
 80010c2:	b2db      	uxtb	r3, r3
        }
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}

080010cc <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <_ZN4iIMUC1Ev+0x1c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	08009190 	.word	0x08009190

080010ec <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2206      	movs	r2, #6
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2206      	movs	r2, #6
 80010fe:	705a      	strb	r2, [r3, #1]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	709a      	strb	r2, [r3, #2]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	711a      	strb	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	715a      	strb	r2, [r3, #5]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	719a      	strb	r2, [r3, #6]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffc5 	bl	80010cc <_ZN4iIMUC1Ev>
 8001142:	4a34      	ldr	r2, [pc, #208]	; (8001214 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3304      	adds	r3, #4
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f935 	bl	80023bc <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 800115a:	4615      	mov	r5, r2
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001168:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffba 	bl	80010ec <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800118e:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001196:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fb79 	bl	80038b0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fbce 	bl	8003970 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fbe7 	bl	80039b8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fc3c 	bl	8003a78 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	08009140 	.word	0x08009140

08001218 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af04      	add	r7, sp, #16
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 8001226:	2300      	movs	r3, #0
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2300      	movs	r3, #0
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	23ff      	movs	r3, #255	; 0xff
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff ff77 	bl	800112c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 ff30 	bl	80020ac <_ZN8ICM426888icm426886enableEv>
    }
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	731a      	strb	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	735a      	strb	r2, [r3, #13]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	739a      	strb	r2, [r3, #14]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ffdc 	bl	8001256 <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d033      	beq.n	8001312 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 80012ae:	2376      	movs	r3, #118	; 0x76
 80012b0:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80012c6:	e002      	b.n	80012ce <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80012ce:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7ffa      	ldrb	r2, [r7, #31]
 80012d4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	4798      	blx	r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 8001306:	2301      	movs	r3, #1
 8001308:	e004      	b.n	8001314 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 8001312:	2300      	movs	r3, #0
    }
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff90 	bl	8001256 <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 8001336:	2100      	movs	r1, #0
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffa6 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800133e:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	e055      	b.n	80013f6 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 800134a:	231d      	movs	r3, #29
 800134c:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 800134e:	230e      	movs	r3, #14
 8001350:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <_ZN8ICM426888icm426889save_dataEv+0x48>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001362:	e002      	b.n	800136a <_ZN8ICM426888icm426889save_dataEv+0x4e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800136a:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001372:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fdcd 	bl	8000f1a <_ZN9iPHandler4lockEv>
 8001380:	4603      	mov	r3, r0
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 800138c:	2305      	movs	r3, #5
 800138e:	e032      	b.n	80013f6 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f107 0108 	add.w	r1, r7, #8
 80013a4:	4610      	mov	r0, r2
 80013a6:	4798      	blx	r3
 80013a8:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f000 ffdf 	bl	8002374 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 80013b6:	4603      	mov	r3, r0
 80013b8:	e01d      	b.n	80013f6 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d117      	bne.n	80013f4 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f503 7006 	add.w	r0, r3, #536	; 0x218
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	7a7a      	ldrb	r2, [r7, #9]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f007 fe3b 	bl	8009050 <memcpy>
            m_handler->unlock();
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fdae 	bl	8000f42 <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 ff48 	bl	8002284 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 80013f4:	69fb      	ldr	r3, [r7, #28]
    }
 80013f6:	4618      	mov	r0, r3
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 ff37 	bl	8002284 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fd90 	bl	8000f42 <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 8001436:	2300      	movs	r3, #0
        
    }
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 ffc5 	bl	80023f8 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 8001482:	2304      	movs	r3, #4
    }
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fed8 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff feee 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80014be:	2301      	movs	r3, #1
 80014c0:	e04e      	b.n	8001560 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80014c8:	69f9      	ldr	r1, [r7, #28]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fdbc 	bl	8001048 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80014d0:	4603      	mov	r3, r0
 80014d2:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7efa      	ldrb	r2, [r7, #27]
 80014d8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 80014dc:	234f      	movs	r3, #79	; 0x4f
 80014de:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80014f4:	e002      	b.n	80014fc <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014fc:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001504:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	4798      	blx	r3
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001534:	2301      	movs	r3, #1
 8001536:	e013      	b.n	8001560 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7efa      	ldrb	r2, [r7, #27]
 800153c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f9ae 	bl	80038b0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 800155e:	2300      	movs	r3, #0
    }
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe6a 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001582:	2100      	movs	r1, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fe80 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800159a:	2301      	movs	r3, #1
 800159c:	e04e      	b.n	800163c <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd38 	bl	800101c <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 80015ac:	4603      	mov	r3, r0
 80015ae:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7efa      	ldrb	r2, [r7, #27]
 80015b4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 80015b8:	234f      	movs	r3, #79	; 0x4f
 80015ba:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80015d0:	e002      	b.n	80015d8 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80015d8:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80015e0:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80015fa:	f107 0208 	add.w	r2, r7, #8
 80015fe:	4798      	blx	r3
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001610:	2301      	movs	r3, #1
 8001612:	e013      	b.n	800163c <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7efa      	ldrb	r2, [r7, #27]
 8001618:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800162a:	4618      	mov	r0, r3
 800162c:	f002 f9a0 	bl	8003970 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 800163a:	2300      	movs	r3, #0

    } 
 800163c:	4618      	mov	r0, r3
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fdfc 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800165e:	2100      	movs	r1, #0
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe12 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8001676:	2301      	movs	r3, #1
 8001678:	e04e      	b.n	8001718 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8001680:	69f9      	ldr	r1, [r7, #28]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fd0c 	bl	80010a0 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 8001688:	4603      	mov	r3, r0
 800168a:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7efa      	ldrb	r2, [r7, #27]
 8001690:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8001694:	2350      	movs	r3, #80	; 0x50
 8001696:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80016ac:	e002      	b.n	80016b4 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80016b4:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80016bc:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3304      	adds	r3, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	4798      	blx	r3
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e013      	b.n	8001718 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7efa      	ldrb	r2, [r7, #27]
 80016f4:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001706:	4618      	mov	r0, r3
 8001708:	f002 f956 	bl	80039b8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 8001716:	2300      	movs	r3, #0
    }
 8001718:	4618      	mov	r0, r3
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fd8e 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fda4 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8001752:	2301      	movs	r3, #1
 8001754:	e04e      	b.n	80017f4 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 800175c:	69f9      	ldr	r1, [r7, #28]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc88 	bl	8001074 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8001764:	4603      	mov	r3, r0
 8001766:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7efa      	ldrb	r2, [r7, #27]
 800176c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8001770:	2350      	movs	r3, #80	; 0x50
 8001772:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001788:	e002      	b.n	8001790 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001790:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001798:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80017b2:	f107 0208 	add.w	r2, r7, #8
 80017b6:	4798      	blx	r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf14      	ite	ne
 80017be:	2301      	movne	r3, #1
 80017c0:	2300      	moveq	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e013      	b.n	80017f4 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7efa      	ldrb	r2, [r7, #27]
 80017d0:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 f948 	bl	8003a78 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80017f2:	2300      	movs	r3, #0
    }
 80017f4:	4618      	mov	r0, r3
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800180a:	ee07 3a90 	vmov	s15, r3
    }
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800182a:	ee07 3a90 	vmov	s15, r3
    }
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800184a:	ee07 3a90 	vmov	s15, r3
    }
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800186a:	ee07 3a90 	vmov	s15, r3
    }
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 800188a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018a4 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 800188e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001892:	eef0 7a66 	vmov.f32	s15, s13
    }
 8001896:	eeb0 0a67 	vmov.f32	s0, s15
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	47000000 	.word	0x47000000

080018a8 <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 80018b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018d0 <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 80018ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018be:	eef0 7a66 	vmov.f32	s15, s13
    }
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	47000000 	.word	0x47000000

080018d4 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	ed2d 8b02 	vpush	{d8}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
 80018e4:	4613      	mov	r3, r2
 80018e6:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	78bb      	ldrb	r3, [r7, #2]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3340      	adds	r3, #64	; 0x40
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	ecbd 8b02 	vpop	{d8}
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 8001924:	b580      	push	{r7, lr}
 8001926:	ed2d 8b02 	vpush	{d8}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
 8001934:	4613      	mov	r3, r2
 8001936:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	78bb      	ldrb	r3, [r7, #2]
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 8001946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	333c      	adds	r3, #60	; 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
 800195e:	eef0 7a40 	vmov.f32	s15, s0
 8001962:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	ecbd 8b02 	vpop	{d8}
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f82c 	bl	80019de <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	e01c      	b.n	80019d6 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8eb 	bl	8001b78 <_ZN8ICM426888icm4268817write_config_FIFOEv>
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	e00e      	b.n	80019d6 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f9d5 	bl	8001d68 <_ZN8ICM426888icm4268816write_config_intEv>
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	e000      	b.n	80019d6 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 80019d4:	68fb      	ldr	r3, [r7, #12]
        
    }
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b088      	sub	sp, #32
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fc33 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fc49 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b1      	b.n	8001b70 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f7ff fafe 	bl	800101c <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8001a20:	4603      	mov	r3, r0
 8001a22:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fb0a 	bl	8001048 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8001a34:	4603      	mov	r3, r0
 8001a36:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f7ff fb14 	bl	8001074 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8001a56:	7fbb      	ldrb	r3, [r7, #30]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb20 	bl	80010a0 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 8001a60:	4603      	mov	r3, r0
 8001a62:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001a78:	e002      	b.n	8001a80 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a80:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001a88:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 8001a8a:	234f      	movs	r3, #79	; 0x4f
 8001a8c:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7ffa      	ldrb	r2, [r7, #31]
 8001a92:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001aae:	f107 020c 	add.w	r2, r7, #12
 8001ab2:	4798      	blx	r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e053      	b.n	8001b70 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7fba      	ldrb	r2, [r7, #30]
 8001acc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 8001ad0:	2350      	movs	r3, #80	; 0x50
 8001ad2:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001aec:	f107 020c 	add.w	r2, r7, #12
 8001af0:	4798      	blx	r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e034      	b.n	8001b70 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7ffa      	ldrb	r2, [r7, #31]
 8001b0a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7fba      	ldrb	r2, [r7, #30]
 8001b12:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fec7 	bl	80038b0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 ff1c 	bl	8003970 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001b38:	eef0 7a40 	vmov.f32	s15, s0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 ff35 	bl	80039b8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 ff8a 	bl	8003a78 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001b64:	eef0 7a40 	vmov.f32	s15, s0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 8001b6e:	2300      	movs	r3, #0
    }
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb66 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fb7c 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0dc      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 8001ba6:	234c      	movs	r3, #76	; 0x4c
 8001ba8:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001bbe:	e002      	b.n	8001bc6 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001bc6:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001bce:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8001bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f107 020c 	add.w	r2, r7, #12
 8001bf4:	f107 010b 	add.w	r1, r7, #11
 8001bf8:	4798      	blx	r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0a8      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 8001c0e:	7afa      	ldrb	r2, [r7, #11]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8001c16:	2316      	movs	r3, #22
 8001c18:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f9ed 	bl	8001000 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8001c26:	4603      	mov	r3, r0
 8001c28:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	f107 010a 	add.w	r1, r7, #10
 8001c44:	4798      	blx	r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e082      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 8001c5a:	7aba      	ldrb	r2, [r7, #10]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d078      	beq.n	8001d5e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 8001c70:	2307      	movs	r3, #7
 8001c72:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8001c7a:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 8001c8c:	235f      	movs	r3, #95	; 0x5f
 8001c8e:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7ffa      	ldrb	r2, [r7, #31]
 8001c94:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001cb0:	f107 020c 	add.w	r2, r7, #12
 8001cb4:	4798      	blx	r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e04a      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8001cca:	2360      	movs	r3, #96	; 0x60
 8001ccc:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7fba      	ldrb	r2, [r7, #30]
 8001cd2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001cee:	f107 020c 	add.w	r2, r7, #12
 8001cf2:	4798      	blx	r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e02b      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8001d08:	2361      	movs	r3, #97	; 0x61
 8001d0a:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7f7a      	ldrb	r2, [r7, #29]
 8001d10:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3304      	adds	r3, #4
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001d2c:	f107 020c 	add.w	r2, r7, #12
 8001d30:	4798      	blx	r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00c      	b.n	8001d60 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7ffa      	ldrb	r2, [r7, #31]
 8001d4a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7fba      	ldrb	r2, [r7, #30]
 8001d52:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7f7a      	ldrb	r2, [r7, #29]
 8001d5a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 8001d5e:	2300      	movs	r3, #0
    }
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d74:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d78:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa69 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 8001d84:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d88:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001d90:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d94:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d98:	2100      	movs	r1, #0
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	f7ff fa75 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e174      	b.n	800209e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8001db4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001db8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001dc0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dc4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8001dd2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dd6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001de0:	e006      	b.n	8001df0 <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8001de2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001de6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001df0:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001df4:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8001df8:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8001dfa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dfe:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8001e08:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e0c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001e10:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8001e12:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e16:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e24:	f000 80bb 	beq.w	8001f9e <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8001e28:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e2c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e3c:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e4a:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001e4e:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 8001e50:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e54:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	2301      	movs	r3, #1
 8001e64:	4093      	lsls	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e6c:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 8001e70:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 8001e72:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e76:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001e7a:	2265      	movs	r2, #101	; 0x65
 8001e7c:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 8001e7e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e82:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001e8c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e90:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	f107 010a 	add.w	r1, r7, #10
 8001ea8:	4798      	blx	r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0ef      	b.n	800209e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8001ebe:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ec2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d034      	beq.n	8001f3a <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8001ed0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ed4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001ede:	461c      	mov	r4, r3
 8001ee0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ee4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ef0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001efc:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8001f00:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f04:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f12:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f16:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8001f1a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f1e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001f22:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f000 fae1 	bl	80024ee <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4620      	mov	r0, r4
 8001f34:	f000 faff 	bl	8002536 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8001f38:	e031      	b.n	8001f9e <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8001f3a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f3e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001f48:	461c      	mov	r4, r3
 8001f4a:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8001f4c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f54:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f58:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001f5c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8001f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f64:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f68:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f6c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001f76:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001f7a:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8001f7e:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001f82:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8001f86:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	f000 fbef 	bl	800276e <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8001f90:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001f94:	4619      	mov	r1, r3
 8001f96:	4620      	mov	r0, r4
 8001f98:	f000 fc05 	bl	80027a6 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8001f9c:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8001f9e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001fa2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb0:	d04e      	beq.n	8002050 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8001fb2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001fb6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001fca:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001fdc:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001fe0:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8001fe2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001fe6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ffe:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8002002:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8002004:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002008:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800200c:	2266      	movs	r2, #102	; 0x66
 800200e:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8002010:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002014:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800201e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002022:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3304      	adds	r3, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	f107 0109 	add.w	r1, r7, #9
 800203a:	4798      	blx	r3
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 800204c:	2301      	movs	r3, #1
 800204e:	e026      	b.n	800209e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8002050:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002054:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002058:	2214      	movs	r2, #20
 800205a:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 800205c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002060:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800206a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800206e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	f107 010b 	add.w	r1, r7, #11
 8002086:	4798      	blx	r3
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 800209c:	2300      	movs	r3, #0
    }
 800209e:	4618      	mov	r0, r3
 80020a0:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	0800911c 	.word	0x0800911c

080020ac <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8cc 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80020be:	2100      	movs	r1, #0
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff f8e2 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e038      	b.n	800214c <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 80020da:	234e      	movs	r3, #78	; 0x4e
 80020dc:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 80020de:	2301      	movs	r3, #1
 80020e0:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <_ZN8ICM426888icm426886enableEv+0x48>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80020f2:	e002      	b.n	80020fa <_ZN8ICM426888icm426886enableEv+0x4e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80020fa:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f107 0208 	add.w	r2, r7, #8
 8002112:	4910      	ldr	r1, [pc, #64]	; (8002154 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8002126:	2301      	movs	r3, #1
 8002128:	e010      	b.n	800214c <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3344      	adds	r3, #68	; 0x44
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 800214a:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	08009134 	.word	0x08009134

08002158 <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f876 	bl	8001256 <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800216e:	2100      	movs	r1, #0
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff f88a 	bl	800128a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 8002186:	2301      	movs	r3, #1
 8002188:	e076      	b.n	8002278 <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <_ZN8ICM426888icm426887disableEv+0x48>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800219e:	e002      	b.n	80021a6 <_ZN8ICM426888icm426887disableEv+0x4e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80021a6:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 80021a8:	2365      	movs	r3, #101	; 0x65
 80021aa:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f107 0210 	add.w	r2, r7, #16
 80021c2:	f107 010f 	add.w	r1, r7, #15
 80021c6:	4798      	blx	r3
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 80021d8:	2301      	movs	r3, #1
 80021da:	e04d      	b.n	8002278 <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 80021dc:	2366      	movs	r3, #102	; 0x66
 80021de:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f107 0210 	add.w	r2, r7, #16
 80021f6:	f107 010f 	add.w	r1, r7, #15
 80021fa:	4798      	blx	r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 800220c:	2301      	movs	r3, #1
 800220e:	e033      	b.n	8002278 <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8002210:	2314      	movs	r3, #20
 8002212:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3304      	adds	r3, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f107 0210 	add.w	r2, r7, #16
 800222a:	f107 010f 	add.w	r1, r7, #15
 800222e:	4798      	blx	r3
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8002240:	2301      	movs	r3, #1
 8002242:	e019      	b.n	8002278 <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8002244:	234e      	movs	r3, #78	; 0x4e
 8002246:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f107 0210 	add.w	r2, r7, #16
 800225e:	4908      	ldr	r1, [pc, #32]	; (8002280 <_ZN8ICM426888icm426887disableEv+0x128>)
 8002260:	4798      	blx	r3
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 8002276:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	08009135 	.word	0x08009135

08002284 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af04      	add	r7, sp, #16
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f001 fc0e 	bl	8003abc <_ZN8ICM4268815convertTempDataEhh>
 80022a0:	eef0 7a40 	vmov.f32	s15, s0
 80022a4:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3302      	adds	r3, #2
 80022ac:	7819      	ldrb	r1, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3303      	adds	r3, #3
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fb34 	bl	8001924 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80022bc:	eef0 7a40 	vmov.f32	s15, s0
 80022c0:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3304      	adds	r3, #4
 80022c8:	7819      	ldrb	r1, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3305      	adds	r3, #5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fb26 	bl	8001924 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80022d8:	eef0 7a40 	vmov.f32	s15, s0
 80022dc:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	3306      	adds	r3, #6
 80022e4:	7819      	ldrb	r1, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3307      	adds	r3, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fb18 	bl	8001924 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80022f4:	eef0 7a40 	vmov.f32	s15, s0
 80022f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	3308      	adds	r3, #8
 8002300:	7819      	ldrb	r1, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3309      	adds	r3, #9
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fae2 	bl	80018d4 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002310:	eef0 7a40 	vmov.f32	s15, s0
 8002314:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	330a      	adds	r3, #10
 800231c:	7819      	ldrb	r1, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	330b      	adds	r3, #11
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fad4 	bl	80018d4 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	7819      	ldrb	r1, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	330d      	adds	r3, #13
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fac6 	bl	80018d4 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1d1d      	adds	r5, r3, #4
 8002354:	466c      	mov	r4, sp
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002366:	4628      	mov	r0, r5
 8002368:	f000 fa3c 	bl	80027e4 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bdb0      	pop	{r4, r5, r7, pc}

08002374 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d012      	beq.n	80023a8 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	dc09      	bgt.n	800239c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d006      	beq.n	80023a2 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8002394:	e002      	b.n	800239c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
    		break;
 800239a:	e008      	b.n	80023ae <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 800239c:	2301      	movs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
    		break;
 80023a0:	e005      	b.n	80023ae <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 80023a2:	2305      	movs	r3, #5
 80023a4:	60fb      	str	r3, [r7, #12]
    		break;
 80023a6:	e002      	b.n	80023ae <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 80023a8:	2303      	movs	r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
    		break;
 80023ac:	bf00      	nop

    	}

    	return ret;
 80023ae:	68fb      	ldr	r3, [r7, #12]
    }
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
            
        }
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 80023f8:	b4b0      	push	{r4, r5, r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 800240c:	2300      	movs	r3, #0
 800240e:	e040      	b.n	8002492 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002416:	4619      	mov	r1, r3
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a5b      	subs	r3, r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	4605      	mov	r5, r0
 8002428:	1d1c      	adds	r4, r3, #4
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002432:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800246a:	3301      	adds	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800247a:	2b10      	cmp	r3, #16
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8002490:	2301      	movs	r3, #1
        }
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bcb0      	pop	{r4, r5, r7}
 800249a:	4770      	bx	lr

0800249c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fa33 	bl	8002918 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f103 0208 	add.w	r2, r3, #8
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3308      	adds	r3, #8
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7ff ffdc 	bl	800249c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 80024ee:	b590      	push	{r4, r7, lr}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 80024fa:	68b8      	ldr	r0, [r7, #8]
 80024fc:	f000 f9d7 	bl	80028ae <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002500:	4604      	mov	r4, r0
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9de 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4621      	mov	r1, r4
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f9e3 	bl	80028da <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fce4 	bl	8000ef4 <_ZNSt14_Function_baseD1Ev>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f000 f9f9 	bl	8002938 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002546:	4602      	mov	r2, r0
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f9fe 	bl	8002950 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa28 	bl	80029b0 <_ZNSt8functionIFvvEE4swapERS1_>
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffd9 	bl	800251c <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 800256a:	687b      	ldr	r3, [r7, #4]
	}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZN4iIMUC1EOS_>:
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_ZN4iIMUC1EOS_+0x20>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	08009190 	.word	0x08009190

08002598 <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ffe3 	bl	8002574 <_ZN4iIMUC1EOS_>
 80025ae:	4a46      	ldr	r2, [pc, #280]	; (80026c8 <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	1d10      	adds	r0, r2, #4
 80025ba:	3304      	adds	r3, #4
 80025bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80025c0:	4619      	mov	r1, r3
 80025c2:	f006 fd45 	bl	8009050 <memcpy>
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 80025ce:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 80025d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025de:	e884 0003 	stmia.w	r4, {r0, r1}
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 80025ea:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80025ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8002602:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800260e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800261a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800261e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002622:	6018      	str	r0, [r3, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	8019      	strh	r1, [r3, #0]
 8002628:	3302      	adds	r3, #2
 800262a:	0c0a      	lsrs	r2, r1, #16
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdb0      	pop	{r4, r5, r7, pc}
 80026c8:	08009140 	.word	0x08009140

080026cc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5b 	bl	8002598 <_ZN8ICM426888icm42688C1EOS0_>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f9b3 	bl	8002a68 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3304      	adds	r3, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7ff ffdd 	bl	80026cc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ffdd 	bl	80026ec <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800274e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f103 0208 	add.w	r2, r3, #8
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	3308      	adds	r3, #8
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f7ff ffdc 	bl	800271c <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 800276e:	b5b0      	push	{r4, r5, r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 800277c:	68b8      	ldr	r0, [r7, #8]
 800277e:	f000 f938 	bl	80029f2 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002782:	4604      	mov	r4, r0
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f89d 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4605      	mov	r5, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f000 f93b 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002792:	4603      	mov	r3, r0
 8002794:	462a      	mov	r2, r5
 8002796:	4621      	mov	r1, r4
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f940 	bl	8002a1e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bdb0      	pop	{r4, r5, r7, pc}

080027a6 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	f000 f969 	bl	8002a88 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f96e 	bl	8002aa0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f8f0 	bl	80029b0 <_ZNSt8functionIFvvEE4swapERS1_>
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fea1 	bl	800251c <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80027da:	687b      	ldr	r3, [r7, #4]
	}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 80027e4:	b084      	sub	sp, #16
 80027e6:	b4b0      	push	{r4, r5, r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	f107 001c 	add.w	r0, r7, #28
 80027f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80027fc:	4619      	mov	r1, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a5b      	subs	r3, r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	1d1c      	adds	r4, r3, #4
 800280c:	f107 051c 	add.w	r5, r7, #28
 8002810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800282a:	3301      	adds	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800283a:	2b10      	cmp	r3, #16
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10f      	bne.n	800287a <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d005      	beq.n	8002870 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	e000      	b.n	8002872 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 8002870:	2200      	movs	r2, #0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8002878:	e012      	b.n	80028a0 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 80028a0:	2301      	movs	r3, #1
        }
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bcb0      	pop	{r4, r5, r7}
 80028aa:	b004      	add	sp, #16
 80028ac:	4770      	bx	lr

080028ae <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 80028da:	b590      	push	{r4, r7, lr}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f000 f90a 	bl	8002b00 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f103 0408 	add.w	r4, r3, #8
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffe0 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f904 	bl	8002b16 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}

08002918 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fecf 	bl	80026cc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	461a      	mov	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	6053      	str	r3, [r2, #4]
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f9e3 	bl	8000d34 <_ZNSt14_Function_baseC1Ev>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f000 f8e1 	bl	8002b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002980:	687c      	ldr	r4, [r7, #4]
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f7ff ffd8 	bl	8002938 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f000 f8e0 	bl	8002b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 8002996:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a04      	ldr	r2, [pc, #16]	; (80029ac <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 800299c:	609a      	str	r2, [r3, #8]
	}
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	08002b77 	.word	0x08002b77
 80029ac:	08002b95 	.word	0x08002b95

080029b0 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f911 	bl	8002be8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0208 	add.w	r2, r3, #8
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3308      	adds	r3, #8
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 f93a 	bl	8002c4c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f103 020c 	add.w	r2, r3, #12
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f000 f95b 	bl	8002ca0 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 8002a1e:	b5b0      	push	{r4, r5, r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f000 f956 	bl	8002cde <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f103 0408 	add.w	r4, r3, #8
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff3d 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	f7ff ffdb 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4629      	mov	r1, r5
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f000 f94b 	bl	8002cf4 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}

08002a68 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	8812      	ldrh	r2, [r2, #0]
 8002a78:	801a      	strh	r2, [r3, #0]
      { }
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	461a      	mov	r2, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	6053      	str	r3, [r2, #4]
 8002ab4:	6093      	str	r3, [r2, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f93b 	bl	8000d34 <_ZNSt14_Function_baseC1Ev>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f000 f92e 	bl	8002d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002ad0:	687c      	ldr	r4, [r7, #4]
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f7ff ffd8 	bl	8002a88 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f000 f92d 	bl	8002d3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 8002ae6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 8002aec:	609a      	str	r2, [r3, #8]
	}
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	08002d61 	.word	0x08002d61
 8002afc:	08002d7f 	.word	0x08002d7f

08002b00 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8002b16:	b590      	push	{r4, r7, lr}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8002b20:	687c      	ldr	r4, [r7, #4]
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	f7ff fece 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 f945 	bl	8002dbc <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002b44:	2301      	movs	r3, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002b52:	b590      	push	{r4, r7, lr}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002b5c:	6838      	ldr	r0, [r7, #0]
 8002b5e:	f7ff feeb 	bl	8002938 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4622      	mov	r2, r4
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f93a 	bl	8002de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f94c 	bl	8002e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f966 	bl	8002e58 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8002b8c:	bf00      	nop
      }
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d109      	bne.n	8002bbc <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f965 	bl	8002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	68b8      	ldr	r0, [r7, #8]
 8002bb2:	f000 f933 	bl	8002e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6023      	str	r3, [r4, #0]
	    break;
 8002bba:	e005      	b.n	8002bc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f964 	bl	8002e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002bc8:	2300      	movs	r3, #0
      }
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}

08002bd2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffed 	bl	8002bd2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c02:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002c06:	6838      	ldr	r0, [r7, #0]
 8002c08:	f7ff ffe3 	bl	8002bd2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c14:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ffd8 	bl	8002bd2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002c22:	4602      	mov	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffed 	bl	8002c36 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f7ff ffe7 	bl	8002c36 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ffde 	bl	8002c36 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	601a      	str	r2, [r3, #0]
    }
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffed 	bl	8002c8a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	f7ff ffe7 	bl	8002c8a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ffde 	bl	8002c8a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	601a      	str	r2, [r3, #0]
    }
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8002d00:	68fc      	ldr	r4, [r7, #12]
 8002d02:	68b8      	ldr	r0, [r7, #8]
 8002d04:	f7ff fdde 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002d08:	4605      	mov	r5, r0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fe7c 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4629      	mov	r1, r5
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 f8f4 	bl	8002f04 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}

08002d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	f7ff fe9e 	bl	8002a88 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4622      	mov	r2, r4
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8f4 	bl	8002f40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f906 	bl	8002f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f920 	bl	8002fb6 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8002d76:	bf00      	nop
      }
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d7e:	b590      	push	{r4, r7, lr}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d109      	bne.n	8002da6 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f91f 	bl	8002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002d98:	4604      	mov	r4, r0
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f000 f8ed 	bl	8002f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002da0:	4603      	mov	r3, r0
 8002da2:	6023      	str	r3, [r4, #0]
	    break;
 8002da4:	e005      	b.n	8002db2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f91f 	bl	8002ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002db2:	2300      	movs	r3, #0
      }
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002dc6:	687c      	ldr	r4, [r7, #4]
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f7ff fd7b 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f9f2 	bl	80031bc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002de2:	b5b0      	push	{r4, r5, r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002dee:	68b8      	ldr	r0, [r7, #8]
 8002df0:	f7ff fda2 	bl	8002938 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002df4:	4605      	mov	r5, r0
 8002df6:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002dfa:	f005 ffc1 	bl	8008d80 <_Znwj>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461c      	mov	r4, r3
 8002e02:	4629      	mov	r1, r5
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff fb59 	bl	80024bc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f834 	bl	8002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002e10:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002e12:	601c      	str	r4, [r3, #0]
	  }
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}

08002e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9dc 	bl	80031e2 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	681b      	ldr	r3, [r3, #0]
	}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	7138      	strb	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	f000 f9da 	bl	80031fa <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f9e1 	bl	8003210 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f9ca 	bl	80031fa <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff ffe3 	bl	8002e36 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe f821 	bl	8000ec8 <_ZNSt9_Any_data9_M_accessEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d82a      	bhi.n	8002efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002ea4:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecb 	.word	0x08002ecb
 8002eb4:	08002edf 	.word	0x08002edf
 8002eb8:	08002ef1 	.word	0x08002ef1
	      __dest._M_access<const type_info*>() = nullptr;
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f9b9 	bl	8003234 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
	      break;
 8002ec8:	e017      	b.n	8002efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff ffd4 	bl	8002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f7ff ffa2 	bl	8002e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	6023      	str	r3, [r4, #0]
	      break;
 8002edc:	e00d      	b.n	8002efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f7ff ff9c 	bl	8002e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002ee4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f9af 	bl	800324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002eee:	e004      	b.n	8002efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9bc 	bl	8003270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002ef8:	bf00      	nop
	  return false;
 8002efa:	2300      	movs	r3, #0
	}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8002f10:	68fc      	ldr	r4, [r7, #12]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fd78 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f9bc 	bl	800329a <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1d1c      	adds	r4, r3, #4
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f7ff fccc 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4620      	mov	r0, r4
 8002f32:	f000 f943 	bl	80031bc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7ff fd9b 	bl	8002a88 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002f52:	4605      	mov	r5, r0
 8002f54:	f44f 701e 	mov.w	r0, #632	; 0x278
 8002f58:	f005 ff12 	bl	8008d80 <_Znwj>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461c      	mov	r4, r3
 8002f60:	4629      	mov	r1, r5
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff fbea 	bl	800273c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f834 	bl	8002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002f6e:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002f70:	601c      	str	r4, [r3, #0]
	  }
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bdb0      	pop	{r4, r5, r7, pc}

08002f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f99c 	bl	80032c0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	681b      	ldr	r3, [r3, #0]
	}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	7138      	strb	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f000 f99a 	bl	80032d8 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f9a1 	bl	80032ee <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002fb6:	b590      	push	{r4, r7, lr}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f98a 	bl	80032d8 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ffe3 	bl	8002f94 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}

08002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd ff72 	bl	8000ec8 <_ZNSt9_Any_data9_M_accessEv>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d82a      	bhi.n	800305a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003004:	a201      	add	r2, pc, #4	; (adr r2, 800300c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	0800301d 	.word	0x0800301d
 8003010:	0800302b 	.word	0x0800302b
 8003014:	0800303f 	.word	0x0800303f
 8003018:	08003051 	.word	0x08003051
	      __dest._M_access<const type_info*>() = nullptr;
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f909 	bl	8003234 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003022:	4603      	mov	r3, r0
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
	      break;
 8003028:	e017      	b.n	800305a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff ffd3 	bl	8002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003030:	4604      	mov	r4, r0
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f7ff ffa1 	bl	8002f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003038:	4603      	mov	r3, r0
 800303a:	6023      	str	r3, [r4, #0]
	      break;
 800303c:	e00d      	b.n	800305a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800303e:	68b8      	ldr	r0, [r7, #8]
 8003040:	f7ff ff9b 	bl	8002f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003044:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f962 	bl	8003312 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 800304e:	e004      	b.n	800305a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003050:	4621      	mov	r1, r4
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f96f 	bl	8003336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003058:	bf00      	nop
	  return false;
 800305a:	2300      	movs	r3, #0
	}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}

08003064 <_ZN4iIMUC1ERKS_>:
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_ZN4iIMUC1ERKS_+0x20>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	08009190 	.word	0x08009190

08003088 <_ZN8ICM426888icm42688C1ERKS0_>:
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffe3 	bl	8003064 <_ZN4iIMUC1ERKS_>
 800309e:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	1d10      	adds	r0, r2, #4
 80030aa:	3304      	adds	r3, #4
 80030ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80030b0:	4619      	mov	r1, r3
 80030b2:	f005 ffcd 	bl	8009050 <memcpy>
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 80030be:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 80030c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 80030da:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80030de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f502 7406 	add.w	r4, r2, #536	; 0x218
 80030f2:	f503 7506 	add.w	r5, r3, #536	; 0x218
 80030f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800310a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800310e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003112:	6018      	str	r0, [r3, #0]
 8003114:	3304      	adds	r3, #4
 8003116:	8019      	strh	r1, [r3, #0]
 8003118:	3302      	adds	r3, #2
 800311a:	0c0a      	lsrs	r2, r1, #16
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}
 80031b8:	08009140 	.word	0x08009140

080031bc <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80031c6:	687c      	ldr	r4, [r7, #4]
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f7ff fb7b 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff ff58 	bl	8003088 <_ZN8ICM426888icm42688C1ERKS0_>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}

080031e2 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd fe77 	bl	8000ede <_ZNKSt9_Any_data9_M_accessEv>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003218:	f000 f8a2 	bl	8003360 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	4622      	mov	r2, r4
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8a3 	bl	8003370 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 800322a:	4603      	mov	r3, r0
	}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}

08003234 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fe43 	bl	8000ec8 <_ZNSt9_Any_data9_M_accessEv>
 8003242:	4603      	mov	r3, r0
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f000 f8a7 	bl	80033aa <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 800325c:	4603      	mov	r3, r0
 800325e:	4622      	mov	r2, r4
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8f5 	bl	8003452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}

08003270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fdfc 	bl	8002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003280:	4603      	mov	r3, r0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003288:	f44f 711d 	mov.w	r1, #628	; 0x274
 800328c:	4618      	mov	r0, r3
 800328e:	f005 fd75 	bl	8008d7c <_ZdlPvj>
	}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 80032a4:	687c      	ldr	r4, [r7, #4]
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	f7ff fbae 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4619      	mov	r1, r3
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 f8eb 	bl	800348c <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}

080032c0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fe08 	bl	8000ede <_ZNKSt9_Any_data9_M_accessEv>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 80032ee:	b590      	push	{r4, r7, lr}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80032f6:	f000 f833 	bl	8003360 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4622      	mov	r2, r4
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8d3 	bl	80034ae <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003308:	4603      	mov	r3, r0
	}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003312:	b590      	push	{r4, r7, lr}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800331c:	6838      	ldr	r0, [r7, #0]
 800331e:	f000 f8f1 	bl	8003504 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003322:	4603      	mov	r3, r0
 8003324:	4622      	mov	r2, r4
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f935 	bl	8003598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}

08003336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fe48 	bl	8002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003346:	4603      	mov	r3, r0
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 800334e:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003352:	4618      	mov	r0, r3
 8003354:	f005 fd12 	bl	8008d7c <_ZdlPvj>
	}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8003364:	bf00      	nop
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800337c:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3308      	adds	r3, #8
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f925 	bl	80035d2 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003388:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f92b 	bl	80035ec <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f934 	bl	8003608 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 80033a0:	4603      	mov	r3, r0
	}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}

080033aa <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fe59 	bl	8003088 <_ZN8ICM426888icm42688C1ERKS0_>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ffe5 	bl	80033c0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffe5 	bl	80033e0 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003432:	e883 0003 	stmia.w	r3, {r0, r1}
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f103 0208 	add.w	r2, r3, #8
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7ff ffdc 	bl	8003400 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003452:	b5b0      	push	{r4, r5, r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	f7ff ffa3 	bl	80033aa <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003464:	4605      	mov	r5, r0
 8003466:	f44f 701d 	mov.w	r0, #628	; 0x274
 800346a:	f005 fc89 	bl	8008d80 <_Znwj>
 800346e:	4603      	mov	r3, r0
 8003470:	461c      	mov	r4, r3
 8003472:	4629      	mov	r1, r5
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff ffd3 	bl	8003420 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff fcfc 	bl	8002e78 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003480:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003482:	601c      	str	r4, [r3, #0]
	  }
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bdb0      	pop	{r4, r5, r7, pc}

0800348c <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f7ff fab6 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800349c:	4603      	mov	r3, r0
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80034ae:	b5b0      	push	{r4, r5, r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 80034ba:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3308      	adds	r3, #8
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f8b8 	bl	8003636 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80034c6:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f88c 	bl	80035ec <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 80034d4:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3308      	adds	r3, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f8b8 	bl	8003650 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80034e0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f8be 	bl	800366a <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	4629      	mov	r1, r5
 80034f4:	4620      	mov	r0, r4
 80034f6:	f000 f8c6 	bl	8003686 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 80034fa:	4603      	mov	r3, r0
	}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bdb0      	pop	{r4, r5, r7, pc}

08003504 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	8812      	ldrh	r2, [r2, #0]
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff ff42 	bl	80033c0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffdf 	bl	800351a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003578:	e883 0003 	stmia.w	r3, {r0, r1}
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f103 0208 	add.w	r2, r3, #8
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff ffdc 	bl	8003546 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f7ff ffad 	bl	8003504 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 80035aa:	4605      	mov	r5, r0
 80035ac:	f44f 701e 	mov.w	r0, #632	; 0x278
 80035b0:	f005 fbe6 	bl	8008d80 <_Znwj>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461c      	mov	r4, r3
 80035b8:	4629      	mov	r1, r5
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff ffd3 	bl	8003566 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fd08 	bl	8002fd6 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 80035c6:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80035c8:	601c      	str	r4, [r3, #0]
	  }
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}

080035d2 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f86e 	bl	80036be <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80035f8:	68b8      	ldr	r0, [r7, #8]
 80035fa:	f7ff f963 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80035fe:	4603      	mov	r3, r0
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f85f 	bl	80036d6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003618:	4604      	mov	r4, r0
 800361a:	6838      	ldr	r0, [r7, #0]
 800361c:	f7ff f952 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	4621      	mov	r1, r4
 8003626:	4628      	mov	r0, r5
 8003628:	f000 f860 	bl	80036ec <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 800362c:	4603      	mov	r3, r0
    }
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bdb0      	pop	{r4, r5, r7, pc}

08003636 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f87a 	bl	800373a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8003646:	4603      	mov	r3, r0
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f879 	bl	8003752 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 8003660:	4603      	mov	r3, r0
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8003676:	68b8      	ldr	r0, [r7, #8]
 8003678:	f7ff f9c6 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800367c:	4603      	mov	r3, r0
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f869 	bl	800376a <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003698:	4604      	mov	r4, r0
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f7ff f912 	bl	80028c4 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80036a0:	4605      	mov	r5, r0
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff f9b0 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80036a8:	4603      	mov	r3, r0
 80036aa:	462a      	mov	r2, r5
 80036ac:	4621      	mov	r1, r4
 80036ae:	4630      	mov	r0, r6
 80036b0:	f000 f866 	bl	8003780 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 80036b4:	4603      	mov	r3, r0
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036be <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f889 	bl	80037de <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	7338      	strb	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f87d 	bl	80037f8 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 80036fe:	4603      	mov	r3, r0
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	1052      	asrs	r2, r2, #1
 8003706:	1899      	adds	r1, r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	6852      	ldr	r2, [r2, #4]
 800370c:	f002 0201 	and.w	r2, r2, #1
 8003710:	2a00      	cmp	r2, #0
 8003712:	d102      	bne.n	800371a <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e008      	b.n	800372c <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	6852      	ldr	r2, [r2, #4]
 800371e:	1052      	asrs	r2, r2, #1
 8003720:	4413      	add	r3, r2
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4608      	mov	r0, r1
 800372e:	4798      	blx	r3
 8003730:	4603      	mov	r3, r0
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f863 	bl	800380e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f865 	bl	800382a <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 8003760:	4603      	mov	r3, r0
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	7338      	strb	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f832 	bl	80037f8 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8003794:	4603      	mov	r3, r0
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	6852      	ldr	r2, [r2, #4]
 800379a:	1052      	asrs	r2, r2, #1
 800379c:	189d      	adds	r5, r3, r2
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	f002 0201 	and.w	r2, r2, #1
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	d102      	bne.n	80037b0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681c      	ldr	r4, [r3, #0]
 80037ae:	e008      	b.n	80037c2 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	6852      	ldr	r2, [r2, #4]
 80037b4:	1052      	asrs	r2, r2, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	681c      	ldr	r4, [r3, #0]
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f7ff f920 	bl	8002a08 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80037c8:	4603      	mov	r3, r0
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	4628      	mov	r0, r5
 80037d2:	47a0      	blx	r4
 80037d4:	4603      	mov	r3, r0
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bdb0      	pop	{r4, r5, r7, pc}

080037de <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f82b 	bl	8003844 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f812 	bl	8003844 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 8003820:	4603      	mov	r3, r0
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f810 	bl	800385a <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 800383a:	4603      	mov	r3, r0
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	4093      	lsls	r3, r2
        }   
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	4093      	lsls	r3, r2
        } 
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d102      	bne.n	80038c4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 80038be:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003964 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 80038c2:	e049      	b.n	8003958 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 80038c4:	2106      	movs	r1, #6
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f91e 	bl	8003b08 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80038d2:	2101      	movs	r1, #1
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f92b 	bl	8003b30 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 80038ea:	2101      	movs	r1, #1
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f933 	bl	8003b58 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	4093      	lsls	r3, r2
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003902:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003968 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 8003906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390a:	e025      	b.n	8003958 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 800390c:	210b      	movs	r1, #11
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8fa 	bl	8003b08 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 800391a:	2107      	movs	r1, #7
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f907 	bl	8003b30 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 8003932:	2107      	movs	r1, #7
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f90f 	bl	8003b58 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	2301      	movs	r3, #1
 8003940:	4093      	lsls	r3, r2
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800394a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800396c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 800394e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003952:	e001      	b.n	8003958 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 8003954:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 8003958:	eeb0 0a67 	vmov.f32	s0, s15
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	43fa0000 	.word	0x43fa0000
 8003968:	46fa0000 	.word	0x46fa0000
 800396c:	43480000 	.word	0x43480000

08003970 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 8003978:	2107      	movs	r1, #7
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8fd 	bl	8003b7a <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff ff71 	bl	8003870 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 800398e:	ee07 0a90 	vmov	s15, r0
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eddf 6a07 	vldr	s13, [pc, #28]	; 80039b4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399e:	e001      	b.n	80039a4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 80039a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 80039a4:	eef0 7a47 	vmov.f32	s15, s14
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	44fa0000 	.word	0x44fa0000

080039b8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	d102      	bne.n	80039cc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 80039c6:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003a6c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 80039ca:	e049      	b.n	8003a60 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 80039cc:	2106      	movs	r1, #6
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8e7 	bl	8003ba2 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80039da:	2101      	movs	r1, #1
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f4 	bl	8003bca <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 80039f2:	2101      	movs	r1, #1
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8fc 	bl	8003bf2 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	2301      	movs	r3, #1
 8003a00:	4093      	lsls	r3, r2
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003a70 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 8003a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a12:	e025      	b.n	8003a60 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 8003a14:	210e      	movs	r1, #14
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8c3 	bl	8003ba2 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8003a22:	2107      	movs	r1, #7
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8d0 	bl	8003bca <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 8003a3a:	2107      	movs	r1, #7
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8d8 	bl	8003bf2 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	2301      	movs	r3, #1
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a52:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003a74 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 8003a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5a:	e001      	b.n	8003a60 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 8003a5c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 8003a60:	eeb0 0a67 	vmov.f32	s0, s15
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	43fa0000 	.word	0x43fa0000
 8003a70:	46fa0000 	.word	0x46fa0000
 8003a74:	43480000 	.word	0x43480000

08003a78 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 8003a80:	2103      	movs	r1, #3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8c6 	bl	8003c14 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7ff fefd 	bl	8003890 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 8003a96:	ee07 0a90 	vmov	s15, r0
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	e001      	b.n	8003aac <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 8003aa8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8003aac:	eef0 7a47 	vmov.f32	s15, s14
 8003ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	71fb      	strb	r3, [r7, #7]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	79bb      	ldrb	r3, [r7, #6]
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 8003ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ae6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003b04 <_ZN8ICM4268815convertTempDataEhh+0x48>
 8003aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aee:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003af2:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 8003af6:	eeb0 0a67 	vmov.f32	s0, s15
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	43047ae1 	.word	0x43047ae1

08003b08 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf94      	ite	ls
 8003b1e:	2301      	movls	r3, #1
 8003b20:	2300      	movhi	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
        }
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	429a      	cmp	r2, r3
 8003b44:	bf2c      	ite	cs
 8003b46:	2301      	movcs	r3, #1
 8003b48:	2300      	movcc	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
        }
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b2db      	uxtb	r3, r3
        }
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bf94      	ite	ls
 8003b90:	2301      	movls	r3, #1
 8003b92:	2300      	movhi	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
        }
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
        }
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	bf2c      	ite	cs
 8003be0:	2301      	movcs	r3, #1
 8003be2:	2300      	movcc	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
        }
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b2db      	uxtb	r3, r3
        }
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf94      	ite	ls
 8003c2a:	2301      	movls	r3, #1
 8003c2c:	2300      	movhi	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
        }  
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c40:	f001 f87d 	bl	8004d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c44:	f000 f812 	bl	8003c6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c48:	f7fc ff80 	bl	8000b4c <MX_GPIO_Init>
  MX_SPI2_Init();
 8003c4c:	f000 fb72 	bl	8004334 <MX_SPI2_Init>
  MX_I2C4_Init();
 8003c50:	f7fd f89a 	bl	8000d88 <MX_I2C4_Init>
  MX_CAN1_Init();
 8003c54:	f7fc fe6e 	bl	8000934 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003c58:	f7fc fea4 	bl	80009a4 <MX_CAN2_Init>
  MX_TIM5_Init();
 8003c5c:	f000 fe18 	bl	8004890 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000);

  system_init();
 8003c60:	f000 fca4 	bl	80045ac <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 8003c64:	f000 fcc6 	bl	80045f4 <_Z22system_run_active_modev>
 8003c68:	e7fc      	b.n	8003c64 <main+0x28>
	...

08003c6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b094      	sub	sp, #80	; 0x50
 8003c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c72:	f107 0320 	add.w	r3, r7, #32
 8003c76:	2230      	movs	r2, #48	; 0x30
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f005 f960 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c90:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <_Z18SystemClock_Configv+0xf4>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a32      	ldr	r2, [pc, #200]	; (8003d60 <_Z18SystemClock_Configv+0xf4>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <_Z18SystemClock_Configv+0xf4>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <_Z18SystemClock_Configv+0xf8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <_Z18SystemClock_Configv+0xf8>)
 8003cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <_Z18SystemClock_Configv+0xf8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003cc0:	2309      	movs	r3, #9
 8003cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003cd8:	2306      	movs	r3, #6
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003cdc:	23d8      	movs	r3, #216	; 0xd8
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003ce4:	2309      	movs	r3, #9
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce8:	f107 0320 	add.w	r3, r7, #32
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 fc9d 	bl	800662c <HAL_RCC_OscConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8003d02:	f000 f831 	bl	8003d68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d06:	f002 fc41 	bl	800658c <HAL_PWREx_EnableOverDrive>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8003d1a:	f000 f825 	bl	8003d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d1e:	230f      	movs	r3, #15
 8003d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d22:	2302      	movs	r3, #2
 8003d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003d36:	f107 030c 	add.w	r3, r7, #12
 8003d3a:	2107      	movs	r1, #7
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f002 ff19 	bl	8006b74 <HAL_RCC_ClockConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8003d52:	f000 f809 	bl	8003d68 <Error_Handler>
  }
}
 8003d56:	bf00      	nop
 8003d58:	3750      	adds	r7, #80	; 0x50
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000

08003d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d6c:	b672      	cpsid	i
}
 8003d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d70:	e7fe      	b.n	8003d70 <Error_Handler+0x8>
	...

08003d74 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LED1_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LED1_Pin

void fail_silent_mode_run(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4905      	ldr	r1, [pc, #20]	; (8003d94 <_Z20fail_silent_mode_runv+0x20>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc ff8b 	bl	8000c9c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8003d86:	463b      	mov	r3, r7
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc ffac 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8003d90:	e7fe      	b.n	8003d90 <_Z20fail_silent_mode_runv+0x1c>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000

08003d98 <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	460b      	mov	r3, r1
 8003da4:	71bb      	strb	r3, [r7, #6]
 8003da6:	4613      	mov	r3, r2
 8003da8:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003daa:	797b      	ldrb	r3, [r7, #5]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8003db0:	79bb      	ldrb	r3, [r7, #6]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e00f      	b.n	8003de0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	e00d      	b.n	8003de0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8003dc4:	79bb      	ldrb	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <_ZN9iPHandler12add_read_bitEhbb+0x42>
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e002      	b.n	8003de0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
    }
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
 8003df6:	460b      	mov	r3, r1
 8003df8:	71bb      	strb	r3, [r7, #6]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003dfe:	797b      	ldrb	r3, [r7, #5]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8003e04:	79bb      	ldrb	r3, [r7, #6]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <_ZN9iPHandler13add_write_bitEhbb+0x22>
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	e012      	b.n	8003e34 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e00d      	b.n	8003e34 <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8003e18:	79bb      	ldrb	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e006      	b.n	8003e34 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
    }
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_Z15normal_mode_runv>:
#define LED_HEARTBEAT_GPIO_Pin  LED2_Pin

static bool run = false;

void normal_mode_run(void)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8003e46:	af04      	add	r7, sp, #16
	taskIMUgetData_t taskIMUgetData;
	taskCNIsendData_t taskCNIsendIMUdata;
	taskTimeTriggeredSync_t taskPeriodicSync;

	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_Port, ICM42688_CS_Pin);
 8003e48:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e50:	497c      	ldr	r1, [pc, #496]	; (8004044 <_Z15normal_mode_runv+0x204>)
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc ff22 	bl	8000c9c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8003e58:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8003e5c:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 8003e60:	2300      	movs	r3, #0
 8003e62:	4979      	ldr	r1, [pc, #484]	; (8004048 <_Z15normal_mode_runv+0x208>)
 8003e64:	f000 f922 	bl	80040ac <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 8003e68:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e6c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e70:	2201      	movs	r2, #1
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 8003e80:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e88:	4a70      	ldr	r2, [pc, #448]	; (800404c <_Z15normal_mode_runv+0x20c>)
 8003e8a:	461c      	mov	r4, r3
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8003e94:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003e98:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	2328      	movs	r3, #40	; 0x28
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f005 f84c 	bl	8008f40 <memset>
 8003ea8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003eac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003eb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ebc:	2206      	movs	r2, #6
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ec4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ec8:	2202      	movs	r2, #2
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ed0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ed4:	2206      	movs	r2, #6
 8003ed6:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8003ed8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003edc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ee0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003ee4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003ee8:	3310      	adds	r3, #16
 8003eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eee:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ef2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ef6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003efa:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003efe:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8003f02:	f103 0418 	add.w	r4, r3, #24
 8003f06:	4613      	mov	r3, r2
 8003f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8003f0e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003f12:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003f16:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8003f1a:	f107 001c 	add.w	r0, r7, #28
 8003f1e:	f7fd f97b 	bl	8001218 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	2208      	movs	r2, #8
 8003f26:	494a      	ldr	r1, [pc, #296]	; (8004050 <_Z15normal_mode_runv+0x210>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc feb7 	bl	8000c9c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8003f2e:	4849      	ldr	r0, [pc, #292]	; (8004054 <_Z15normal_mode_runv+0x214>)
 8003f30:	f7fc fae8 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8003f34:	f507 706c 	add.w	r0, r7, #944	; 0x3b0
 8003f38:	4b47      	ldr	r3, [pc, #284]	; (8004058 <_Z15normal_mode_runv+0x218>)
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2364      	movs	r3, #100	; 0x64
 8003f42:	2201      	movs	r2, #1
 8003f44:	2100      	movs	r1, #0
 8003f46:	f000 fc5b 	bl	8004800 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8003f4a:	f507 7072 	add.w	r0, r7, #968	; 0x3c8
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2364      	movs	r3, #100	; 0x64
 8003f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f000 fb9d 	bl	800469c <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
			WCET_TASK_HEARTBEAT_US,
			BCET_TASK_HEARTBEAT_US,
			&ledHeartbeat);

	taskIMUgetData_constructor(&taskIMUgetData,
 8003f62:	f507 705e 	add.w	r0, r7, #888	; 0x378
 8003f66:	2307      	movs	r3, #7
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	f107 031c 	add.w	r3, r7, #28
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	2300      	movs	r3, #0
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2364      	movs	r3, #100	; 0x64
 8003f76:	2264      	movs	r2, #100	; 0x64
 8003f78:	2101      	movs	r1, #1
 8003f7a:	f000 fbc5 	bl	8004708 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>
			PERIOD_TASK_IMU_TICKS_NORMAL,
			WCET_TASK_IMU_US,
			BCET_TASK_IMU_US,
			&imu, HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskCNIsendData_constructor(&taskCNIsendIMUdata,
 8003f7e:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8003f82:	2307      	movs	r3, #7
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2364      	movs	r3, #100	; 0x64
 8003f8c:	2264      	movs	r2, #100	; 0x64
 8003f8e:	2104      	movs	r1, #4
 8003f90:	f000 fb52 	bl	8004638 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			PERIOD_TASK_CNI_SEND_IMU_TICKS_NORMAL,
			WCET_TASK_CNI_SEND_IMU_US,
			BCET_TASK_CNI_SEND_IMU_US,
			HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskTimeTriggeredSync_constructor(&taskPeriodicSync,
 8003f94:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8003f98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003fa2:	9302      	str	r3, [sp, #8]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2364      	movs	r3, #100	; 0x64
 8003fae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003fb6:	f000 fe03 	bl	8004bc0 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
			HANDLE_MSG_CNI_SYNC,
			EXPECTED_SYNC_TIMESTAMP_TICKS,
			DELAY_SYNC_TICKS);

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8003fba:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003fbe:	4827      	ldr	r0, [pc, #156]	; (800405c <_Z15normal_mode_runv+0x21c>)
 8003fc0:	f000 fcec 	bl	800499c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8003fc4:	f000 fd14 	bl	80049f0 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8003fc8:	f7fc fab8 	bl	800053c <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8003fcc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fb7d 	bl	80046d0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8003fd6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fbb2 	bl	8004744 <_Z20taskIMUgetData_startP16taskIMUgetData_t>
	taskCNIsendData_start(&taskCNIsendIMUdata);
 8003fe0:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fb41 	bl	800466c <_Z21taskCNIsendData_startP17taskCNIsendData_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8003fea:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdbe 	bl	8004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8003ff4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fdb9 	bl	8004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8003ffe:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fdb4 	bl	8004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8004008:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fdaf 	bl	8004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
 8004012:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fdaa 	bl	8004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>

	CNI_start();
 800401c:	f7fc fab4 	bl	8000588 <_Z9CNI_startv>

	// Se queda acá esperando hasta que uno presione el botón para comenzar
	while(!run)
 8004020:	bf00      	nop
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <_Z15normal_mode_runv+0x220>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f8      	bne.n	8004022 <_Z15normal_mode_runv+0x1e2>
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
#endif
	taskWatchdog_start(&taskWatchdog);
 8004030:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fc11 	bl	800485c <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 800403a:	f000 fcf1 	bl	8004a20 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 800403e:	f000 fcfb 	bl	8004a38 <_Z31timeTriggeredScheduler_dispatchv>
 8004042:	e7fc      	b.n	800403e <_Z15normal_mode_runv+0x1fe>
 8004044:	40020400 	.word	0x40020400
 8004048:	20000274 	.word	0x20000274
 800404c:	08009124 	.word	0x08009124
 8004050:	40021000 	.word	0x40021000
 8004054:	200001b8 	.word	0x200001b8
 8004058:	20000260 	.word	0x20000260
 800405c:	200002e0 	.word	0x200002e0
 8004060:	20000270 	.word	0x20000270

08004064 <HAL_CAN_RxFifo0MsgPendingCallback>:
    	run = true;
    }
}
#else
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800406c:	2102      	movs	r1, #2
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 fb8c 	bl	800578c <HAL_CAN_DeactivateNotification>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8004074:	2014      	movs	r0, #20
 8004076:	f001 ff08 	bl	8005e8a <HAL_NVIC_DisableIRQ>
	run = true;
 800407a:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000270 	.word	0x20000270

0800408c <_ZN9iPHandlerC1Ev>:
class iPHandler {
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <_ZN9iPHandlerC1Ev+0x1c>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	080091f0 	.word	0x080091f0

080040ac <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ffe5 	bl	800408c <_ZN9iPHandlerC1Ev>
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	615a      	str	r2, [r3, #20]
		, m_size(0)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc fdfa 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f103 0219 	add.w	r2, r3, #25
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	080091e0 	.word	0x080091e0

08004114 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	2b1f      	cmp	r3, #31
 8004124:	d901      	bls.n	800412a <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e029      	b.n	800417e <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7818      	ldrb	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7b19      	ldrb	r1, [r3, #12]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	7b5b      	ldrb	r3, [r3, #13]
 8004136:	461a      	mov	r2, r3
 8004138:	f7ff fe2e 	bl	8003d98 <_ZN9iPHandler12add_read_bitEhbb>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	3301      	adds	r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7b9b      	ldrb	r3, [r3, #14]
 8004168:	3318      	adds	r3, #24
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8004172:	2100      	movs	r1, #0
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f842 	bl	80041fe <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 800417a:	4603      	mov	r3, r0
 800417c:	bf00      	nop
	}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	785b      	ldrb	r3, [r3, #1]
 8004196:	2b1f      	cmp	r3, #31
 8004198:	d901      	bls.n	800419e <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e02b      	b.n	80041f6 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7818      	ldrb	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7b19      	ldrb	r1, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7b5b      	ldrb	r3, [r3, #13]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7ff fe1e 	bl	8003dec <_ZN9iPHandler13add_write_bitEhbb>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3338      	adds	r3, #56	; 0x38
 80041be:	1c58      	adds	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	f004 ff42 	bl	8009050 <memcpy>
		m_mode = opt.mode;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	3301      	adds	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	611a      	str	r2, [r3, #16]

		return start_transmition();
 80041ea:	2100      	movs	r1, #0
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f806 	bl	80041fe <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 80041f2:	4603      	mov	r3, r0
 80041f4:	bf00      	nop
	}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fd68 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d021      	beq.n	8004264 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 8004220:	2b02      	cmp	r3, #2
 8004222:	dc21      	bgt.n	8004268 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8004228:	2b01      	cmp	r3, #1
 800422a:	d019      	beq.n	8004260 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 800422c:	e01c      	b.n	8004268 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 0218 	add.w	r2, r3, #24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004240:	b29b      	uxth	r3, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f81e 	bl	8004284 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8004248:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fd49 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e00d      	b.n	800427c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8004260:	2303      	movs	r3, #3
 8004262:	e00b      	b.n	800427c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8004264:	2303      	movs	r3, #3
 8004266:	e009      	b.n	800427c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc fd3a 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8004274:	2303      	movs	r3, #3
 8004276:	e001      	b.n	800427c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8004278:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 800427a:	2300      	movs	r3, #0
	}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e013      	b.n	80042ca <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68d8      	ldr	r0, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	f003 faab 	bl	800780e <HAL_SPI_TransmitReceive>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f806 	bl	80042d2 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 80042c6:	4603      	mov	r3, r0
 80042c8:	bf00      	nop

   }
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 80042e8:	2301      	movs	r3, #1
		   break;
	   }
   }
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b087      	sub	sp, #28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e00a      	b.n	800431e <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	441a      	add	r2, r3
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	440b      	add	r3, r1
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d3f0      	bcc.n	8004308 <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <MX_SPI2_Init+0x74>)
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <MX_SPI2_Init+0x78>)
 800433c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004344:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <MX_SPI2_Init+0x74>)
 800434e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004352:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004356:	2200      	movs	r2, #0
 8004358:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <MX_SPI2_Init+0x74>)
 800435c:	2201      	movs	r2, #1
 800435e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004366:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <MX_SPI2_Init+0x74>)
 800436a:	2220      	movs	r2, #32
 800436c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004370:	2200      	movs	r2, #0
 8004372:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004376:	2200      	movs	r2, #0
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <MX_SPI2_Init+0x74>)
 800437c:	2200      	movs	r2, #0
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004382:	2207      	movs	r2, #7
 8004384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <MX_SPI2_Init+0x74>)
 800438e:	2200      	movs	r2, #0
 8004390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004392:	4805      	ldr	r0, [pc, #20]	; (80043a8 <MX_SPI2_Init+0x74>)
 8004394:	f003 f990 	bl	80076b8 <HAL_SPI_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800439e:	f7ff fce3 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000274 	.word	0x20000274
 80043ac:	40003800 	.word	0x40003800

080043b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_SPI_MspInit+0x7c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d128      	bne.n	8004424 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a16      	ldr	r2, [pc, #88]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a10      	ldr	r2, [pc, #64]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043f0:	f043 0302 	orr.w	r3, r3, #2
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <HAL_SPI_MspInit+0x80>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004402:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004408:	2302      	movs	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004410:	2303      	movs	r3, #3
 8004412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004414:	2305      	movs	r3, #5
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4619      	mov	r1, r3
 800441e:	4805      	ldr	r0, [pc, #20]	; (8004434 <HAL_SPI_MspInit+0x84>)
 8004420:	f001 fd4e 	bl	8005ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40003800 	.word	0x40003800
 8004430:	40023800 	.word	0x40023800
 8004434:	40020400 	.word	0x40020400

08004438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <HAL_MspInit+0x44>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a0e      	ldr	r2, [pc, #56]	; (800447c <HAL_MspInit+0x44>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <HAL_MspInit+0x44>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_MspInit+0x44>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_MspInit+0x44>)
 800445c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004460:	6453      	str	r3, [r2, #68]	; 0x44
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_MspInit+0x44>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800

08004480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004484:	e7fe      	b.n	8004484 <NMI_Handler+0x4>

08004486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <HardFault_Handler+0x4>

0800448c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004490:	e7fe      	b.n	8004490 <MemManage_Handler+0x4>

08004492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004496:	e7fe      	b.n	8004496 <BusFault_Handler+0x4>

08004498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800449c:	e7fe      	b.n	800449c <UsageFault_Handler+0x4>

0800449e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044cc:	f000 fc74 	bl	8004db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <CAN1_RX0_IRQHandler+0x10>)
 80044da:	f001 f97e 	bl	80057da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200001b8 	.word	0x200001b8

080044e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <TIM5_IRQHandler+0x10>)
 80044ee:	f003 fe34 	bl	800815a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200002e0 	.word	0x200002e0

080044fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return 1;
 8004500:	2301      	movs	r3, #1
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <_kill>:

int _kill(int pid, int sig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004516:	f004 fd6f 	bl	8008ff8 <__errno>
 800451a:	4603      	mov	r3, r0
 800451c:	2216      	movs	r2, #22
 800451e:	601a      	str	r2, [r3, #0]
  return -1;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_exit>:

void _exit (int status)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ffe7 	bl	800450c <_kill>
  while (1) {}    /* Make sure we hang here */
 800453e:	e7fe      	b.n	800453e <_exit+0x12>

08004540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <_sbrk+0x5c>)
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <_sbrk+0x60>)
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <_sbrk+0x64>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <_sbrk+0x64>)
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <_sbrk+0x68>)
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <_sbrk+0x64>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004570:	f004 fd42 	bl	8008ff8 <__errno>
 8004574:	4603      	mov	r3, r0
 8004576:	220c      	movs	r2, #12
 8004578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800457e:	e009      	b.n	8004594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_sbrk+0x64>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <_sbrk+0x64>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <_sbrk+0x64>)
 8004590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004592:	68fb      	ldr	r3, [r7, #12]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20050000 	.word	0x20050000
 80045a0:	00000400 	.word	0x00000400
 80045a4:	200002d8 	.word	0x200002d8
 80045a8:	20000528 	.word	0x20000528

080045ac <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <_Z11system_initv+0x40>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <_Z11system_initv+0x40>)
 80045c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <_Z11system_initv+0x40>)
 80045cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d0:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <_Z11system_initv+0x44>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 80045d8:	e002      	b.n	80045e0 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_Z11system_initv+0x44>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	200002dc 	.word	0x200002dc

080045f4 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <_Z22system_run_active_modev+0x1c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 8004600:	f7ff fc1e 	bl	8003e40 <_Z15normal_mode_runv>
			break;
 8004604:	e002      	b.n	800460c <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 8004606:	f7ff fbb5 	bl	8003d74 <_Z20fail_silent_mode_runv>
			break;
 800460a:	bf00      	nop
	}
}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200002dc 	.word	0x200002dc

08004614 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <SystemInit+0x20>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	4a05      	ldr	r2, [pc, #20]	; (8004634 <SystemInit+0x20>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4904      	ldr	r1, [pc, #16]	; (8004668 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 8004656:	f000 fb2b 	bl	8004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	615a      	str	r2, [r3, #20]
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08004681 	.word	0x08004681

0800466c <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff8d 	bl	80005ac <_Z12CNI_send_msgm>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4904      	ldr	r1, [pc, #16]	; (80046cc <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 80046ba:	f000 faf9 	bl	8004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	615a      	str	r2, [r3, #20]
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	080046ed 	.word	0x080046ed

080046d0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fb02 	bl	8000ce8 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fc fae5 	bl	8000cc8 <_ZN5STM324gpio6toggleEv>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>:
#define LEN_IMU_CNI_DATA 24

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, uint32_t handleMsg)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em+0x38>)
 8004726:	f000 fac3 	bl	8004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	615a      	str	r2, [r3, #20]
	me->mHandleMsg_ = handleMsg;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	08004759 	.word	0x08004759

08004744 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:

	timeTriggeredTask_destructor(&me->super);
}

void taskIMUgetData_start(taskIMUgetData_t *me)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	// Por ahora no hace nada
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b08d      	sub	sp, #52	; 0x34
 800475c:	af04      	add	r7, sp, #16
 800475e:	6078      	str	r0, [r7, #4]
	uint8_t dataForCni[LEN_IMU_CNI_DATA];

	me->mIMU_->save_data();
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
	me->mIMU_->read_data(&(me->mIMUdata_));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6958      	ldr	r0, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3310      	adds	r3, #16
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	3218      	adds	r2, #24
 8004782:	4611      	mov	r1, r2
 8004784:	4798      	blx	r3

	// Convertir los datos de la IMU en bytes
	make_imu_data_for_cni(me->mIMUdata_, dataForCni);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f107 0208 	add.w	r2, r7, #8
 800478c:	9203      	str	r2, [sp, #12]
 800478e:	466c      	mov	r4, sp
 8004790:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004794:	ca07      	ldmia	r2, {r0, r1, r2}
 8004796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800479a:	3318      	adds	r3, #24
 800479c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800479e:	f000 f80c 	bl	80047ba <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	f107 0108 	add.w	r1, r7, #8
 80047aa:	2218      	movs	r2, #24
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fc f825 	bl	80007fc <_Z22CNI_update_msg_contentmPhm>
}
 80047b2:	bf00      	nop
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd90      	pop	{r4, r7, pc}

080047ba <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 80047ba:	b084      	sub	sp, #16
 80047bc:	b490      	push	{r4, r7}
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f107 0408 	add.w	r4, r7, #8
 80047c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047c8:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3304      	adds	r3, #4
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	3308      	adds	r3, #8
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	330c      	adds	r3, #12
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	3310      	adds	r3, #16
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3314      	adds	r3, #20
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc90      	pop	{r4, r7}
 80047fc:	b004      	add	sp, #16
 80047fe:	4770      	bx	lr

08004800 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	490d      	ldr	r1, [pc, #52]	; (8004854 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 800481e:	f000 fa47 	bl	8004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 800482e:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004840:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	2209      	movs	r2, #9
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	08004877 	.word	0x08004877
 8004858:	40003000 	.word	0x40003000

0800485c <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4618      	mov	r0, r3
 800486a:	f001 fe30 	bl	80064ce <HAL_IWDG_Init>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fe72 	bl	800656c <HAL_IWDG_Refresh>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	609a      	str	r2, [r3, #8]
 80048a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048a4:	1d3b      	adds	r3, r7, #4
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <MX_TIM5_Init+0x94>)
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <MX_TIM5_Init+0x98>)
 80048b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <MX_TIM5_Init+0x94>)
 80048b6:	226b      	movs	r2, #107	; 0x6b
 80048b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <MX_TIM5_Init+0x94>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <MX_TIM5_Init+0x94>)
 80048c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <MX_TIM5_Init+0x94>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <MX_TIM5_Init+0x94>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80048d4:	4813      	ldr	r0, [pc, #76]	; (8004924 <MX_TIM5_Init+0x94>)
 80048d6:	f003 fb35 	bl	8007f44 <HAL_TIM_Base_Init>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80048e0:	f7ff fa42 	bl	8003d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80048ea:	f107 0310 	add.w	r3, r7, #16
 80048ee:	4619      	mov	r1, r3
 80048f0:	480c      	ldr	r0, [pc, #48]	; (8004924 <MX_TIM5_Init+0x94>)
 80048f2:	f003 fd73 	bl	80083dc <HAL_TIM_ConfigClockSource>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80048fc:	f7ff fa34 	bl	8003d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004900:	2300      	movs	r3, #0
 8004902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4805      	ldr	r0, [pc, #20]	; (8004924 <MX_TIM5_Init+0x94>)
 800490e:	f004 f97f 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004918:	f7ff fa26 	bl	8003d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	200002e0 	.word	0x200002e0
 8004928:	40000c00 	.word	0x40000c00

0800492c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <HAL_TIM_Base_MspInit+0x44>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d113      	bne.n	8004966 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <HAL_TIM_Base_MspInit+0x48>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a0c      	ldr	r2, [pc, #48]	; (8004974 <HAL_TIM_Base_MspInit+0x48>)
 8004944:	f043 0308 	orr.w	r3, r3, #8
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_TIM_Base_MspInit+0x48>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	2032      	movs	r0, #50	; 0x32
 800495c:	f001 fa6b 	bl	8005e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004960:	2032      	movs	r0, #50	; 0x32
 8004962:	f001 fa84 	bl	8005e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40023800 	.word	0x40023800

08004978 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	3301      	adds	r3, #1
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8004988:	6053      	str	r3, [r2, #4]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	2000039c 	.word	0x2000039c

0800499c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e008      	b.n	80049c4 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3302      	adds	r3, #2
 80049b8:	2100      	movs	r1, #0
 80049ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d9f3      	bls.n	80049b2 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 80049d0:	4a06      	ldr	r2, [pc, #24]	; (80049ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
	_instance.mSyncExecuted_ = 0;
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	2000039c 	.word	0x2000039c

080049f0 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <_Z27timeTriggeredScheduler_initv+0x28>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f003 fb7f 	bl	80080fc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <_Z27timeTriggeredScheduler_initv+0x28>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <_Z27timeTriggeredScheduler_initv+0x2c>)
 8004a04:	210e      	movs	r1, #14
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fe16 	bl	8008638 <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <_Z27timeTriggeredScheduler_initv+0x28>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8004a14:	bf00      	nop
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	2000039c 	.word	0x2000039c
 8004a1c:	08004979 	.word	0x08004979

08004a20 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <_Z28timeTriggeredScheduler_startv+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f003 faef 	bl	800800c <HAL_TIM_Base_Start_IT>
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	2000039c 	.word	0x2000039c

08004a38 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a42:	b672      	cpsid	i
}
 8004a44:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 8004a46:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <_Z31timeTriggeredScheduler_dispatchv+0x62>
	{
		_instance.mTicks_--;
 8004a58:	4b44      	ldr	r3, [pc, #272]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a60:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
		if(_instance.mSyncExecuted_ == 1)
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <_Z31timeTriggeredScheduler_dispatchv+0x62>
		{
			_instance.mSyncExecuted_ = 0;
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a35      	ldr	r2, [pc, #212]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004a96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a98:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a9a:	b662      	cpsie	i
}
 8004a9c:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 8004a9e:	e05d      	b.n	8004b5c <_Z31timeTriggeredScheduler_dispatchv+0x124>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	e026      	b.n	8004af4 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
		{
			if((task = _instance.mTaskList_[i]))
 8004aa6:	4a31      	ldr	r2, [pc, #196]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3302      	adds	r3, #2
 8004aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <_Z31timeTriggeredScheduler_dispatchv+0xb6>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <_Z31timeTriggeredScheduler_dispatchv+0xb6>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b09      	cmp	r3, #9
 8004af8:	d9d5      	bls.n	8004aa6 <_Z31timeTriggeredScheduler_dispatchv+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 8004afa:	b672      	cpsid	i
}
 8004afc:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <_Z31timeTriggeredScheduler_dispatchv+0x11c>
		{
			_instance.mTicks_--;
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b18:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
			if(_instance.mSyncExecuted_ == 1)
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d011      	beq.n	8004b58 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			{
				_instance.mSyncExecuted_ = 0;
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8004b4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e001      	b.n	8004b58 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			}
#endif
		}
		else
		{
			updateRequired = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b58:	b662      	cpsie	i
}
 8004b5a:	bf00      	nop
	while(updateRequired)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d19e      	bne.n	8004aa0 <_Z31timeTriggeredScheduler_dispatchv+0x68>
		}

		__enable_irq();
	}
	__asm__("wfi");
 8004b62:	bf30      	wfi
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	2000039c 	.word	0x2000039c

08004b70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8004b7c:	e002      	b.n	8004b84 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3302      	adds	r3, #2
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	d9f2      	bls.n	8004b7e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b0a      	cmp	r3, #10
 8004b9c:	d101      	bne.n	8004ba2 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e006      	b.n	8004bb0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 8004ba2:	4906      	ldr	r1, [pc, #24]	; (8004bbc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	2000039c 	.word	0x2000039c

08004bc0 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4907      	ldr	r1, [pc, #28]	; (8004bfc <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 8004bde:	f000 f867 	bl	8004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	61da      	str	r2, [r3, #28]
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08004c01 	.word	0x08004c01

08004c00 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
#if !IS_MASTER
	uint32_t timestamp;
	uint32_t deltaTime;

	// Espero a que me llegue el mensaje de sincronización
	if( CNI_receive_msg(me->mHandleMsg_) == CNI_OK )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fd5f 	bl	80006d0 <_Z15CNI_receive_msgm>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d040      	beq.n	8004ca4 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa4>
	{
		// Tomo un timestamp del mensaje recibido
		timestamp = __HAL_TIM_GET_COUNTER(_instance.mTimer_);
 8004c22:	4b22      	ldr	r3, [pc, #136]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	60bb      	str	r3, [r7, #8]

		// Comparo ese valor con el valor esperado
		if(timestamp > me->mExpectedTimestamp_)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d919      	bls.n	8004c6a <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x6a>
		{
			deltaTime = timestamp - me->mExpectedTimestamp_;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x4a>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8004c46:	2364      	movs	r3, #100	; 0x64
 8004c48:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ + deltaTime);
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	440a      	add	r2, r1
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	440a      	add	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e018      	b.n	8004c9c <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x9c>
		}
		else
		{
			deltaTime = me->mExpectedTimestamp_ - timestamp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x7e>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8004c7a:	2364      	movs	r3, #100	; 0x64
 8004c7c:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ - deltaTime);
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	1a8a      	subs	r2, r1, r2
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	1a8a      	subs	r2, r1, r2
 8004c9a:	60da      	str	r2, [r3, #12]
		}

		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
#endif
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	2000039c 	.word	0x2000039c

08004cb0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	611a      	str	r2, [r3, #16]
}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cf2:	490e      	ldr	r1, [pc, #56]	; (8004d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cf4:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cf8:	e002      	b.n	8004d00 <LoopCopyDataInit>

08004cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cfe:	3304      	adds	r3, #4

08004d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d04:	d3f9      	bcc.n	8004cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d08:	4c0b      	ldr	r4, [pc, #44]	; (8004d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d0c:	e001      	b.n	8004d12 <LoopFillZerobss>

08004d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d10:	3204      	adds	r2, #4

08004d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d14:	d3fb      	bcc.n	8004d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d16:	f7ff fc7d 	bl	8004614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d1a:	f004 f973 	bl	8009004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d1e:	f7fe ff8d 	bl	8003c3c <main>
  bx  lr    
 8004d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d2c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8004d30:	08009218 	.word	0x08009218
  ldr r2, =_sbss
 8004d34:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8004d38:	20000524 	.word	0x20000524

08004d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d3c:	e7fe      	b.n	8004d3c <ADC_IRQHandler>

08004d3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d42:	2003      	movs	r0, #3
 8004d44:	f001 f86c 	bl	8005e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d48:	200f      	movs	r0, #15
 8004d4a:	f000 f805 	bl	8004d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d4e:	f7ff fb73 	bl	8004438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_InitTick+0x54>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_InitTick+0x58>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f895 	bl	8005ea6 <HAL_SYSTICK_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00e      	b.n	8004da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d80a      	bhi.n	8004da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d94:	f001 f84f 	bl	8005e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d98:	4a06      	ldr	r2, [pc, #24]	; (8004db4 <HAL_InitTick+0x5c>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000120 	.word	0x20000120
 8004db0:	20000128 	.word	0x20000128
 8004db4:	20000124 	.word	0x20000124

08004db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_IncTick+0x20>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_IncTick+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <HAL_IncTick+0x24>)
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000128 	.word	0x20000128
 8004ddc:	200003d4 	.word	0x200003d4

08004de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return uwTick;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_GetTick+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200003d4 	.word	0x200003d4

08004df8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0ed      	b.n	8004fe6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fb fdfc 	bl	8000a14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e2c:	f7ff ffd8 	bl	8004de0 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e32:	e012      	b.n	8004e5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e34:	f7ff ffd4 	bl	8004de0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b0a      	cmp	r3, #10
 8004e40:	d90b      	bls.n	8004e5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2205      	movs	r2, #5
 8004e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0c5      	b.n	8004fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0e5      	beq.n	8004e34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0202 	bic.w	r2, r2, #2
 8004e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e78:	f7ff ffb2 	bl	8004de0 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e7e:	e012      	b.n	8004ea6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e80:	f7ff ffae 	bl	8004de0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b0a      	cmp	r3, #10
 8004e8c:	d90b      	bls.n	8004ea6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e09f      	b.n	8004fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7e1b      	ldrb	r3, [r3, #24]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e007      	b.n	8004ede <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7e5b      	ldrb	r3, [r3, #25]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d108      	bne.n	8004ef8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e007      	b.n	8004f08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7e9b      	ldrb	r3, [r3, #26]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d108      	bne.n	8004f22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0220 	orr.w	r2, r2, #32
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e007      	b.n	8004f32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7edb      	ldrb	r3, [r3, #27]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d108      	bne.n	8004f4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0210 	bic.w	r2, r2, #16
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e007      	b.n	8004f5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0210 	orr.w	r2, r2, #16
 8004f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7f1b      	ldrb	r3, [r3, #28]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d108      	bne.n	8004f76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e007      	b.n	8004f86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0208 	bic.w	r2, r2, #8
 8004f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	7f5b      	ldrb	r3, [r3, #29]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d108      	bne.n	8004fa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0204 	orr.w	r2, r2, #4
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e007      	b.n	8004fb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0204 	bic.w	r2, r2, #4
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005006:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d003      	beq.n	8005016 <HAL_CAN_ConfigFilter+0x26>
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b02      	cmp	r3, #2
 8005012:	f040 80be 	bne.w	8005192 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005016:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_CAN_ConfigFilter+0x1bc>)
 8005018:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005020:	f043 0201 	orr.w	r2, r3, #1
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005030:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	431a      	orrs	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2201      	movs	r2, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d123      	bne.n	80050c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	43db      	mvns	r3, r3
 8005082:	401a      	ands	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800509a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3248      	adds	r2, #72	; 0x48
 80050a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	3348      	adds	r3, #72	; 0x48
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	440b      	add	r3, r1
 80050be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d122      	bne.n	800510e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	3248      	adds	r2, #72	; 0x48
 80050ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005102:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	3348      	adds	r3, #72	; 0x48
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	43db      	mvns	r3, r3
 8005120:	401a      	ands	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005128:	e007      	b.n	800513a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	431a      	orrs	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	401a      	ands	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005154:	e007      	b.n	8005166 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	431a      	orrs	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d107      	bne.n	800517e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	431a      	orrs	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005184:	f023 0201 	bic.w	r2, r3, #1
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e006      	b.n	80051a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40006400 	.word	0x40006400

080051b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d12e      	bne.n	8005222 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051dc:	f7ff fe00 	bl	8004de0 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051e2:	e012      	b.n	800520a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051e4:	f7ff fdfc 	bl	8004de0 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b0a      	cmp	r3, #10
 80051f0:	d90b      	bls.n	800520a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2205      	movs	r2, #5
 8005202:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e012      	b.n	8005230 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e006      	b.n	8005230 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800524c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d003      	beq.n	8005264 <HAL_CAN_AddTxMessage+0x2c>
 800525c:	7ffb      	ldrb	r3, [r7, #31]
 800525e:	2b02      	cmp	r3, #2
 8005260:	f040 80ad 	bne.w	80053be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8095 	beq.w	80053ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	0e1b      	lsrs	r3, r3, #24
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800528e:	2201      	movs	r2, #1
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	409a      	lsls	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	6809      	ldr	r1, [r1, #0]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3318      	adds	r3, #24
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	440b      	add	r3, r1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e00f      	b.n	80052dc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3318      	adds	r3, #24
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	440b      	add	r3, r1
 80052da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3318      	adds	r3, #24
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	440b      	add	r3, r1
 80052ec:	3304      	adds	r3, #4
 80052ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	7d1b      	ldrb	r3, [r3, #20]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d111      	bne.n	800531c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3318      	adds	r3, #24
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4413      	add	r3, r2
 8005304:	3304      	adds	r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	6811      	ldr	r1, [r2, #0]
 800530c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3318      	adds	r3, #24
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	440b      	add	r3, r1
 8005318:	3304      	adds	r3, #4
 800531a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3307      	adds	r3, #7
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	061a      	lsls	r2, r3, #24
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3306      	adds	r3, #6
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3305      	adds	r3, #5
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	4313      	orrs	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	3204      	adds	r2, #4
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	4610      	mov	r0, r2
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	6811      	ldr	r1, [r2, #0]
 8005344:	ea43 0200 	orr.w	r2, r3, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	440b      	add	r3, r1
 800534e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005352:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3303      	adds	r3, #3
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	061a      	lsls	r2, r3, #24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3302      	adds	r3, #2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3301      	adds	r3, #1
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	4313      	orrs	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	4610      	mov	r0, r2
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	6811      	ldr	r1, [r2, #0]
 800537a:	ea43 0200 	orr.w	r2, r3, r0
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	440b      	add	r3, r1
 8005384:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005388:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3318      	adds	r3, #24
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	4413      	add	r3, r2
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6811      	ldr	r1, [r2, #0]
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	3318      	adds	r3, #24
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	440b      	add	r3, r1
 80053a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e00e      	b.n	80053cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e006      	b.n	80053cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3724      	adds	r7, #36	; 0x24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d002      	beq.n	80053f6 <HAL_CAN_AbortTxRequest+0x1e>
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d128      	bne.n	8005448 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800540e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005428:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005442:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	e006      	b.n	8005456 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005474:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005476:	7afb      	ldrb	r3, [r7, #11]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800547c:	7afb      	ldrb	r3, [r7, #11]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d11d      	bne.n	80054be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d003      	beq.n	80054f0 <HAL_CAN_GetRxMessage+0x24>
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	f040 80f3 	bne.w	80056d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10e      	bne.n	8005514 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d116      	bne.n	8005532 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0e7      	b.n	80056e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0d8      	b.n	80056e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	331b      	adds	r3, #27
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0204 	and.w	r2, r3, #4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	331b      	adds	r3, #27
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	0d5b      	lsrs	r3, r3, #21
 8005560:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e00b      	b.n	8005582 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	331b      	adds	r3, #27
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	4413      	add	r3, r2
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	331b      	adds	r3, #27
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	4413      	add	r3, r2
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0202 	and.w	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	331b      	adds	r3, #27
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	4413      	add	r3, r2
 80055a4:	3304      	adds	r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	331b      	adds	r3, #27
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	331b      	adds	r3, #27
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4413      	add	r3, r2
 80055d4:	3304      	adds	r3, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4413      	add	r3, r2
 8005600:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	0a1a      	lsrs	r2, r3, #8
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	4413      	add	r3, r2
 800561a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0c1a      	lsrs	r2, r3, #16
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3302      	adds	r3, #2
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4413      	add	r3, r2
 8005634:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0e1a      	lsrs	r2, r3, #24
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	3303      	adds	r3, #3
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	3304      	adds	r3, #4
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	4413      	add	r3, r2
 8005666:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0a1a      	lsrs	r2, r3, #8
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3305      	adds	r3, #5
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	4413      	add	r3, r2
 8005680:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0c1a      	lsrs	r2, r3, #16
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	3306      	adds	r3, #6
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0e1a      	lsrs	r2, r3, #24
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3307      	adds	r3, #7
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d108      	bne.n	80056c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0220 	orr.w	r2, r2, #32
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e007      	b.n	80056d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0220 	orr.w	r2, r2, #32
 80056d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e006      	b.n	80056e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
  }
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005704:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d002      	beq.n	8005712 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800570c:	7afb      	ldrb	r3, [r7, #11]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d10f      	bne.n	8005732 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e005      	b.n	8005732 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005750:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d002      	beq.n	800575e <HAL_CAN_ActivateNotification+0x1e>
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d109      	bne.n	8005772 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6959      	ldr	r1, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e006      	b.n	8005780 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <HAL_CAN_DeactivateNotification+0x1e>
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d10a      	bne.n	80057c0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6959      	ldr	r1, [r3, #20]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	43da      	mvns	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	400a      	ands	r2, r1
 80057ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e006      	b.n	80057ce <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	; 0x28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d07c      	beq.n	800591a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d023      	beq.n	8005872 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f983 	bl	8005b48 <HAL_CAN_TxMailbox0CompleteCallback>
 8005842:	e016      	b.n	8005872 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	e00c      	b.n	8005872 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
 800586a:	e002      	b.n	8005872 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f989 	bl	8005b84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d024      	beq.n	80058c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f963 	bl	8005b5c <HAL_CAN_TxMailbox1CompleteCallback>
 8005896:	e016      	b.n	80058c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e00c      	b.n	80058c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
 80058be:	e002      	b.n	80058c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f969 	bl	8005b98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d024      	beq.n	800591a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f943 	bl	8005b70 <HAL_CAN_TxMailbox2CompleteCallback>
 80058ea:	e016      	b.n	800591a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e00c      	b.n	800591a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
 8005912:	e002      	b.n	800591a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f949 	bl	8005bac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005934:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2210      	movs	r2, #16
 800593c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2208      	movs	r2, #8
 8005958:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f930 	bl	8005bc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fe fb73 	bl	8004064 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005998:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2210      	movs	r2, #16
 80059a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d006      	beq.n	80059c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2208      	movs	r2, #8
 80059bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f912 	bl	8005be8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8f9 	bl	8005bd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2210      	movs	r2, #16
 80059fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8fc 	bl	8005bfc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8f5 	bl	8005c10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d07b      	beq.n	8005b28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d072      	beq.n	8005b20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f043 0304 	orr.w	r3, r3, #4
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d043      	beq.n	8005b20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d03e      	beq.n	8005b20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d02b      	beq.n	8005b04 <HAL_CAN_IRQHandler+0x32a>
 8005aac:	2b60      	cmp	r3, #96	; 0x60
 8005aae:	d82e      	bhi.n	8005b0e <HAL_CAN_IRQHandler+0x334>
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d022      	beq.n	8005afa <HAL_CAN_IRQHandler+0x320>
 8005ab4:	2b50      	cmp	r3, #80	; 0x50
 8005ab6:	d82a      	bhi.n	8005b0e <HAL_CAN_IRQHandler+0x334>
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d019      	beq.n	8005af0 <HAL_CAN_IRQHandler+0x316>
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d826      	bhi.n	8005b0e <HAL_CAN_IRQHandler+0x334>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d010      	beq.n	8005ae6 <HAL_CAN_IRQHandler+0x30c>
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d822      	bhi.n	8005b0e <HAL_CAN_IRQHandler+0x334>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d002      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x2f8>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d005      	beq.n	8005adc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ad0:	e01d      	b.n	8005b0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f043 0308 	orr.w	r3, r3, #8
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ada:	e019      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	f043 0310 	orr.w	r3, r3, #16
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ae4:	e014      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f043 0320 	orr.w	r3, r3, #32
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005aee:	e00f      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005af8:	e00a      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b02:	e005      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b0c:	e000      	b.n	8005b10 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2204      	movs	r2, #4
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f872 	bl	8005c24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b40:	bf00      	nop
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <__NVIC_SetPriorityGrouping+0x40>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c54:	4013      	ands	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <__NVIC_SetPriorityGrouping+0x44>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c66:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <__NVIC_SetPriorityGrouping+0x40>)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	60d3      	str	r3, [r2, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	e000ed00 	.word	0xe000ed00
 8005c7c:	05fa0000 	.word	0x05fa0000

08005c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <__NVIC_GetPriorityGrouping+0x18>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	0a1b      	lsrs	r3, r3, #8
 8005c8a:	f003 0307 	and.w	r3, r3, #7
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db0b      	blt.n	8005cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	f003 021f 	and.w	r2, r3, #31
 8005cb4:	4907      	ldr	r1, [pc, #28]	; (8005cd4 <__NVIC_EnableIRQ+0x38>)
 8005cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	e000e100 	.word	0xe000e100

08005cd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	db12      	blt.n	8005d10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	f003 021f 	and.w	r2, r3, #31
 8005cf0:	490a      	ldr	r1, [pc, #40]	; (8005d1c <__NVIC_DisableIRQ+0x44>)
 8005cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005cfe:	3320      	adds	r3, #32
 8005d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d04:	f3bf 8f4f 	dsb	sy
}
 8005d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d0a:	f3bf 8f6f 	isb	sy
}
 8005d0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	e000e100 	.word	0xe000e100

08005d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db0a      	blt.n	8005d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	490c      	ldr	r1, [pc, #48]	; (8005d6c <__NVIC_SetPriority+0x4c>)
 8005d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3e:	0112      	lsls	r2, r2, #4
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	440b      	add	r3, r1
 8005d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d48:	e00a      	b.n	8005d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4908      	ldr	r1, [pc, #32]	; (8005d70 <__NVIC_SetPriority+0x50>)
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	3b04      	subs	r3, #4
 8005d58:	0112      	lsls	r2, r2, #4
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	761a      	strb	r2, [r3, #24]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	e000e100 	.word	0xe000e100
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	bf28      	it	cs
 8005d92:	2304      	movcs	r3, #4
 8005d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d902      	bls.n	8005da4 <NVIC_EncodePriority+0x30>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3b03      	subs	r3, #3
 8005da2:	e000      	b.n	8005da6 <NVIC_EncodePriority+0x32>
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	401a      	ands	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	43d9      	mvns	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dcc:	4313      	orrs	r3, r2
         );
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dec:	d301      	bcc.n	8005df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dee:	2301      	movs	r3, #1
 8005df0:	e00f      	b.n	8005e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005df2:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <SysTick_Config+0x40>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dfa:	210f      	movs	r1, #15
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	f7ff ff8e 	bl	8005d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <SysTick_Config+0x40>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e0a:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <SysTick_Config+0x40>)
 8005e0c:	2207      	movs	r2, #7
 8005e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	e000e010 	.word	0xe000e010

08005e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff05 	bl	8005c38 <__NVIC_SetPriorityGrouping>
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e48:	f7ff ff1a 	bl	8005c80 <__NVIC_GetPriorityGrouping>
 8005e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f7ff ff8e 	bl	8005d74 <NVIC_EncodePriority>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff5d 	bl	8005d20 <__NVIC_SetPriority>
}
 8005e66:	bf00      	nop
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4603      	mov	r3, r0
 8005e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ff0d 	bl	8005c9c <__NVIC_EnableIRQ>
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	4603      	mov	r3, r0
 8005e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff1d 	bl	8005cd8 <__NVIC_DisableIRQ>
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff ff94 	bl	8005ddc <SysTick_Config>
 8005eb4:	4603      	mov	r3, r0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e175      	b.n	80061cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 8164 	bne.w	80061c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d005      	beq.n	8005f16 <HAL_GPIO_Init+0x56>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d130      	bne.n	8005f78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	2203      	movs	r2, #3
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 0201 	and.w	r2, r3, #1
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d017      	beq.n	8005fb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d123      	bne.n	8006008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	08da      	lsrs	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3208      	adds	r2, #8
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80be 	beq.w	80061c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800604a:	4b66      	ldr	r3, [pc, #408]	; (80061e4 <HAL_GPIO_Init+0x324>)
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <HAL_GPIO_Init+0x324>)
 8006050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006054:	6453      	str	r3, [r2, #68]	; 0x44
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_GPIO_Init+0x324>)
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006062:	4a61      	ldr	r2, [pc, #388]	; (80061e8 <HAL_GPIO_Init+0x328>)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	3302      	adds	r3, #2
 800606a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	220f      	movs	r2, #15
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a58      	ldr	r2, [pc, #352]	; (80061ec <HAL_GPIO_Init+0x32c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d037      	beq.n	80060fe <HAL_GPIO_Init+0x23e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <HAL_GPIO_Init+0x330>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_GPIO_Init+0x23a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a56      	ldr	r2, [pc, #344]	; (80061f4 <HAL_GPIO_Init+0x334>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d02b      	beq.n	80060f6 <HAL_GPIO_Init+0x236>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <HAL_GPIO_Init+0x338>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d025      	beq.n	80060f2 <HAL_GPIO_Init+0x232>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a54      	ldr	r2, [pc, #336]	; (80061fc <HAL_GPIO_Init+0x33c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <HAL_GPIO_Init+0x22e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a53      	ldr	r2, [pc, #332]	; (8006200 <HAL_GPIO_Init+0x340>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d019      	beq.n	80060ea <HAL_GPIO_Init+0x22a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_GPIO_Init+0x344>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_GPIO_Init+0x226>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a51      	ldr	r2, [pc, #324]	; (8006208 <HAL_GPIO_Init+0x348>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00d      	beq.n	80060e2 <HAL_GPIO_Init+0x222>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a50      	ldr	r2, [pc, #320]	; (800620c <HAL_GPIO_Init+0x34c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d007      	beq.n	80060de <HAL_GPIO_Init+0x21e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4f      	ldr	r2, [pc, #316]	; (8006210 <HAL_GPIO_Init+0x350>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d101      	bne.n	80060da <HAL_GPIO_Init+0x21a>
 80060d6:	2309      	movs	r3, #9
 80060d8:	e012      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060da:	230a      	movs	r3, #10
 80060dc:	e010      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060de:	2308      	movs	r3, #8
 80060e0:	e00e      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060e2:	2307      	movs	r3, #7
 80060e4:	e00c      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060e6:	2306      	movs	r3, #6
 80060e8:	e00a      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060ea:	2305      	movs	r3, #5
 80060ec:	e008      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060ee:	2304      	movs	r3, #4
 80060f0:	e006      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060f2:	2303      	movs	r3, #3
 80060f4:	e004      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e002      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060fe:	2300      	movs	r3, #0
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	f002 0203 	and.w	r2, r2, #3
 8006106:	0092      	lsls	r2, r2, #2
 8006108:	4093      	lsls	r3, r2
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006110:	4935      	ldr	r1, [pc, #212]	; (80061e8 <HAL_GPIO_Init+0x328>)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	089b      	lsrs	r3, r3, #2
 8006116:	3302      	adds	r3, #2
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800611e:	4b3d      	ldr	r3, [pc, #244]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006142:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <HAL_GPIO_Init+0x354>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800616c:	4a29      	ldr	r2, [pc, #164]	; (8006214 <HAL_GPIO_Init+0x354>)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006172:	4b28      	ldr	r3, [pc, #160]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	43db      	mvns	r3, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4013      	ands	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <HAL_GPIO_Init+0x354>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <HAL_GPIO_Init+0x354>)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	f67f ae86 	bls.w	8005ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3724      	adds	r7, #36	; 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40013800 	.word	0x40013800
 80061ec:	40020000 	.word	0x40020000
 80061f0:	40020400 	.word	0x40020400
 80061f4:	40020800 	.word	0x40020800
 80061f8:	40020c00 	.word	0x40020c00
 80061fc:	40021000 	.word	0x40021000
 8006200:	40021400 	.word	0x40021400
 8006204:	40021800 	.word	0x40021800
 8006208:	40021c00 	.word	0x40021c00
 800620c:	40022000 	.word	0x40022000
 8006210:	40022400 	.word	0x40022400
 8006214:	40013c00 	.word	0x40013c00

08006218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
 8006224:	4613      	mov	r3, r2
 8006226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006228:	787b      	ldrb	r3, [r7, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006234:	e003      	b.n	800623e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006236:	887b      	ldrh	r3, [r7, #2]
 8006238:	041a      	lsls	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	619a      	str	r2, [r3, #24]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	43d9      	mvns	r1, r3
 8006268:	887b      	ldrh	r3, [r7, #2]
 800626a:	400b      	ands	r3, r1
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	619a      	str	r2, [r3, #24]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e07f      	b.n	8006392 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fa fdae 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	; 0x24
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d107      	bne.n	80062fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e006      	b.n	8006308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d104      	bne.n	800631a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6859      	ldr	r1, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b1d      	ldr	r3, [pc, #116]	; (800639c <HAL_I2C_Init+0x11c>)
 8006326:	430b      	orrs	r3, r1
 8006328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69d9      	ldr	r1, [r3, #28]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	02008000 	.word	0x02008000

080063a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d138      	bne.n	8006428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e032      	b.n	800642a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	d139      	bne.n	80064c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006456:	2302      	movs	r3, #2
 8006458:	e033      	b.n	80064c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2224      	movs	r2, #36	; 0x24
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e041      	b.n	8006564 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80064e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f245 5255 	movw	r2, #21845	; 0x5555
 80064f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6852      	ldr	r2, [r2, #4]
 80064fc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6892      	ldr	r2, [r2, #8]
 8006506:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006508:	f7fe fc6a 	bl	8004de0 <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800650e:	e00f      	b.n	8006530 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006510:	f7fe fc66 	bl	8004de0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b31      	cmp	r3, #49	; 0x31
 800651c:	d908      	bls.n	8006530 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e019      	b.n	8006564 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e8      	bne.n	8006510 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d005      	beq.n	8006558 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	68d2      	ldr	r2, [r2, #12]
 8006554:	611a      	str	r2, [r3, #16]
 8006556:	e004      	b.n	8006562 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800657c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	4b23      	ldr	r3, [pc, #140]	; (8006624 <HAL_PWREx_EnableOverDrive+0x98>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	4a22      	ldr	r2, [pc, #136]	; (8006624 <HAL_PWREx_EnableOverDrive+0x98>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6413      	str	r3, [r2, #64]	; 0x40
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_PWREx_EnableOverDrive+0x98>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ae:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065ba:	f7fe fc11 	bl	8004de0 <HAL_GetTick>
 80065be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065c0:	e009      	b.n	80065d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065c2:	f7fe fc0d 	bl	8004de0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d0:	d901      	bls.n	80065d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e022      	b.n	800661c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d1ee      	bne.n	80065c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f0:	f7fe fbf6 	bl	8004de0 <HAL_GetTick>
 80065f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065f6:	e009      	b.n	800660c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065f8:	f7fe fbf2 	bl	8004de0 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006606:	d901      	bls.n	800660c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e007      	b.n	800661c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_PWREx_EnableOverDrive+0x9c>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006618:	d1ee      	bne.n	80065f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	40007000 	.word	0x40007000

0800662c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e291      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8087 	beq.w	800675e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006650:	4b96      	ldr	r3, [pc, #600]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b04      	cmp	r3, #4
 800665a:	d00c      	beq.n	8006676 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800665c:	4b93      	ldr	r3, [pc, #588]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d112      	bne.n	800668e <HAL_RCC_OscConfig+0x62>
 8006668:	4b90      	ldr	r3, [pc, #576]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006674:	d10b      	bne.n	800668e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006676:	4b8d      	ldr	r3, [pc, #564]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06c      	beq.n	800675c <HAL_RCC_OscConfig+0x130>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d168      	bne.n	800675c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e26b      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_OscConfig+0x7a>
 8006698:	4b84      	ldr	r3, [pc, #528]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a83      	ldr	r2, [pc, #524]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800669e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e02e      	b.n	8006704 <HAL_RCC_OscConfig+0xd8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x9c>
 80066ae:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7e      	ldr	r2, [pc, #504]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b7c      	ldr	r3, [pc, #496]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7b      	ldr	r2, [pc, #492]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01d      	b.n	8006704 <HAL_RCC_OscConfig+0xd8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0xc0>
 80066d2:	4b76      	ldr	r3, [pc, #472]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a75      	ldr	r2, [pc, #468]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b73      	ldr	r3, [pc, #460]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a72      	ldr	r2, [pc, #456]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00b      	b.n	8006704 <HAL_RCC_OscConfig+0xd8>
 80066ec:	4b6f      	ldr	r3, [pc, #444]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a6e      	ldr	r2, [pc, #440]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b6c      	ldr	r3, [pc, #432]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6b      	ldr	r2, [pc, #428]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d013      	beq.n	8006734 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fe fb68 	bl	8004de0 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006714:	f7fe fb64 	bl	8004de0 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e21f      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	4b61      	ldr	r3, [pc, #388]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0xe8>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fe fb54 	bl	8004de0 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800673c:	f7fe fb50 	bl	8004de0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	; 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e20b      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	4b57      	ldr	r3, [pc, #348]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x110>
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d069      	beq.n	800683e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800676a:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006776:	4b4d      	ldr	r3, [pc, #308]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b08      	cmp	r3, #8
 8006780:	d11c      	bne.n	80067bc <HAL_RCC_OscConfig+0x190>
 8006782:	4b4a      	ldr	r3, [pc, #296]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d116      	bne.n	80067bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_RCC_OscConfig+0x17a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e1df      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	493d      	ldr	r1, [pc, #244]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ba:	e040      	b.n	800683e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d023      	beq.n	800680c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c4:	4b39      	ldr	r3, [pc, #228]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a38      	ldr	r2, [pc, #224]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fe fb06 	bl	8004de0 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d8:	f7fe fb02 	bl	8004de0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e1bd      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ea:	4b30      	ldr	r3, [pc, #192]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f6:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4929      	ldr	r1, [pc, #164]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]
 800680a:	e018      	b.n	800683e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680c:	4b27      	ldr	r3, [pc, #156]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fe fae2 	bl	8004de0 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006820:	f7fe fade 	bl	8004de0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e199      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006832:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d038      	beq.n	80068bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d019      	beq.n	8006886 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006852:	4b16      	ldr	r3, [pc, #88]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006856:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685e:	f7fe fabf 	bl	8004de0 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006866:	f7fe fabb 	bl	8004de0 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e176      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800687a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0f0      	beq.n	8006866 <HAL_RCC_OscConfig+0x23a>
 8006884:	e01a      	b.n	80068bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 8006888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688a:	4a08      	ldr	r2, [pc, #32]	; (80068ac <HAL_RCC_OscConfig+0x280>)
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006892:	f7fe faa5 	bl	8004de0 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e00a      	b.n	80068b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689a:	f7fe faa1 	bl	8004de0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d903      	bls.n	80068b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e15c      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
 80068ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b0:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80068b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ee      	bne.n	800689a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a4 	beq.w	8006a12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ca:	4b8b      	ldr	r3, [pc, #556]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10d      	bne.n	80068f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d6:	4b88      	ldr	r3, [pc, #544]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	4a87      	ldr	r2, [pc, #540]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e0:	6413      	str	r3, [r2, #64]	; 0x40
 80068e2:	4b85      	ldr	r3, [pc, #532]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f2:	4b82      	ldr	r3, [pc, #520]	; (8006afc <HAL_RCC_OscConfig+0x4d0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80068fe:	4b7f      	ldr	r3, [pc, #508]	; (8006afc <HAL_RCC_OscConfig+0x4d0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a7e      	ldr	r2, [pc, #504]	; (8006afc <HAL_RCC_OscConfig+0x4d0>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690a:	f7fe fa69 	bl	8004de0 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7fe fa65 	bl	8004de0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b64      	cmp	r3, #100	; 0x64
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e120      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006924:	4b75      	ldr	r3, [pc, #468]	; (8006afc <HAL_RCC_OscConfig+0x4d0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_RCC_OscConfig+0x31a>
 8006938:	4b6f      	ldr	r3, [pc, #444]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a6e      	ldr	r2, [pc, #440]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	e02d      	b.n	80069a2 <HAL_RCC_OscConfig+0x376>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x33c>
 800694e:	4b6a      	ldr	r3, [pc, #424]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a69      	ldr	r2, [pc, #420]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a66      	ldr	r2, [pc, #408]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006960:	f023 0304 	bic.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	e01c      	b.n	80069a2 <HAL_RCC_OscConfig+0x376>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b05      	cmp	r3, #5
 800696e:	d10c      	bne.n	800698a <HAL_RCC_OscConfig+0x35e>
 8006970:	4b61      	ldr	r3, [pc, #388]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a60      	ldr	r2, [pc, #384]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	f043 0304 	orr.w	r3, r3, #4
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	4b5e      	ldr	r3, [pc, #376]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a5d      	ldr	r2, [pc, #372]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	e00b      	b.n	80069a2 <HAL_RCC_OscConfig+0x376>
 800698a:	4b5b      	ldr	r3, [pc, #364]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a5a      	ldr	r2, [pc, #360]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a57      	ldr	r2, [pc, #348]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d015      	beq.n	80069d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fe fa19 	bl	8004de0 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fe fa15 	bl	8004de0 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e0ce      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c8:	4b4b      	ldr	r3, [pc, #300]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0ee      	beq.n	80069b2 <HAL_RCC_OscConfig+0x386>
 80069d4:	e014      	b.n	8006a00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fe fa03 	bl	8004de0 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069de:	f7fe f9ff 	bl	8004de0 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e0b8      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ee      	bne.n	80069de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d105      	bne.n	8006a12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a06:	4b3c      	ldr	r3, [pc, #240]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	4a3b      	ldr	r2, [pc, #236]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 80a4 	beq.w	8006b64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a1c:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d06b      	beq.n	8006b00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d149      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a30:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a30      	ldr	r2, [pc, #192]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fe f9d0 	bl	8004de0 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a44:	f7fe f9cc 	bl	8004de0 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e087      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a56:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69da      	ldr	r2, [r3, #28]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	019b      	lsls	r3, r3, #6
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	4313      	orrs	r3, r2
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fe f9a0 	bl	8004de0 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa4:	f7fe f99c 	bl	8004de0 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e057      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x478>
 8006ac2:	e04f      	b.n	8006b64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fe f986 	bl	8004de0 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fe f982 	bl	8004de0 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e03d      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <HAL_RCC_OscConfig+0x4cc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4ac>
 8006af6:	e035      	b.n	8006b64 <HAL_RCC_OscConfig+0x538>
 8006af8:	40023800 	.word	0x40023800
 8006afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <HAL_RCC_OscConfig+0x544>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d028      	beq.n	8006b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d121      	bne.n	8006b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d11a      	bne.n	8006b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b30:	4013      	ands	r3, r2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d111      	bne.n	8006b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800

08006b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0d0      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b8c:	4b6a      	ldr	r3, [pc, #424]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d910      	bls.n	8006bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4b67      	ldr	r3, [pc, #412]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f023 020f 	bic.w	r2, r3, #15
 8006ba2:	4965      	ldr	r1, [pc, #404]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006baa:	4b63      	ldr	r3, [pc, #396]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0b8      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d020      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bd4:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a58      	ldr	r2, [pc, #352]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bec:	4b53      	ldr	r3, [pc, #332]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4a52      	ldr	r2, [pc, #328]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf8:	4b50      	ldr	r3, [pc, #320]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	494d      	ldr	r1, [pc, #308]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d040      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1e:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d115      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e07f      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d107      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c36:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e073      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c46:	4b3d      	ldr	r3, [pc, #244]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e06b      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f023 0203 	bic.w	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4936      	ldr	r1, [pc, #216]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c68:	f7fe f8ba 	bl	8004de0 <HAL_GetTick>
 8006c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c70:	f7fe f8b6 	bl	8004de0 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e053      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c86:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 020c 	and.w	r2, r3, #12
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d1eb      	bne.n	8006c70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d210      	bcs.n	8006cc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca6:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f023 020f 	bic.w	r2, r3, #15
 8006cae:	4922      	ldr	r1, [pc, #136]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e032      	b.n	8006d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4916      	ldr	r1, [pc, #88]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	490e      	ldr	r1, [pc, #56]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d06:	f000 f821 	bl	8006d4c <HAL_RCC_GetSysClockFreq>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <HAL_RCC_ClockConfig+0x1c8>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	490a      	ldr	r1, [pc, #40]	; (8006d40 <HAL_RCC_ClockConfig+0x1cc>)
 8006d18:	5ccb      	ldrb	r3, [r1, r3]
 8006d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1e:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <HAL_RCC_ClockConfig+0x1d0>)
 8006d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <HAL_RCC_ClockConfig+0x1d4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe f816 	bl	8004d58 <HAL_InitTick>

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	40023c00 	.word	0x40023c00
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	080091f8 	.word	0x080091f8
 8006d44:	20000120 	.word	0x20000120
 8006d48:	20000124 	.word	0x20000124

08006d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d50:	b090      	sub	sp, #64	; 0x40
 8006d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d64:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d00d      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0x40>
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	f200 80a1 	bhi.w	8006eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x34>
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d7e:	e09b      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d80:	4b53      	ldr	r3, [pc, #332]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d84:	e09b      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d86:	4b53      	ldr	r3, [pc, #332]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d8a:	e098      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d8c:	4b4f      	ldr	r3, [pc, #316]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d96:	4b4d      	ldr	r3, [pc, #308]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d028      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da2:	4b4a      	ldr	r3, [pc, #296]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	2200      	movs	r2, #0
 8006daa:	623b      	str	r3, [r7, #32]
 8006dac:	627a      	str	r2, [r7, #36]	; 0x24
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006db4:	2100      	movs	r1, #0
 8006db6:	4b47      	ldr	r3, [pc, #284]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006db8:	fb03 f201 	mul.w	r2, r3, r1
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	fb00 f303 	mul.w	r3, r0, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	4a43      	ldr	r2, [pc, #268]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8006dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dcc:	460a      	mov	r2, r1
 8006dce:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd2:	4413      	add	r3, r2
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	2200      	movs	r2, #0
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	61fa      	str	r2, [r7, #28]
 8006dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006de6:	f7f9 fa0f 	bl	8000208 <__aeabi_uldivmod>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4613      	mov	r3, r2
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df2:	e053      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006df4:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	099b      	lsrs	r3, r3, #6
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	617a      	str	r2, [r7, #20]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e06:	f04f 0b00 	mov.w	fp, #0
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	465b      	mov	r3, fp
 8006e0e:	f04f 0000 	mov.w	r0, #0
 8006e12:	f04f 0100 	mov.w	r1, #0
 8006e16:	0159      	lsls	r1, r3, #5
 8006e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e1c:	0150      	lsls	r0, r2, #5
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	ebb2 080a 	subs.w	r8, r2, sl
 8006e26:	eb63 090b 	sbc.w	r9, r3, fp
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8006e42:	eb63 0509 	sbc.w	r5, r3, r9
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	00eb      	lsls	r3, r5, #3
 8006e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e54:	00e2      	lsls	r2, r4, #3
 8006e56:	4614      	mov	r4, r2
 8006e58:	461d      	mov	r5, r3
 8006e5a:	eb14 030a 	adds.w	r3, r4, sl
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	eb45 030b 	adc.w	r3, r5, fp
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e72:	4629      	mov	r1, r5
 8006e74:	028b      	lsls	r3, r1, #10
 8006e76:	4621      	mov	r1, r4
 8006e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	028a      	lsls	r2, r1, #10
 8006e80:	4610      	mov	r0, r2
 8006e82:	4619      	mov	r1, r3
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	2200      	movs	r2, #0
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	60fa      	str	r2, [r7, #12]
 8006e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e90:	f7f9 f9ba 	bl	8000208 <__aeabi_uldivmod>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4613      	mov	r3, r2
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	0c1b      	lsrs	r3, r3, #16
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eb6:	e002      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3740      	adds	r7, #64	; 0x40
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eca:	bf00      	nop
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	00f42400 	.word	0x00f42400
 8006ed4:	00b71b00 	.word	0x00b71b00

08006ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d012      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f00:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4a68      	ldr	r2, [pc, #416]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f0a:	6093      	str	r3, [r2, #8]
 8006f0c:	4b66      	ldr	r3, [pc, #408]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	4964      	ldr	r1, [pc, #400]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f32:	4b5d      	ldr	r3, [pc, #372]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f40:	4959      	ldr	r1, [pc, #356]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f50:	d101      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f52:	2301      	movs	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f6e:	4b4e      	ldr	r3, [pc, #312]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7c:	494a      	ldr	r1, [pc, #296]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8c:	d101      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 808b 	beq.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fbc:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	4a39      	ldr	r2, [pc, #228]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc8:	4b37      	ldr	r3, [pc, #220]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fd4:	4b35      	ldr	r3, [pc, #212]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a34      	ldr	r2, [pc, #208]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe0:	f7fd fefe 	bl	8004de0 <HAL_GetTick>
 8006fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe8:	f7fd fefa 	bl	8004de0 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	; 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e357      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ffa:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f0      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007006:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d035      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	429a      	cmp	r2, r3
 8007022:	d02e      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007024:	4b20      	ldr	r3, [pc, #128]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800703a:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d114      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7fd fec2 	bl	8004de0 <HAL_GetTick>
 800705c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705e:	e00a      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fd febe 	bl	8004de0 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	; 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e319      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0ee      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708e:	d111      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800709e:	400b      	ands	r3, r1
 80070a0:	4901      	ldr	r1, [pc, #4]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
 80070a6:	e00b      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000
 80070b0:	0ffffcff 	.word	0x0ffffcff
 80070b4:	4baa      	ldr	r3, [pc, #680]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4aa9      	ldr	r2, [pc, #676]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070be:	6093      	str	r3, [r2, #8]
 80070c0:	4ba7      	ldr	r3, [pc, #668]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070cc:	49a4      	ldr	r1, [pc, #656]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d010      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070de:	4ba0      	ldr	r3, [pc, #640]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	4a9e      	ldr	r2, [pc, #632]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070ee:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	4999      	ldr	r1, [pc, #612]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800710c:	4b94      	ldr	r3, [pc, #592]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711a:	4991      	ldr	r1, [pc, #580]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800712e:	4b8c      	ldr	r3, [pc, #560]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800713c:	4988      	ldr	r1, [pc, #544]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007150:	4b83      	ldr	r3, [pc, #524]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715e:	4980      	ldr	r1, [pc, #512]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007172:	4b7b      	ldr	r3, [pc, #492]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	4977      	ldr	r1, [pc, #476]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007194:	4b72      	ldr	r3, [pc, #456]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719a:	f023 0203 	bic.w	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a2:	496f      	ldr	r1, [pc, #444]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071b6:	4b6a      	ldr	r3, [pc, #424]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071bc:	f023 020c 	bic.w	r2, r3, #12
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	4966      	ldr	r1, [pc, #408]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071d8:	4b61      	ldr	r3, [pc, #388]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e6:	495e      	ldr	r1, [pc, #376]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071fa:	4b59      	ldr	r3, [pc, #356]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	4955      	ldr	r1, [pc, #340]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800721c:	4b50      	ldr	r3, [pc, #320]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	494d      	ldr	r1, [pc, #308]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800723e:	4b48      	ldr	r3, [pc, #288]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724c:	4944      	ldr	r1, [pc, #272]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007260:	4b3f      	ldr	r3, [pc, #252]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726e:	493c      	ldr	r1, [pc, #240]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007282:	4b37      	ldr	r3, [pc, #220]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007290:	4933      	ldr	r1, [pc, #204]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072a4:	4b2e      	ldr	r3, [pc, #184]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b2:	492b      	ldr	r1, [pc, #172]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d011      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072c6:	4b26      	ldr	r3, [pc, #152]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d4:	4922      	ldr	r1, [pc, #136]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e4:	d101      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007314:	4912      	ldr	r1, [pc, #72]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007338:	4909      	ldr	r1, [pc, #36]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d006      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80d9 	beq.w	8007506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a01      	ldr	r2, [pc, #4]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007360:	40023800 	.word	0x40023800
 8007364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007366:	f7fd fd3b 	bl	8004de0 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800736e:	f7fd fd37 	bl	8004de0 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b64      	cmp	r3, #100	; 0x64
 800737a:	d901      	bls.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e194      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007380:	4b6c      	ldr	r3, [pc, #432]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d021      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11d      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073a0:	4b64      	ldr	r3, [pc, #400]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073ae:	4b61      	ldr	r3, [pc, #388]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b4:	0e1b      	lsrs	r3, r3, #24
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	019a      	lsls	r2, r3, #6
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	061b      	lsls	r3, r3, #24
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	071b      	lsls	r3, r3, #28
 80073d4:	4957      	ldr	r1, [pc, #348]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d02e      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007406:	d129      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007408:	4b4a      	ldr	r3, [pc, #296]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007416:	4b47      	ldr	r3, [pc, #284]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741c:	0f1b      	lsrs	r3, r3, #28
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	019a      	lsls	r2, r3, #6
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	061b      	lsls	r3, r3, #24
 8007436:	431a      	orrs	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	071b      	lsls	r3, r3, #28
 800743c:	493d      	ldr	r1, [pc, #244]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007444:	4b3b      	ldr	r3, [pc, #236]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800744a:	f023 021f 	bic.w	r2, r3, #31
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	3b01      	subs	r3, #1
 8007454:	4937      	ldr	r1, [pc, #220]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01d      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007468:	4b32      	ldr	r3, [pc, #200]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800746a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746e:	0e1b      	lsrs	r3, r3, #24
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747c:	0f1b      	lsrs	r3, r3, #28
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	019a      	lsls	r2, r3, #6
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	431a      	orrs	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	061b      	lsls	r3, r3, #24
 8007496:	431a      	orrs	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	071b      	lsls	r3, r3, #28
 800749c:	4925      	ldr	r1, [pc, #148]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d011      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	019a      	lsls	r2, r3, #6
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	061b      	lsls	r3, r3, #24
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	071b      	lsls	r3, r3, #28
 80074cc:	4919      	ldr	r1, [pc, #100]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074d4:	4b17      	ldr	r3, [pc, #92]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e0:	f7fd fc7e 	bl	8004de0 <HAL_GetTick>
 80074e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074e8:	f7fd fc7a 	bl	8004de0 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b64      	cmp	r3, #100	; 0x64
 80074f4:	d901      	bls.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e0d7      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f0      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b01      	cmp	r3, #1
 800750a:	f040 80cd 	bne.w	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751a:	f7fd fc61 	bl	8004de0 <HAL_GetTick>
 800751e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007520:	e00a      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007522:	f7fd fc5d 	bl	8004de0 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b64      	cmp	r3, #100	; 0x64
 800752e:	d903      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e0ba      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007538:	4b5e      	ldr	r3, [pc, #376]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d0ed      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007562:	2b00      	cmp	r3, #0
 8007564:	d02e      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	2b00      	cmp	r3, #0
 800756c:	d12a      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800756e:	4b51      	ldr	r3, [pc, #324]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800757c:	4b4d      	ldr	r3, [pc, #308]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	0f1b      	lsrs	r3, r3, #28
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	019a      	lsls	r2, r3, #6
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	071b      	lsls	r3, r3, #28
 80075a2:	4944      	ldr	r1, [pc, #272]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075aa:	4b42      	ldr	r3, [pc, #264]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	493d      	ldr	r1, [pc, #244]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d022      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d8:	d11d      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075da:	4b36      	ldr	r3, [pc, #216]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	0e1b      	lsrs	r3, r3, #24
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075e8:	4b32      	ldr	r3, [pc, #200]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	0f1b      	lsrs	r3, r3, #28
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	019a      	lsls	r2, r3, #6
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	431a      	orrs	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	061b      	lsls	r3, r3, #24
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	071b      	lsls	r3, r3, #28
 800760e:	4929      	ldr	r1, [pc, #164]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d028      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007630:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	019a      	lsls	r2, r3, #6
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	431a      	orrs	r2, r3
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	061b      	lsls	r3, r3, #24
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	071b      	lsls	r3, r3, #28
 8007656:	4917      	ldr	r1, [pc, #92]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4911      	ldr	r1, [pc, #68]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a0e      	ldr	r2, [pc, #56]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800767a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007680:	f7fd fbae 	bl	8004de0 <HAL_GetTick>
 8007684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007686:	e008      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007688:	f7fd fbaa 	bl	8004de0 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b64      	cmp	r3, #100	; 0x64
 8007694:	d901      	bls.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e007      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a6:	d1ef      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40023800 	.word	0x40023800

080076b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e09d      	b.n	8007806 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d108      	bne.n	80076e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076da:	d009      	beq.n	80076f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	61da      	str	r2, [r3, #28]
 80076e2:	e005      	b.n	80076f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fc fe50 	bl	80043b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007730:	d902      	bls.n	8007738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e002      	b.n	800773e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800773c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007746:	d007      	beq.n	8007758 <HAL_SPI_Init+0xa0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007750:	d002      	beq.n	8007758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	ea42 0103 	orr.w	r1, r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	f003 0204 	and.w	r2, r3, #4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077d4:	ea42 0103 	orr.w	r1, r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b08a      	sub	sp, #40	; 0x28
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800781c:	2301      	movs	r3, #1
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x26>
 8007830:	2302      	movs	r3, #2
 8007832:	e1fb      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x41e>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800783c:	f7fd fad0 	bl	8004de0 <HAL_GetTick>
 8007840:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007848:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007854:	887b      	ldrh	r3, [r7, #2]
 8007856:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007858:	7efb      	ldrb	r3, [r7, #27]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d00e      	beq.n	800787c <HAL_SPI_TransmitReceive+0x6e>
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007864:	d106      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x66>
 800786e:	7efb      	ldrb	r3, [r7, #27]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d003      	beq.n	800787c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007874:	2302      	movs	r3, #2
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800787a:	e1cd      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_SPI_TransmitReceive+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_SPI_TransmitReceive+0x80>
 8007888:	887b      	ldrh	r3, [r7, #2]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007894:	e1c0      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d003      	beq.n	80078aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2205      	movs	r2, #5
 80078a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	887a      	ldrh	r2, [r7, #2]
 80078ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	887a      	ldrh	r2, [r7, #2]
 80078c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	887a      	ldrh	r2, [r7, #2]
 80078d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	887a      	ldrh	r2, [r7, #2]
 80078d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ec:	d802      	bhi.n	80078f4 <HAL_SPI_TransmitReceive+0xe6>
 80078ee:	8a3b      	ldrh	r3, [r7, #16]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d908      	bls.n	8007906 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007902:	605a      	str	r2, [r3, #4]
 8007904:	e007      	b.n	8007916 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007914:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d007      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800793c:	d97c      	bls.n	8007a38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SPI_TransmitReceive+0x13e>
 8007946:	8a7b      	ldrh	r3, [r7, #18]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d169      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	881a      	ldrh	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	1c9a      	adds	r2, r3, #2
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007970:	e056      	b.n	8007a20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d11b      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x1aa>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <HAL_SPI_TransmitReceive+0x1aa>
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	2b01      	cmp	r3, #1
 800798e:	d113      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	1c9a      	adds	r2, r3, #2
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d11c      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x1f2>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	b292      	uxth	r2, r2
 80079de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	1c9a      	adds	r2, r3, #2
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079fc:	2301      	movs	r3, #1
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a00:	f7fd f9ee 	bl	8004de0 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d807      	bhi.n	8007a20 <HAL_SPI_TransmitReceive+0x212>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a16:	d003      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007a1e:	e0fb      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1a3      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x164>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d19d      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x164>
 8007a36:	e0df      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x23a>
 8007a40:	8a7b      	ldrh	r3, [r7, #18]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	f040 80cb 	bne.w	8007bde <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d912      	bls.n	8007a78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	881a      	ldrh	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b02      	subs	r3, #2
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a76:	e0b2      	b.n	8007bde <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	7812      	ldrb	r2, [r2, #0]
 8007a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9e:	e09e      	b.n	8007bde <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d134      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x30a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d02f      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x30a>
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d12c      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d912      	bls.n	8007aee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	881a      	ldrh	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	1c9a      	adds	r2, r3, #2
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b02      	subs	r3, #2
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aec:	e012      	b.n	8007b14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d148      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x3aa>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d042      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d923      	bls.n	8007b86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	b292      	uxth	r2, r2
 8007b4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b02      	subs	r3, #2
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d81f      	bhi.n	8007bb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	e016      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f103 020c 	add.w	r2, r3, #12
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bb8:	f7fd f912 	bl	8004de0 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d803      	bhi.n	8007bd0 <HAL_SPI_TransmitReceive+0x3c2>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bce:	d102      	bne.n	8007bd6 <HAL_SPI_TransmitReceive+0x3c8>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007bdc:	e01c      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f af5b 	bne.w	8007aa0 <HAL_SPI_TransmitReceive+0x292>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f af54 	bne.w	8007aa0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f937 	bl	8007e70 <SPI_EndRxTxTransaction>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d006      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	661a      	str	r2, [r3, #96]	; 0x60
 8007c14:	e000      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c44:	f7fd f8cc 	bl	8004de0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c54:	f7fd f8c4 	bl	8004de0 <HAL_GetTick>
 8007c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c5a:	4b39      	ldr	r3, [pc, #228]	; (8007d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	015b      	lsls	r3, r3, #5
 8007c60:	0d1b      	lsrs	r3, r3, #20
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c6a:	e054      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c72:	d050      	beq.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c74:	f7fd f8b4 	bl	8004de0 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d902      	bls.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d13d      	bne.n	8007d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca2:	d111      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cac:	d004      	beq.n	8007cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb6:	d107      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd0:	d10f      	bne.n	8007cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e017      	b.n	8007d36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d19b      	bne.n	8007c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000120 	.word	0x20000120

08007d44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	; 0x28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d56:	f7fd f843 	bl	8004de0 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	4413      	add	r3, r2
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d66:	f7fd f83b 	bl	8004de0 <HAL_GetTick>
 8007d6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	330c      	adds	r3, #12
 8007d72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d74:	4b3d      	ldr	r3, [pc, #244]	; (8007e6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	00da      	lsls	r2, r3, #3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	0d1b      	lsrs	r3, r3, #20
 8007d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d8c:	e060      	b.n	8007e50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d94:	d107      	bne.n	8007da6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dac:	d050      	beq.n	8007e50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dae:	f7fd f817 	bl	8004de0 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d902      	bls.n	8007dc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d13d      	bne.n	8007e40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ddc:	d111      	bne.n	8007e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de6:	d004      	beq.n	8007df2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df0:	d107      	bne.n	8007e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0a:	d10f      	bne.n	8007e2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e010      	b.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d196      	bne.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3728      	adds	r7, #40	; 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000120 	.word	0x20000120

08007e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff ff5b 	bl	8007d44 <SPI_WaitFifoStateUntilTimeout>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e98:	f043 0220 	orr.w	r2, r3, #32
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e046      	b.n	8007f32 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <SPI_EndRxTxTransaction+0xcc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a25      	ldr	r2, [pc, #148]	; (8007f40 <SPI_EndRxTxTransaction+0xd0>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	0d5b      	lsrs	r3, r3, #21
 8007eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ec2:	d112      	bne.n	8007eea <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f7ff feb0 	bl	8007c34 <SPI_WaitFlagStateUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d016      	beq.n	8007f08 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e023      	b.n	8007f32 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d0f2      	beq.n	8007eea <SPI_EndRxTxTransaction+0x7a>
 8007f04:	e000      	b.n	8007f08 <SPI_EndRxTxTransaction+0x98>
        break;
 8007f06:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff ff15 	bl	8007d44 <SPI_WaitFifoStateUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e000      	b.n	8007f32 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000120 	.word	0x20000120
 8007f40:	165e9f81 	.word	0x165e9f81

08007f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e054      	b.n	8008000 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d111      	bne.n	8007f86 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fdf2 	bl	8008b54 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a23      	ldr	r2, [pc, #140]	; (8008008 <HAL_TIM_Base_Init+0xc4>)
 8007f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f000 fca1 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	0800492d 	.word	0x0800492d

0800800c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d001      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e054      	b.n	80080ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a26      	ldr	r2, [pc, #152]	; (80080dc <HAL_TIM_Base_Start_IT+0xd0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d022      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804e:	d01d      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a22      	ldr	r2, [pc, #136]	; (80080e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d018      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a21      	ldr	r2, [pc, #132]	; (80080e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1f      	ldr	r2, [pc, #124]	; (80080e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1e      	ldr	r2, [pc, #120]	; (80080ec <HAL_TIM_Base_Start_IT+0xe0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1c      	ldr	r2, [pc, #112]	; (80080f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x80>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1b      	ldr	r2, [pc, #108]	; (80080f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d115      	bne.n	80080b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <HAL_TIM_Base_Start_IT+0xec>)
 8008094:	4013      	ands	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b06      	cmp	r3, #6
 800809c:	d015      	beq.n	80080ca <HAL_TIM_Base_Start_IT+0xbe>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a4:	d011      	beq.n	80080ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b6:	e008      	b.n	80080ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e000      	b.n	80080cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40000400 	.word	0x40000400
 80080e4:	40000800 	.word	0x40000800
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	40010400 	.word	0x40010400
 80080f0:	40014000 	.word	0x40014000
 80080f4:	40001800 	.word	0x40001800
 80080f8:	00010007 	.word	0x00010007

080080fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6a1a      	ldr	r2, [r3, #32]
 800811a:	f241 1311 	movw	r3, #4369	; 0x1111
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10f      	bne.n	8008144 <HAL_TIM_Base_Stop_IT+0x48>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6a1a      	ldr	r2, [r3, #32]
 800812a:	f240 4344 	movw	r3, #1092	; 0x444
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d107      	bne.n	8008144 <HAL_TIM_Base_Stop_IT+0x48>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b02      	cmp	r3, #2
 800816e:	d128      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b02      	cmp	r3, #2
 800817c:	d121      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f06f 0202 	mvn.w	r2, #2
 8008186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
 80081a6:	e009      	b.n	80081bc <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d128      	bne.n	8008222 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d121      	bne.n	8008222 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f06f 0204 	mvn.w	r2, #4
 80081e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
 8008206:	e009      	b.n	800821c <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d128      	bne.n	8008282 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b08      	cmp	r3, #8
 800823c:	d121      	bne.n	8008282 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f06f 0208 	mvn.w	r2, #8
 8008246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2204      	movs	r2, #4
 800824c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
 8008266:	e009      	b.n	800827c <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b10      	cmp	r3, #16
 800828e:	d128      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b10      	cmp	r3, #16
 800829c:	d121      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f06f 0210 	mvn.w	r2, #16
 80082a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2208      	movs	r2, #8
 80082ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	4798      	blx	r3
 80082c6:	e009      	b.n	80082dc <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d110      	bne.n	8008312 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d109      	bne.n	8008312 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f06f 0201 	mvn.w	r2, #1
 8008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d110      	bne.n	8008342 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b80      	cmp	r3, #128	; 0x80
 800832c:	d109      	bne.n	8008342 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008350:	d110      	bne.n	8008374 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835c:	2b80      	cmp	r3, #128	; 0x80
 800835e:	d109      	bne.n	8008374 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d110      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d109      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d110      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d109      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0220 	mvn.w	r2, #32
 80083c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_TIM_ConfigClockSource+0x1c>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e0b4      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x186>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	4b56      	ldr	r3, [pc, #344]	; (800856c <HAL_TIM_ConfigClockSource+0x190>)
 8008414:	4013      	ands	r3, r2
 8008416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800841e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008430:	d03e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0xd4>
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008436:	f200 8087 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	f000 8086 	beq.w	800854e <HAL_TIM_ConfigClockSource+0x172>
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008446:	d87f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b70      	cmp	r3, #112	; 0x70
 800844a:	d01a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xa6>
 800844c:	2b70      	cmp	r3, #112	; 0x70
 800844e:	d87b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b60      	cmp	r3, #96	; 0x60
 8008452:	d050      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x11a>
 8008454:	2b60      	cmp	r3, #96	; 0x60
 8008456:	d877      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b50      	cmp	r3, #80	; 0x50
 800845a:	d03c      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0xfa>
 800845c:	2b50      	cmp	r3, #80	; 0x50
 800845e:	d873      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d058      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x13a>
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d86f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d064      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d86b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d060      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d867      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d05a      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x15a>
 8008480:	e062      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008492:	f000 fb3f 	bl	8008b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	609a      	str	r2, [r3, #8]
      break;
 80084ae:	e04f      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084c0:	f000 fb28 	bl	8008b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084d2:	609a      	str	r2, [r3, #8]
      break;
 80084d4:	e03c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e2:	461a      	mov	r2, r3
 80084e4:	f000 fa9c 	bl	8008a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2150      	movs	r1, #80	; 0x50
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 faf5 	bl	8008ade <TIM_ITRx_SetConfig>
      break;
 80084f4:	e02c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fabb 	bl	8008a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2160      	movs	r1, #96	; 0x60
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fae5 	bl	8008ade <TIM_ITRx_SetConfig>
      break;
 8008514:	e01c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fa7c 	bl	8008a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2140      	movs	r1, #64	; 0x40
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fad5 	bl	8008ade <TIM_ITRx_SetConfig>
      break;
 8008534:	e00c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 facc 	bl	8008ade <TIM_ITRx_SetConfig>
      break;
 8008546:	e003      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e000      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800854e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	fffeff88 	.word	0xfffeff88

08008570 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	460b      	mov	r3, r1
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e13e      	b.n	80088d2 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_TIM_RegisterCallback+0x2a>
 800865e:	2302      	movs	r3, #2
 8008660:	e137      	b.n	80088d2 <HAL_TIM_RegisterCallback+0x29a>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	f040 80c2 	bne.w	80087fc <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	2b1b      	cmp	r3, #27
 800867c:	f200 80bb 	bhi.w	80087f6 <HAL_TIM_RegisterCallback+0x1be>
 8008680:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <HAL_TIM_RegisterCallback+0x50>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	080086f9 	.word	0x080086f9
 800868c:	08008701 	.word	0x08008701
 8008690:	08008709 	.word	0x08008709
 8008694:	08008711 	.word	0x08008711
 8008698:	08008719 	.word	0x08008719
 800869c:	08008721 	.word	0x08008721
 80086a0:	08008729 	.word	0x08008729
 80086a4:	08008731 	.word	0x08008731
 80086a8:	08008739 	.word	0x08008739
 80086ac:	08008741 	.word	0x08008741
 80086b0:	08008749 	.word	0x08008749
 80086b4:	08008751 	.word	0x08008751
 80086b8:	08008759 	.word	0x08008759
 80086bc:	08008761 	.word	0x08008761
 80086c0:	0800876b 	.word	0x0800876b
 80086c4:	08008775 	.word	0x08008775
 80086c8:	0800877f 	.word	0x0800877f
 80086cc:	08008789 	.word	0x08008789
 80086d0:	08008793 	.word	0x08008793
 80086d4:	0800879d 	.word	0x0800879d
 80086d8:	080087a7 	.word	0x080087a7
 80086dc:	080087b1 	.word	0x080087b1
 80086e0:	080087bb 	.word	0x080087bb
 80086e4:	080087c5 	.word	0x080087c5
 80086e8:	080087cf 	.word	0x080087cf
 80086ec:	080087d9 	.word	0x080087d9
 80086f0:	080087e3 	.word	0x080087e3
 80086f4:	080087ed 	.word	0x080087ed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80086fe:	e0e3      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008706:	e0df      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800870e:	e0db      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008716:	e0d7      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800871e:	e0d3      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008726:	e0cf      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800872e:	e0cb      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008736:	e0c7      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800873e:	e0c3      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008746:	e0bf      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800874e:	e0bb      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008756:	e0b7      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800875e:	e0b3      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008768:	e0ae      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008772:	e0a9      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800877c:	e0a4      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008786:	e09f      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008790:	e09a      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800879a:	e095      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80087a4:	e090      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80087ae:	e08b      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80087b8:	e086      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80087c2:	e081      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80087cc:	e07c      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80087d6:	e077      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80087e0:	e072      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80087ea:	e06d      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80087f4:	e068      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
        break;
 80087fa:	e065      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d15d      	bne.n	80088c4 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	2b0d      	cmp	r3, #13
 800880c:	d857      	bhi.n	80088be <HAL_TIM_RegisterCallback+0x286>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <HAL_TIM_RegisterCallback+0x1dc>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	0800884d 	.word	0x0800884d
 8008818:	08008855 	.word	0x08008855
 800881c:	0800885d 	.word	0x0800885d
 8008820:	08008865 	.word	0x08008865
 8008824:	0800886d 	.word	0x0800886d
 8008828:	08008875 	.word	0x08008875
 800882c:	0800887d 	.word	0x0800887d
 8008830:	08008885 	.word	0x08008885
 8008834:	0800888d 	.word	0x0800888d
 8008838:	08008895 	.word	0x08008895
 800883c:	0800889d 	.word	0x0800889d
 8008840:	080088a5 	.word	0x080088a5
 8008844:	080088ad 	.word	0x080088ad
 8008848:	080088b5 	.word	0x080088b5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008852:	e039      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800885a:	e035      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008862:	e031      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800886a:	e02d      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008872:	e029      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800887a:	e025      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008882:	e021      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800888a:	e01d      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008892:	e019      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800889a:	e015      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80088a2:	e011      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80088aa:	e00d      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80088b2:	e009      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80088bc:	e004      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	75fb      	strb	r3, [r7, #23]
        break;
 80088c2:	e001      	b.n	80088c8 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a40      	ldr	r2, [pc, #256]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d013      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fe:	d00f      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a3d      	ldr	r2, [pc, #244]	; (80089f8 <TIM_Base_SetConfig+0x118>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00b      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a3c      	ldr	r2, [pc, #240]	; (80089fc <TIM_Base_SetConfig+0x11c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d007      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a3b      	ldr	r2, [pc, #236]	; (8008a00 <TIM_Base_SetConfig+0x120>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a3a      	ldr	r2, [pc, #232]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d02b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d027      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a2c      	ldr	r2, [pc, #176]	; (80089f8 <TIM_Base_SetConfig+0x118>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d023      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2b      	ldr	r2, [pc, #172]	; (80089fc <TIM_Base_SetConfig+0x11c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <TIM_Base_SetConfig+0x120>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d017      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a28      	ldr	r2, [pc, #160]	; (8008a08 <TIM_Base_SetConfig+0x128>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d013      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a27      	ldr	r2, [pc, #156]	; (8008a0c <TIM_Base_SetConfig+0x12c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00f      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a26      	ldr	r2, [pc, #152]	; (8008a10 <TIM_Base_SetConfig+0x130>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a25      	ldr	r2, [pc, #148]	; (8008a14 <TIM_Base_SetConfig+0x134>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d007      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a24      	ldr	r2, [pc, #144]	; (8008a18 <TIM_Base_SetConfig+0x138>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d003      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <TIM_Base_SetConfig+0x13c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d108      	bne.n	80089a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_Base_SetConfig+0xf8>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d103      	bne.n	80089e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	615a      	str	r2, [r3, #20]
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40000400 	.word	0x40000400
 80089fc:	40000800 	.word	0x40000800
 8008a00:	40000c00 	.word	0x40000c00
 8008a04:	40010400 	.word	0x40010400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40014400 	.word	0x40014400
 8008a10:	40014800 	.word	0x40014800
 8008a14:	40001800 	.word	0x40001800
 8008a18:	40001c00 	.word	0x40001c00
 8008a1c:	40002000 	.word	0x40002000

08008a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f023 030a 	bic.w	r3, r3, #10
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f023 0210 	bic.w	r2, r3, #16
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	031b      	lsls	r3, r3, #12
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	f043 0307 	orr.w	r3, r3, #7
 8008b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	609a      	str	r2, [r3, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	021a      	lsls	r2, r3, #8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	609a      	str	r2, [r3, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	371c      	adds	r7, #28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a1e      	ldr	r2, [pc, #120]	; (8008bd8 <TIM_ResetCallback+0x84>)
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <TIM_ResetCallback+0x88>)
 8008b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <TIM_ResetCallback+0x8c>)
 8008b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a1b      	ldr	r2, [pc, #108]	; (8008be4 <TIM_ResetCallback+0x90>)
 8008b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a1a      	ldr	r2, [pc, #104]	; (8008be8 <TIM_ResetCallback+0x94>)
 8008b80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a19      	ldr	r2, [pc, #100]	; (8008bec <TIM_ResetCallback+0x98>)
 8008b88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <TIM_ResetCallback+0x9c>)
 8008b90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <TIM_ResetCallback+0xa0>)
 8008b98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <TIM_ResetCallback+0xa4>)
 8008ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <TIM_ResetCallback+0xa8>)
 8008ba8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a14      	ldr	r2, [pc, #80]	; (8008c00 <TIM_ResetCallback+0xac>)
 8008bb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <TIM_ResetCallback+0xb0>)
 8008bb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a12      	ldr	r2, [pc, #72]	; (8008c08 <TIM_ResetCallback+0xb4>)
 8008bc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a11      	ldr	r2, [pc, #68]	; (8008c0c <TIM_ResetCallback+0xb8>)
 8008bc8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	08008571 	.word	0x08008571
 8008bdc:	08008585 	.word	0x08008585
 8008be0:	080085fd 	.word	0x080085fd
 8008be4:	08008611 	.word	0x08008611
 8008be8:	080085ad 	.word	0x080085ad
 8008bec:	080085c1 	.word	0x080085c1
 8008bf0:	08008599 	.word	0x08008599
 8008bf4:	080085d5 	.word	0x080085d5
 8008bf8:	080085e9 	.word	0x080085e9
 8008bfc:	08008625 	.word	0x08008625
 8008c00:	08008d2d 	.word	0x08008d2d
 8008c04:	08008d41 	.word	0x08008d41
 8008c08:	08008d55 	.word	0x08008d55
 8008c0c:	08008d69 	.word	0x08008d69

08008c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e06d      	b.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a30      	ldr	r2, [pc, #192]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a2f      	ldr	r2, [pc, #188]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d108      	bne.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a20      	ldr	r2, [pc, #128]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d022      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9a:	d01d      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d018      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d013      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1a      	ldr	r2, [pc, #104]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00e      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d009      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a16      	ldr	r2, [pc, #88]	; (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d004      	beq.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a15      	ldr	r2, [pc, #84]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d10c      	bne.n	8008cf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40010400 	.word	0x40010400
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	40000800 	.word	0x40000800
 8008d20:	40000c00 	.word	0x40000c00
 8008d24:	40014000 	.word	0x40014000
 8008d28:	40001800 	.word	0x40001800

08008d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <_ZdlPvj>:
 8008d7c:	f000 b811 	b.w	8008da2 <_ZdlPv>

08008d80 <_Znwj>:
 8008d80:	2801      	cmp	r0, #1
 8008d82:	bf38      	it	cc
 8008d84:	2001      	movcc	r0, #1
 8008d86:	b510      	push	{r4, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f81c 	bl	8008dc8 <malloc>
 8008d90:	b100      	cbz	r0, 8008d94 <_Znwj+0x14>
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	f000 f808 	bl	8008da8 <_ZSt15get_new_handlerv>
 8008d98:	b908      	cbnz	r0, 8008d9e <_Znwj+0x1e>
 8008d9a:	f000 f80d 	bl	8008db8 <abort>
 8008d9e:	4780      	blx	r0
 8008da0:	e7f3      	b.n	8008d8a <_Znwj+0xa>

08008da2 <_ZdlPv>:
 8008da2:	f000 b819 	b.w	8008dd8 <free>
	...

08008da8 <_ZSt15get_new_handlerv>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <_ZSt15get_new_handlerv+0xc>)
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	f3bf 8f5b 	dmb	ish
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	200003d8 	.word	0x200003d8

08008db8 <abort>:
 8008db8:	b508      	push	{r3, lr}
 8008dba:	2006      	movs	r0, #6
 8008dbc:	f000 f8f0 	bl	8008fa0 <raise>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f7fb fbb3 	bl	800452c <_exit>
	...

08008dc8 <malloc>:
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <malloc+0xc>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	f000 b82b 	b.w	8008e28 <_malloc_r>
 8008dd2:	bf00      	nop
 8008dd4:	20000178 	.word	0x20000178

08008dd8 <free>:
 8008dd8:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <free+0xc>)
 8008dda:	4601      	mov	r1, r0
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	f000 b945 	b.w	800906c <_free_r>
 8008de2:	bf00      	nop
 8008de4:	20000178 	.word	0x20000178

08008de8 <sbrk_aligned>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	4e0e      	ldr	r6, [pc, #56]	; (8008e24 <sbrk_aligned+0x3c>)
 8008dec:	460c      	mov	r4, r1
 8008dee:	6831      	ldr	r1, [r6, #0]
 8008df0:	4605      	mov	r5, r0
 8008df2:	b911      	cbnz	r1, 8008dfa <sbrk_aligned+0x12>
 8008df4:	f000 f8f0 	bl	8008fd8 <_sbrk_r>
 8008df8:	6030      	str	r0, [r6, #0]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 f8eb 	bl	8008fd8 <_sbrk_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d00a      	beq.n	8008e1c <sbrk_aligned+0x34>
 8008e06:	1cc4      	adds	r4, r0, #3
 8008e08:	f024 0403 	bic.w	r4, r4, #3
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d007      	beq.n	8008e20 <sbrk_aligned+0x38>
 8008e10:	1a21      	subs	r1, r4, r0
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 f8e0 	bl	8008fd8 <_sbrk_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d101      	bne.n	8008e20 <sbrk_aligned+0x38>
 8008e1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e20:	4620      	mov	r0, r4
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	200003e0 	.word	0x200003e0

08008e28 <_malloc_r>:
 8008e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e2c:	1ccd      	adds	r5, r1, #3
 8008e2e:	f025 0503 	bic.w	r5, r5, #3
 8008e32:	3508      	adds	r5, #8
 8008e34:	2d0c      	cmp	r5, #12
 8008e36:	bf38      	it	cc
 8008e38:	250c      	movcc	r5, #12
 8008e3a:	2d00      	cmp	r5, #0
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	db01      	blt.n	8008e44 <_malloc_r+0x1c>
 8008e40:	42a9      	cmp	r1, r5
 8008e42:	d905      	bls.n	8008e50 <_malloc_r+0x28>
 8008e44:	230c      	movs	r3, #12
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	2600      	movs	r6, #0
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f24 <_malloc_r+0xfc>
 8008e54:	f000 f868 	bl	8008f28 <__malloc_lock>
 8008e58:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5c:	461c      	mov	r4, r3
 8008e5e:	bb5c      	cbnz	r4, 8008eb8 <_malloc_r+0x90>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4638      	mov	r0, r7
 8008e64:	f7ff ffc0 	bl	8008de8 <sbrk_aligned>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	d155      	bne.n	8008f1a <_malloc_r+0xf2>
 8008e6e:	f8d8 4000 	ldr.w	r4, [r8]
 8008e72:	4626      	mov	r6, r4
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	d145      	bne.n	8008f04 <_malloc_r+0xdc>
 8008e78:	2c00      	cmp	r4, #0
 8008e7a:	d048      	beq.n	8008f0e <_malloc_r+0xe6>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4638      	mov	r0, r7
 8008e82:	eb04 0903 	add.w	r9, r4, r3
 8008e86:	f000 f8a7 	bl	8008fd8 <_sbrk_r>
 8008e8a:	4581      	cmp	r9, r0
 8008e8c:	d13f      	bne.n	8008f0e <_malloc_r+0xe6>
 8008e8e:	6821      	ldr	r1, [r4, #0]
 8008e90:	1a6d      	subs	r5, r5, r1
 8008e92:	4629      	mov	r1, r5
 8008e94:	4638      	mov	r0, r7
 8008e96:	f7ff ffa7 	bl	8008de8 <sbrk_aligned>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d037      	beq.n	8008f0e <_malloc_r+0xe6>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	442b      	add	r3, r5
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d038      	beq.n	8008f1e <_malloc_r+0xf6>
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	42a2      	cmp	r2, r4
 8008eb0:	d12b      	bne.n	8008f0a <_malloc_r+0xe2>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e00f      	b.n	8008ed8 <_malloc_r+0xb0>
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	1b52      	subs	r2, r2, r5
 8008ebc:	d41f      	bmi.n	8008efe <_malloc_r+0xd6>
 8008ebe:	2a0b      	cmp	r2, #11
 8008ec0:	d917      	bls.n	8008ef2 <_malloc_r+0xca>
 8008ec2:	1961      	adds	r1, r4, r5
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	6025      	str	r5, [r4, #0]
 8008ec8:	bf18      	it	ne
 8008eca:	6059      	strne	r1, [r3, #4]
 8008ecc:	6863      	ldr	r3, [r4, #4]
 8008ece:	bf08      	it	eq
 8008ed0:	f8c8 1000 	streq.w	r1, [r8]
 8008ed4:	5162      	str	r2, [r4, r5]
 8008ed6:	604b      	str	r3, [r1, #4]
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f104 060b 	add.w	r6, r4, #11
 8008ede:	f000 f829 	bl	8008f34 <__malloc_unlock>
 8008ee2:	f026 0607 	bic.w	r6, r6, #7
 8008ee6:	1d23      	adds	r3, r4, #4
 8008ee8:	1af2      	subs	r2, r6, r3
 8008eea:	d0ae      	beq.n	8008e4a <_malloc_r+0x22>
 8008eec:	1b9b      	subs	r3, r3, r6
 8008eee:	50a3      	str	r3, [r4, r2]
 8008ef0:	e7ab      	b.n	8008e4a <_malloc_r+0x22>
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	6862      	ldr	r2, [r4, #4]
 8008ef6:	d1dd      	bne.n	8008eb4 <_malloc_r+0x8c>
 8008ef8:	f8c8 2000 	str.w	r2, [r8]
 8008efc:	e7ec      	b.n	8008ed8 <_malloc_r+0xb0>
 8008efe:	4623      	mov	r3, r4
 8008f00:	6864      	ldr	r4, [r4, #4]
 8008f02:	e7ac      	b.n	8008e5e <_malloc_r+0x36>
 8008f04:	4634      	mov	r4, r6
 8008f06:	6876      	ldr	r6, [r6, #4]
 8008f08:	e7b4      	b.n	8008e74 <_malloc_r+0x4c>
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	e7cc      	b.n	8008ea8 <_malloc_r+0x80>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	603b      	str	r3, [r7, #0]
 8008f12:	4638      	mov	r0, r7
 8008f14:	f000 f80e 	bl	8008f34 <__malloc_unlock>
 8008f18:	e797      	b.n	8008e4a <_malloc_r+0x22>
 8008f1a:	6025      	str	r5, [r4, #0]
 8008f1c:	e7dc      	b.n	8008ed8 <_malloc_r+0xb0>
 8008f1e:	605b      	str	r3, [r3, #4]
 8008f20:	deff      	udf	#255	; 0xff
 8008f22:	bf00      	nop
 8008f24:	200003dc 	.word	0x200003dc

08008f28 <__malloc_lock>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__malloc_lock+0x8>)
 8008f2a:	f000 b88f 	b.w	800904c <__retarget_lock_acquire_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20000520 	.word	0x20000520

08008f34 <__malloc_unlock>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__malloc_unlock+0x8>)
 8008f36:	f000 b88a 	b.w	800904e <__retarget_lock_release_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20000520 	.word	0x20000520

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <_raise_r>:
 8008f50:	291f      	cmp	r1, #31
 8008f52:	b538      	push	{r3, r4, r5, lr}
 8008f54:	4604      	mov	r4, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	d904      	bls.n	8008f64 <_raise_r+0x14>
 8008f5a:	2316      	movs	r3, #22
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f66:	b112      	cbz	r2, 8008f6e <_raise_r+0x1e>
 8008f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f6c:	b94b      	cbnz	r3, 8008f82 <_raise_r+0x32>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 f830 	bl	8008fd4 <_getpid_r>
 8008f74:	462a      	mov	r2, r5
 8008f76:	4601      	mov	r1, r0
 8008f78:	4620      	mov	r0, r4
 8008f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f7e:	f000 b817 	b.w	8008fb0 <_kill_r>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d00a      	beq.n	8008f9c <_raise_r+0x4c>
 8008f86:	1c59      	adds	r1, r3, #1
 8008f88:	d103      	bne.n	8008f92 <_raise_r+0x42>
 8008f8a:	2316      	movs	r3, #22
 8008f8c:	6003      	str	r3, [r0, #0]
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e7e7      	b.n	8008f62 <_raise_r+0x12>
 8008f92:	2400      	movs	r4, #0
 8008f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f98:	4628      	mov	r0, r5
 8008f9a:	4798      	blx	r3
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e7e0      	b.n	8008f62 <_raise_r+0x12>

08008fa0 <raise>:
 8008fa0:	4b02      	ldr	r3, [pc, #8]	; (8008fac <raise+0xc>)
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	f7ff bfd3 	b.w	8008f50 <_raise_r>
 8008faa:	bf00      	nop
 8008fac:	20000178 	.word	0x20000178

08008fb0 <_kill_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4d07      	ldr	r5, [pc, #28]	; (8008fd0 <_kill_r+0x20>)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	f7fb faa5 	bl	800450c <_kill>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	d102      	bne.n	8008fcc <_kill_r+0x1c>
 8008fc6:	682b      	ldr	r3, [r5, #0]
 8008fc8:	b103      	cbz	r3, 8008fcc <_kill_r+0x1c>
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	bf00      	nop
 8008fd0:	2000051c 	.word	0x2000051c

08008fd4 <_getpid_r>:
 8008fd4:	f7fb ba92 	b.w	80044fc <_getpid>

08008fd8 <_sbrk_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d06      	ldr	r5, [pc, #24]	; (8008ff4 <_sbrk_r+0x1c>)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4604      	mov	r4, r0
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	f7fb faac 	bl	8004540 <_sbrk>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_sbrk_r+0x1a>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_sbrk_r+0x1a>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	2000051c 	.word	0x2000051c

08008ff8 <__errno>:
 8008ff8:	4b01      	ldr	r3, [pc, #4]	; (8009000 <__errno+0x8>)
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	20000178 	.word	0x20000178

08009004 <__libc_init_array>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4d0d      	ldr	r5, [pc, #52]	; (800903c <__libc_init_array+0x38>)
 8009008:	4c0d      	ldr	r4, [pc, #52]	; (8009040 <__libc_init_array+0x3c>)
 800900a:	1b64      	subs	r4, r4, r5
 800900c:	10a4      	asrs	r4, r4, #2
 800900e:	2600      	movs	r6, #0
 8009010:	42a6      	cmp	r6, r4
 8009012:	d109      	bne.n	8009028 <__libc_init_array+0x24>
 8009014:	4d0b      	ldr	r5, [pc, #44]	; (8009044 <__libc_init_array+0x40>)
 8009016:	4c0c      	ldr	r4, [pc, #48]	; (8009048 <__libc_init_array+0x44>)
 8009018:	f000 f874 	bl	8009104 <_init>
 800901c:	1b64      	subs	r4, r4, r5
 800901e:	10a4      	asrs	r4, r4, #2
 8009020:	2600      	movs	r6, #0
 8009022:	42a6      	cmp	r6, r4
 8009024:	d105      	bne.n	8009032 <__libc_init_array+0x2e>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	f855 3b04 	ldr.w	r3, [r5], #4
 800902c:	4798      	blx	r3
 800902e:	3601      	adds	r6, #1
 8009030:	e7ee      	b.n	8009010 <__libc_init_array+0xc>
 8009032:	f855 3b04 	ldr.w	r3, [r5], #4
 8009036:	4798      	blx	r3
 8009038:	3601      	adds	r6, #1
 800903a:	e7f2      	b.n	8009022 <__libc_init_array+0x1e>
 800903c:	08009210 	.word	0x08009210
 8009040:	08009210 	.word	0x08009210
 8009044:	08009210 	.word	0x08009210
 8009048:	08009214 	.word	0x08009214

0800904c <__retarget_lock_acquire_recursive>:
 800904c:	4770      	bx	lr

0800904e <__retarget_lock_release_recursive>:
 800904e:	4770      	bx	lr

08009050 <memcpy>:
 8009050:	440a      	add	r2, r1
 8009052:	4291      	cmp	r1, r2
 8009054:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009058:	d100      	bne.n	800905c <memcpy+0xc>
 800905a:	4770      	bx	lr
 800905c:	b510      	push	{r4, lr}
 800905e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009066:	4291      	cmp	r1, r2
 8009068:	d1f9      	bne.n	800905e <memcpy+0xe>
 800906a:	bd10      	pop	{r4, pc}

0800906c <_free_r>:
 800906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906e:	2900      	cmp	r1, #0
 8009070:	d044      	beq.n	80090fc <_free_r+0x90>
 8009072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009076:	9001      	str	r0, [sp, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f1a1 0404 	sub.w	r4, r1, #4
 800907e:	bfb8      	it	lt
 8009080:	18e4      	addlt	r4, r4, r3
 8009082:	f7ff ff51 	bl	8008f28 <__malloc_lock>
 8009086:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <_free_r+0x94>)
 8009088:	9801      	ldr	r0, [sp, #4]
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	b933      	cbnz	r3, 800909c <_free_r+0x30>
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	6014      	str	r4, [r2, #0]
 8009092:	b003      	add	sp, #12
 8009094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009098:	f7ff bf4c 	b.w	8008f34 <__malloc_unlock>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d908      	bls.n	80090b2 <_free_r+0x46>
 80090a0:	6825      	ldr	r5, [r4, #0]
 80090a2:	1961      	adds	r1, r4, r5
 80090a4:	428b      	cmp	r3, r1
 80090a6:	bf01      	itttt	eq
 80090a8:	6819      	ldreq	r1, [r3, #0]
 80090aa:	685b      	ldreq	r3, [r3, #4]
 80090ac:	1949      	addeq	r1, r1, r5
 80090ae:	6021      	streq	r1, [r4, #0]
 80090b0:	e7ed      	b.n	800908e <_free_r+0x22>
 80090b2:	461a      	mov	r2, r3
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b10b      	cbz	r3, 80090bc <_free_r+0x50>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d9fa      	bls.n	80090b2 <_free_r+0x46>
 80090bc:	6811      	ldr	r1, [r2, #0]
 80090be:	1855      	adds	r5, r2, r1
 80090c0:	42a5      	cmp	r5, r4
 80090c2:	d10b      	bne.n	80090dc <_free_r+0x70>
 80090c4:	6824      	ldr	r4, [r4, #0]
 80090c6:	4421      	add	r1, r4
 80090c8:	1854      	adds	r4, r2, r1
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	d1e0      	bne.n	8009092 <_free_r+0x26>
 80090d0:	681c      	ldr	r4, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	440c      	add	r4, r1
 80090d8:	6014      	str	r4, [r2, #0]
 80090da:	e7da      	b.n	8009092 <_free_r+0x26>
 80090dc:	d902      	bls.n	80090e4 <_free_r+0x78>
 80090de:	230c      	movs	r3, #12
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	e7d6      	b.n	8009092 <_free_r+0x26>
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	428b      	cmp	r3, r1
 80090ea:	bf04      	itt	eq
 80090ec:	6819      	ldreq	r1, [r3, #0]
 80090ee:	685b      	ldreq	r3, [r3, #4]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	bf04      	itt	eq
 80090f4:	1949      	addeq	r1, r1, r5
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7ca      	b.n	8009092 <_free_r+0x26>
 80090fc:	b003      	add	sp, #12
 80090fe:	bd30      	pop	{r4, r5, pc}
 8009100:	200003dc 	.word	0x200003dc

08009104 <_init>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr

08009110 <_fini>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr
