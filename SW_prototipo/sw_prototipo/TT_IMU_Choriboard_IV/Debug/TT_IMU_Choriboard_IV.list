
TT_IMU_Choriboard_IV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800aa70  0800aa70  0001aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd0  0800abd0  000202bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd8  0800abd8  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800abd8  0800abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0800abe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200002bc  0800aea0  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800aea0  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028272  00000000  00000000  0002032f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f6a  00000000  00000000  000485a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  0004f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160e  00000000  00000000  00051250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003013a  00000000  00000000  0005285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a7a  00000000  00000000  00082998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106eb9  00000000  00000000  000a9412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000805c  00000000  00000000  001b02cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001b8328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200002bc 	.word	0x200002bc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800aa54 	.word	0x0800aa54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200002c0 	.word	0x200002c0
 8000204:	0800aa54 	.word	0x0800aa54

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 b970 	b.w	8000e4c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9e08      	ldr	r6, [sp, #32]
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460f      	mov	r7, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4694      	mov	ip, r2
 8000b98:	d965      	bls.n	8000c66 <__udivmoddi4+0xe2>
 8000b9a:	fab2 f382 	clz	r3, r2
 8000b9e:	b143      	cbz	r3, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	f1c3 0220 	rsb	r2, r3, #32
 8000ba8:	409f      	lsls	r7, r3
 8000baa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bae:	4317      	orrs	r7, r2
 8000bb0:	409c      	lsls	r4, r3
 8000bb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb6:	fa1f f58c 	uxth.w	r5, ip
 8000bba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc8:	fb01 f005 	mul.w	r0, r1, r5
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd8:	f080 811c 	bcs.w	8000e14 <__udivmoddi4+0x290>
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	f240 8119 	bls.w	8000e14 <__udivmoddi4+0x290>
 8000be2:	3902      	subs	r1, #2
 8000be4:	4462      	add	r2, ip
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf6:	fb00 f505 	mul.w	r5, r0, r5
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x90>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x294>
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x294>
 8000c10:	4464      	add	r4, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11e      	cbz	r6, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40dc      	lsrs	r4, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	e9c6 4300 	strd	r4, r3, [r6]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0xbc>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	f000 80ed 	beq.w	8000e0e <__udivmoddi4+0x28a>
 8000c34:	2100      	movs	r1, #0
 8000c36:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	fab3 f183 	clz	r1, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d149      	bne.n	8000cdc <__udivmoddi4+0x158>
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d302      	bcc.n	8000c52 <__udivmoddi4+0xce>
 8000c4c:	4282      	cmp	r2, r0
 8000c4e:	f200 80f8 	bhi.w	8000e42 <__udivmoddi4+0x2be>
 8000c52:	1a84      	subs	r4, r0, r2
 8000c54:	eb65 0203 	sbc.w	r2, r5, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d0e2      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	e9c6 4700 	strd	r4, r7, [r6]
 8000c64:	e7df      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xe6>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8090 	bne.w	8000d94 <__udivmoddi4+0x210>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c84:	fb07 2015 	mls	r0, r7, r5, r2
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8e:	fb0e f005 	mul.w	r0, lr, r5
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x124>
 8000c96:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x122>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2b8>
 8000ca6:	4645      	mov	r5, r8
 8000ca8:	1a12      	subs	r2, r2, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x14e>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x14c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2c2>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cda:	e79f      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cdc:	f1c1 0720 	rsb	r7, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa05 f401 	lsl.w	r4, r5, r1
 8000cee:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf2:	40fd      	lsrs	r5, r7
 8000cf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	fb09 5518 	mls	r5, r9, r8, r5
 8000d06:	0c1c      	lsrs	r4, r3, #16
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b0>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2b4>
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2b4>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4464      	add	r4, ip
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	b29d      	uxth	r5, r3
 8000d38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1da>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2ac>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2ac>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	4464      	add	r4, ip
 8000d5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d62:	fba3 9502 	umull	r9, r5, r3, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	42ac      	cmp	r4, r5
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46ae      	mov	lr, r5
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x29c>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x298>
 8000d74:	b156      	cbz	r6, 8000d8c <__udivmoddi4+0x208>
 8000d76:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d82:	40ca      	lsrs	r2, r1
 8000d84:	40cc      	lsrs	r4, r1
 8000d86:	4317      	orrs	r7, r2
 8000d88:	e9c6 7400 	strd	r7, r4, [r6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	f1c3 0120 	rsb	r1, r3, #32
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000da0:	fa25 f101 	lsr.w	r1, r5, r1
 8000da4:	409d      	lsls	r5, r3
 8000da6:	432a      	orrs	r2, r5
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1510 	mls	r5, r7, r0, r1
 8000db8:	0c11      	lsrs	r1, r2, #16
 8000dba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc2:	428d      	cmp	r5, r1
 8000dc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x258>
 8000dca:	eb1c 0101 	adds.w	r1, ip, r1
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd4:	428d      	cmp	r5, r1
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4461      	add	r1, ip
 8000ddc:	1b49      	subs	r1, r1, r5
 8000dde:	b292      	uxth	r2, r2
 8000de0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de4:	fb07 1115 	mls	r1, r7, r5, r1
 8000de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dec:	fb05 f10e 	mul.w	r1, r5, lr
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x282>
 8000df4:	eb1c 0202 	adds.w	r2, ip, r2
 8000df8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000e02:	3d02      	subs	r5, #2
 8000e04:	4462      	add	r2, ip
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0xfc>
 8000e0e:	4631      	mov	r1, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000e14:	4639      	mov	r1, r7
 8000e16:	e6e6      	b.n	8000be6 <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x90>
 8000e1c:	4548      	cmp	r0, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f0>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f0>
 8000e2c:	4645      	mov	r5, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e30:	462b      	mov	r3, r5
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1da>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x258>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b0>
 8000e3c:	3d02      	subs	r5, #2
 8000e3e:	4462      	add	r2, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x124>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e70a      	b.n	8000c5c <__udivmoddi4+0xd8>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x14e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	771a      	strb	r2, [r3, #28]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200002d8 	.word	0x200002d8

08000e88 <_Z8CNI_initv>:


void CNI_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e00e      	b.n	8000eb2 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <_Z8CNI_initv+0x40>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <_Z8CNI_initv+0x44>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f005 fad6 	bl	8006458 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_Z8CNI_initv+0x48>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3eb      	bcc.n	8000e94 <_Z8CNI_initv+0xc>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002d8 	.word	0x200002d8
 8000ecc:	200001b8 	.word	0x200001b8
 8000ed0:	2000025c 	.word	0x2000025c

08000ed4 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fb9b 	bl	8006618 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fe5d 	bl	8006ba8 <HAL_CAN_ActivateNotification>
#endif
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002d8 	.word	0x200002d8

08000ef8 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d301      	bcc.n	8000f0e <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e079      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8000f0e:	4940      	ldr	r1, [pc, #256]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d001      	beq.n	8000f28 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e06c      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000f28:	4939      	ldr	r1, [pc, #228]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	f043 0303 	orr.w	r3, r3, #3
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f44:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2107      	movs	r1, #7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fc77 	bl	8006840 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000f56:	e02a      	b.n	8000fae <_Z12CNI_send_msgm+0xb6>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000f58:	bf00      	nop
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fcb3 	bl	80068ca <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f2      	bne.n	8000f5a <_Z12CNI_send_msgm+0x62>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000f74:	4926      	ldr	r1, [pc, #152]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3310      	adds	r3, #16
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f88:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3308      	adds	r3, #8
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f9c:	441a      	add	r2, r3
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <_Z12CNI_send_msgm+0x120>)
 8000fa4:	f005 fb7c 	bl	80066a0 <HAL_CAN_AddTxMessage>
		i++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d215      	bcs.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10a      	bne.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fce:	4910      	ldr	r1, [pc, #64]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d0b9      	beq.n	8000f58 <_Z12CNI_send_msgm+0x60>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000fe4:	bf00      	nop
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fc6d 	bl	80068ca <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <_Z12CNI_send_msgm+0xee>

	return CNI_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000258 	.word	0x20000258
 8001010:	20000000 	.word	0x20000000
 8001014:	200002d8 	.word	0x200002d8
 8001018:	200002e0 	.word	0x200002e0

0800101c <_Z15CNI_receive_msgmm>:


CNI_status_t CNI_receive_msg(uint32_t msgHandle, uint32_t timeout)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b090      	sub	sp, #64	; 0x40
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	uint32_t startTime;
	uint32_t elapsedTime;
	bool msgReceived;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <_Z15CNI_receive_msgmm+0x16c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d301      	bcc.n	8001034 <_Z15CNI_receive_msgmm+0x18>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8001030:	2301      	movs	r3, #1
 8001032:	e0a5      	b.n	8001180 <_Z15CNI_receive_msgmm+0x164>
	}

	if(CANmsgList[msgHandle].mNodeID_ == MY_NODE_ID)
 8001034:	4955      	ldr	r1, [pc, #340]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d101      	bne.n	800104e <_Z15CNI_receive_msgmm+0x32>
	{
		return CNI_MSG_HANDLE_RX_NOT_ALLOWED;
 800104a:	2303      	movs	r3, #3
 800104c:	e098      	b.n	8001180 <_Z15CNI_receive_msgmm+0x164>
	}

	i = msgHandle;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8001052:	494e      	ldr	r1, [pc, #312]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8001064:	4949      	ldr	r1, [pc, #292]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c

	elapsedTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
	msgReceived = false;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	startTime = timeTriggeredScheduler_get_time();
 8001082:	f005 f817 	bl	80060b4 <_Z31timeTriggeredScheduler_get_timev>
 8001086:	62b8      	str	r0, [r7, #40]	; 0x28

	while( (msgReceived == false) && ((timeout == 0) || (elapsedTime < timeout)) )
 8001088:	e068      	b.n	800115c <_Z15CNI_receive_msgmm+0x140>
	{
		// ¿Llegó algún mensaje nuevo?
		if(HAL_CAN_GetRxFifoFillLevel(_instance.mHcan_, CAN_RX_FIFO0) > 0)
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <_Z15CNI_receive_msgmm+0x174>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fd61 	bl	8006b58 <HAL_CAN_GetRxFifoFillLevel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d054      	beq.n	8001150 <_Z15CNI_receive_msgmm+0x134>
		{
			// Se lee el mensaje nuevo
			HAL_CAN_GetRxMessage(_instance.mHcan_, CAN_RX_FIFO0, &auxCANrxHeader, CANmsgList[i].mPayload_);
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <_Z15CNI_receive_msgmm+0x174>)
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	3308      	adds	r3, #8
 80010b6:	4a35      	ldr	r2, [pc, #212]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 80010b8:	4413      	add	r3, r2
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	2100      	movs	r1, #0
 80010c0:	f005 fc38 	bl	8006934 <HAL_CAN_GetRxMessage>

			// El STD_ID y nodeID son los correspondientes?
			if( (rxMsgServiceID == CAN_MSG_GET_SERVICE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) && (rxNodeID == CAN_MSG_GET_NODE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) )
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d136      	bne.n	800113c <_Z15CNI_receive_msgmm+0x120>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d130      	bne.n	800113c <_Z15CNI_receive_msgmm+0x120>
			{
				CANmsgList[i].mLenPayload_ = auxCANrxHeader.DLC;
 80010da:	69f9      	ldr	r1, [r7, #28]
 80010dc:	482b      	ldr	r0, [pc, #172]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 80010de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4403      	add	r3, r0
 80010ea:	3310      	adds	r3, #16
 80010ec:	6019      	str	r1, [r3, #0]
				i++;
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	3301      	adds	r3, #1
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
				if( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) )
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <_Z15CNI_receive_msgmm+0x16c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d21a      	bcs.n	8001134 <_Z15CNI_receive_msgmm+0x118>
 80010fe:	4923      	ldr	r1, [pc, #140]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 8001100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001110:	429a      	cmp	r2, r3
 8001112:	d10f      	bne.n	8001134 <_Z15CNI_receive_msgmm+0x118>
 8001114:	491d      	ldr	r1, [pc, #116]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 8001116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001128:	429a      	cmp	r2, r3
 800112a:	d103      	bne.n	8001134 <_Z15CNI_receive_msgmm+0x118>
				{
					msgReceived = false;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) )
 8001132:	e00d      	b.n	8001150 <_Z15CNI_receive_msgmm+0x134>
				}
				else
				{
					msgReceived = true;
 8001134:	2301      	movs	r3, #1
 8001136:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) )
 800113a:	e009      	b.n	8001150 <_Z15CNI_receive_msgmm+0x134>
				}
			}
			else
			{
				CANmsgList[i].mLenPayload_ = 0;
 800113c:	4913      	ldr	r1, [pc, #76]	; (800118c <_Z15CNI_receive_msgmm+0x170>)
 800113e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3310      	adds	r3, #16
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
			}
		}
		elapsedTime = timeTriggeredScheduler_get_time() - startTime;
 8001150:	f004 ffb0 	bl	80060b4 <_Z31timeTriggeredScheduler_get_timev>
 8001154:	4602      	mov	r2, r0
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
	while( (msgReceived == false) && ((timeout == 0) || (elapsedTime < timeout)) )
 800115c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <_Z15CNI_receive_msgmm+0x156>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d08f      	beq.n	800108a <_Z15CNI_receive_msgmm+0x6e>
 800116a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d38b      	bcc.n	800108a <_Z15CNI_receive_msgmm+0x6e>
	}

	if(msgReceived == true)
 8001172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <_Z15CNI_receive_msgmm+0x162>
	{
		return CNI_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <_Z15CNI_receive_msgmm+0x164>
	}

	return CNI_MSG_RX_TIMEOUT;
 800117e:	2304      	movs	r3, #4
//			CANmsgList[i].mLenPayload_ = 0;
//		}
//	}
//
//	return CNI_OK;
}
 8001180:	4618      	mov	r0, r3
 8001182:	3740      	adds	r7, #64	; 0x40
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000258 	.word	0x20000258
 800118c:	20000000 	.word	0x20000000
 8001190:	200002d8 	.word	0x200002d8

08001194 <_Z22CNI_update_msg_contentmPhm>:

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <_Z22CNI_update_msg_contentmPhm+0x130>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d301      	bcc.n	80011ae <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e086      	b.n	80012bc <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80011ae:	4946      	ldr	r1, [pc, #280]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d001      	beq.n	80011c8 <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80011c4:	2302      	movs	r3, #2
 80011c6:	e079      	b.n	80012bc <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80011cc:	493e      	ldr	r1, [pc, #248]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 80011de:	493a      	ldr	r1, [pc, #232]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3304      	adds	r3, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80011f6:	e041      	b.n	800127c <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d91e      	bls.n	800123c <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	3308      	adds	r3, #8
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800120c:	1898      	adds	r0, r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	2208      	movs	r2, #8
 800121a:	4619      	mov	r1, r3
 800121c:	f004 f85b 	bl	80052d6 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 8001220:	4929      	ldr	r1, [pc, #164]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	3310      	adds	r3, #16
 8001230:	2208      	movs	r2, #8
 8001232:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3b08      	subs	r3, #8
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	e01c      	b.n	8001276 <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3308      	adds	r3, #8
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800124a:	1898      	adds	r0, r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	4413      	add	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4619      	mov	r1, r3
 800125a:	f004 f83c 	bl	80052d6 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 800125e:	491a      	ldr	r1, [pc, #104]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3310      	adds	r3, #16
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
		}
		i++;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_Z22CNI_update_msg_contentmPhm+0x130>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	429a      	cmp	r2, r3
 8001284:	d219      	bcs.n	80012ba <_Z22CNI_update_msg_contentmPhm+0x126>
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	d10e      	bne.n	80012ba <_Z22CNI_update_msg_contentmPhm+0x126>
 800129c:	490a      	ldr	r1, [pc, #40]	; (80012c8 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3304      	adds	r3, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d102      	bne.n	80012ba <_Z22CNI_update_msg_contentmPhm+0x126>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d19e      	bne.n	80011f8 <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000258 	.word	0x20000258
 80012c8:	20000000 	.word	0x20000000

080012cc <_Z19CNI_get_msg_contentmPhmPm>:

CNI_status_t CNI_get_msg_content(uint32_t msgHandle, uint8_t *buffer, uint32_t lenBuffer, uint32_t *lenPayload)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
	uint32_t i;
	serviceID msgServiceID;
	uint32_t nodeID;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <_Z19CNI_get_msg_contentmPhmPm+0xec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d301      	bcc.n	80012e8 <_Z19CNI_get_msg_contentmPhmPm+0x1c>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e063      	b.n	80013b0 <_Z19CNI_get_msg_contentmPhmPm+0xe4>
	}

	i = msgHandle;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	61fb      	str	r3, [r7, #28]
	msgServiceID = CANmsgList[msgHandle].mServiceID_;
 80012ec:	4933      	ldr	r1, [pc, #204]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
	nodeID = CANmsgList[msgHandle].mNodeID_;
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3304      	adds	r3, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	617b      	str	r3, [r7, #20]
	(*lenPayload) = 0;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == msgServiceID) && (CANmsgList[i].mNodeID_ == nodeID) && ( (*lenPayload) < lenBuffer) )
 8001318:	e028      	b.n	800136c <_Z19CNI_get_msg_contentmPhmPm+0xa0>
	{
		my_copy_array_of_uint8(&buffer[*lenPayload], CANmsgList[i].mPayload_, CANmsgList[i].mLenPayload_);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	18d0      	adds	r0, r2, r3
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	3308      	adds	r3, #8
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001330:	1899      	adds	r1, r3, r2
 8001332:	4c22      	ldr	r4, [pc, #136]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4423      	add	r3, r4
 8001340:	3310      	adds	r3, #16
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	f003 ffc6 	bl	80052d6 <_Z22my_copy_array_of_uint8PhPKhm>
		(*lenPayload) += CANmsgList[i].mLenPayload_;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	481b      	ldr	r0, [pc, #108]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4403      	add	r3, r0
 800135c:	3310      	adds	r3, #16
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	18ca      	adds	r2, r1, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
		i++;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == msgServiceID) && (CANmsgList[i].mNodeID_ == nodeID) && ( (*lenPayload) < lenBuffer) )
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <_Z19CNI_get_msg_contentmPhmPm+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	429a      	cmp	r2, r3
 8001374:	d21b      	bcs.n	80013ae <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 8001376:	4911      	ldr	r1, [pc, #68]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	429a      	cmp	r2, r3
 800138a:	d110      	bne.n	80013ae <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 800138c:	490b      	ldr	r1, [pc, #44]	; (80013bc <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d104      	bne.n	80013ae <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d8b5      	bhi.n	800131a <_Z19CNI_get_msg_contentmPhmPm+0x4e>
	}

	return CNI_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3724      	adds	r7, #36	; 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	20000258 	.word	0x20000258
 80013bc:	20000000 	.word	0x20000000

080013c0 <_Z29attitudeEstimator_constructorff>:
#define PI 3.14159265

static attitudeEstimator_t _instance;

void attitudeEstimator_constructor(float alpha, float deltaT)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ca:	edc7 0a00 	vstr	s1, [r7]
	_instance.mAlpha_ = alpha;
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
	_instance.mDeltaT_ = deltaT;
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6053      	str	r3, [r2, #4]

	_instance.mOutputData_.mPitch_ = 0.0;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	_instance.mOutputData_.mRoll_ = 0.0;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]

	_instance.mIMUdata_.accelX = 0.0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
	_instance.mIMUdata_.accelY = 0.0;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
	_instance.mIMUdata_.accelZ = -1.0;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <_Z29attitudeEstimator_constructorff+0x68>)
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
	_instance.mIMUdata_.gyroX = 0.0;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
	_instance.mIMUdata_.gyroY = 0.0;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
	_instance.mIMUdata_.gyroZ = 0.0;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <_Z29attitudeEstimator_constructorff+0x64>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	200002f8 	.word	0x200002f8
 8001428:	bf800000 	.word	0xbf800000

0800142c <_Z30attitudeEstimator_set_imu_data7IMUData>:

void attitudeEstimator_set_imu_data(IMUData imuData)
{
 800142c:	b084      	sub	sp, #16
 800142e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800143a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//_instance.mIMUdata_ = imuData;
	_instance.mIMUdata_.accelX = (-1.0) * imuData.accelX;
 800143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f845 	bl	80004d0 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	603a      	str	r2, [r7, #0]
 800144c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001456:	f7ff fb2d 	bl	8000ab4 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 800145e:	6213      	str	r3, [r2, #32]
	_instance.mIMUdata_.accelY =          imuData.accelY;
 8001460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 8001464:	6253      	str	r3, [r2, #36]	; 0x24
	_instance.mIMUdata_.accelZ = (-1.0) * imuData.accelZ;
 8001466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f831 	bl	80004d0 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4692      	mov	sl, r2
 8001474:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001478:	4650      	mov	r0, sl
 800147a:	4659      	mov	r1, fp
 800147c:	f7ff fb1a 	bl	8000ab4 <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
	_instance.mIMUdata_.gyroX  = (-1.0) * imuData.gyroX;
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f821 	bl	80004d0 <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4690      	mov	r8, r2
 8001494:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001498:	4640      	mov	r0, r8
 800149a:	4649      	mov	r1, r9
 800149c:	f7ff fb0a 	bl	8000ab4 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 80014a4:	6153      	str	r3, [r2, #20]
	_instance.mIMUdata_.gyroY  =          imuData.gyroY;
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 80014aa:	6193      	str	r3, [r2, #24]
	_instance.mIMUdata_.gyroZ  = (-1.0) * imuData.gyroZ;
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f80e 	bl	80004d0 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4614      	mov	r4, r2
 80014ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7ff faf7 	bl	8000ab4 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <_Z30attitudeEstimator_set_imu_data7IMUData+0xb0>)
 80014ca:	61d3      	str	r3, [r2, #28]
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d6:	b004      	add	sp, #16
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200002f8 	.word	0x200002f8

080014e0 <_Z24attitudeEstimator_updatev>:


//void attitudeEstimator_update(float *accelData, float *gyroData)
void attitudeEstimator_update(void)
{
 80014e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e4:	ed2d 8b02 	vpush	{d8}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
	//float pitchAccel = atan2(-1 * accelData[POS_ACCEL_X], accelData[POS_ACCEL_Z]) * 180.0 / PI;
	//float rollAccel  = atan2(accelData[POS_ACCEL_Y], accelData[POS_ACCEL_Z]) * 180.0 / PI;

	float pitchAccel = atan2(_instance.mIMUdata_.accelX, -1.0 * _instance.mIMUdata_.accelZ) * 180.0 / PI;
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ffed 	bl	80004d0 <__aeabi_f2d>
 80014f6:	ec41 0b18 	vmov	d8, r0, r1
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffe6 	bl	80004d0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4692      	mov	sl, r2
 800150a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800150e:	ec4b ab11 	vmov	d1, sl, fp
 8001512:	eeb0 0a48 	vmov.f32	s0, s16
 8001516:	eef0 0a68 	vmov.f32	s1, s17
 800151a:	f008 fe81 	bl	800a220 <atan2>
 800151e:	ec51 0b10 	vmov	r0, r1, d0
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <_Z24attitudeEstimator_updatev+0x174>)
 8001528:	f7ff f82a 	bl	8000580 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	a344      	add	r3, pc, #272	; (adr r3, 8001648 <_Z24attitudeEstimator_updatev+0x168>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f94b 	bl	80007d4 <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fab5 	bl	8000ab4 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	607b      	str	r3, [r7, #4]
	float rollAccel  = atan2(-1.0 * _instance.mIMUdata_.accelY, -1.0 * _instance.mIMUdata_.accelZ) * 180.0 / PI;
 800154e:	4b40      	ldr	r3, [pc, #256]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffbc 	bl	80004d0 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4614      	mov	r4, r2
 800155e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ffb2 	bl	80004d0 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4690      	mov	r8, r2
 8001572:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001576:	ec49 8b11 	vmov	d1, r8, r9
 800157a:	ec45 4b10 	vmov	d0, r4, r5
 800157e:	f008 fe4f 	bl	800a220 <atan2>
 8001582:	ec51 0b10 	vmov	r0, r1, d0
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <_Z24attitudeEstimator_updatev+0x174>)
 800158c:	f7fe fff8 	bl	8000580 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	a32b      	add	r3, pc, #172	; (adr r3, 8001648 <_Z24attitudeEstimator_updatev+0x168>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f919 	bl	80007d4 <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa83 	bl	8000ab4 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	603b      	str	r3, [r7, #0]

	//_instance.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_Y] + _instance.mPitch_);
	//_instance.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_X] + _instance.mRoll_);

	_instance.mOutputData_.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroY + _instance.mOutputData_.mPitch_);
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80015da:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80015e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015f2:	edc3 7a02 	vstr	s15, [r3, #8]
	_instance.mOutputData_.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroX + _instance.mOutputData_.mRoll_);
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	edd7 7a00 	vldr	s15, [r7]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800160e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001614:	ed93 6a01 	vldr	s12, [r3, #4]
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 800161a:	edd3 7a05 	vldr	s15, [r3, #20]
 800161e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001624:	edd3 7a03 	vldr	s15, [r3, #12]
 8001628:	ee76 7a27 	vadd.f32	s15, s12, s15
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <_Z24attitudeEstimator_updatev+0x170>)
 8001636:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	ecbd 8b02 	vpop	{d8}
 8001644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001648:	53c8d4f1 	.word	0x53c8d4f1
 800164c:	400921fb 	.word	0x400921fb
 8001650:	200002f8 	.word	0x200002f8
 8001654:	40668000 	.word	0x40668000

08001658 <_Z27attitudeEstimator_read_dataP14attitudeData_t>:

void attitudeEstimator_read_data(attitudeData_t *outputData)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	(*outputData) = _instance.mOutputData_;
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <_Z27attitudeEstimator_read_dataP14attitudeData_t+0x24>)
 8001664:	3308      	adds	r3, #8
 8001666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800166a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200002f8 	.word	0x200002f8

08001680 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_CAN1_Init+0x68>)
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <MX_CAN1_Init+0x6c>)
 8001688:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_CAN1_Init+0x68>)
 800168c:	2206      	movs	r2, #6
 800168e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_CAN1_Init+0x68>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_CAN1_Init+0x68>)
 8001698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800169c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016a0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80016a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016bc:	2200      	movs	r2, #0
 80016be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_CAN1_Init+0x68>)
 80016d4:	f004 fdc4 	bl	8006260 <HAL_CAN_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80016de:	f003 fac7 	bl	8004c70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000324 	.word	0x20000324
 80016ec:	40006400 	.word	0x40006400

080016f0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_CAN2_Init+0x68>)
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <MX_CAN2_Init+0x6c>)
 80016f8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_CAN2_Init+0x68>)
 80016fc:	2206      	movs	r2, #6
 80016fe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_CAN2_Init+0x68>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_CAN2_Init+0x68>)
 8001708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800170c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_CAN2_Init+0x68>)
 8001710:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001714:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_CAN2_Init+0x68>)
 8001718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800171c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_CAN2_Init+0x68>)
 8001720:	2200      	movs	r2, #0
 8001722:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_CAN2_Init+0x68>)
 8001726:	2200      	movs	r2, #0
 8001728:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_CAN2_Init+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_CAN2_Init+0x68>)
 8001732:	2200      	movs	r2, #0
 8001734:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_CAN2_Init+0x68>)
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_CAN2_Init+0x68>)
 800173e:	2200      	movs	r2, #0
 8001740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_CAN2_Init+0x68>)
 8001744:	f004 fd8c 	bl	8006260 <HAL_CAN_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800174e:	f003 fa8f 	bl	8004c70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000034c 	.word	0x2000034c
 800175c:	40006800 	.word	0x40006800

08001760 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a41      	ldr	r2, [pc, #260]	; (8001884 <HAL_CAN_MspInit+0x124>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13a      	bne.n	80017f8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_CAN_MspInit+0x128>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_CAN_MspInit+0x128>)
 800178a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800178c:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <HAL_CAN_MspInit+0x128>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10b      	bne.n	80017ac <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a3c      	ldr	r2, [pc, #240]	; (800188c <HAL_CAN_MspInit+0x12c>)
 800179a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_CAN_MspInit+0x12c>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_CAN_MspInit+0x12c>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a36      	ldr	r2, [pc, #216]	; (800188c <HAL_CAN_MspInit+0x12c>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	6313      	str	r3, [r2, #48]	; 0x30
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_CAN_MspInit+0x12c>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017d6:	2309      	movs	r3, #9
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	482b      	ldr	r0, [pc, #172]	; (8001890 <HAL_CAN_MspInit+0x130>)
 80017e2:	f005 fda1 	bl	8007328 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2014      	movs	r0, #20
 80017ec:	f005 fd57 	bl	800729e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80017f0:	2014      	movs	r0, #20
 80017f2:	f005 fd70 	bl	80072d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80017f6:	e041      	b.n	800187c <HAL_CAN_MspInit+0x11c>
  else if(canHandle->Instance==CAN2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_CAN_MspInit+0x134>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d13c      	bne.n	800187c <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_CAN_MspInit+0x128>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_CAN_MspInit+0x128>)
 8001822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_CAN_MspInit+0x128>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d10b      	bne.n	8001844 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_CAN_MspInit+0x12c>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_CAN_MspInit+0x12c>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_CAN_MspInit+0x12c>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_CAN_MspInit+0x12c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800185c:	2360      	movs	r3, #96	; 0x60
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800186c:	2309      	movs	r3, #9
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <HAL_CAN_MspInit+0x130>)
 8001878:	f005 fd56 	bl	8007328 <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40006400 	.word	0x40006400
 8001888:	20000374 	.word	0x20000374
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400
 8001894:	40006800 	.word	0x40006800

08001898 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEC1Ev>:

      /**
       * @brief Constructs a %linear_congruential_engine random number
       *        generator engine with seed 1.
       */
      linear_congruential_engine() : linear_congruential_engine(default_seed)
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	2101      	movs	r1, #1
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f827 	bl	80018f6 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEC1Ej>
      { }
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZNSt24uniform_int_distributionImEC1Emm>:

      /**
       * @brief Constructs a uniform distribution object.
       */
      explicit
      uniform_int_distribution(_IntType __a,
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
			       _IntType __b
				 = __gnu_cxx::__int_traits<_IntType>::__max)
      : _M_param(__a, __b)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f824 	bl	8001912 <_ZNSt24uniform_int_distributionImE10param_typeC1Emm>
      { }
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZNSt24uniform_int_distributionIlEC1Ell>:
      uniform_int_distribution(_IntType __a,
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
      : _M_param(__a, __b)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f826 	bl	8001938 <_ZNSt24uniform_int_distributionIlE10param_typeC1Ell>
      { }
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEC1Ej>:
       *        is 1.
       *
       * @param __s The initial seed value.
       */
      explicit
      linear_congruential_engine(result_type __s)
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
      { seed(__s); }
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f82b 	bl	800195e <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZNSt24uniform_int_distributionImE10param_typeC1Emm>:
	param_type(_IntType __a,
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	: _M_a(__a), _M_b(__b)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]
	}
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZNSt24uniform_int_distributionIlE10param_typeC1Ell>:
	param_type(_IntType __a,
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	: _M_a(__a), _M_b(__b)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
	}
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj>:
   * Seeds the LCR with integral value @p __s, adjusted so that the
   * ring identity is never a member of the convergence set.
   */
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f81c 	bl	80019a6 <_ZNSt8__detail5__modIjLj2147483647ELj1ELj0EEET_S1_>
 800196e:	4603      	mov	r3, r0
	  && (__detail::__mod<_UIntType, __m>(__s) == 0))
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj+0x26>
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f000 f816 	bl	80019a6 <_ZNSt8__detail5__modIjLj2147483647ELj1ELj0EEET_S1_>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj+0x26>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj+0x28>
 8001984:	2300      	movs	r3, #0
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj+0x34>
	_M_x = 1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]
      else
	_M_x = __detail::__mod<_UIntType, __m>(__s);
    }
 8001990:	e005      	b.n	800199e <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EE4seedEj+0x40>
	_M_x = __detail::__mod<_UIntType, __m>(__s);
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f000 f807 	bl	80019a6 <_ZNSt8__detail5__modIjLj2147483647ELj1ELj0EEET_S1_>
 8001998:	4602      	mov	r2, r0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
    }
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_ZNSt8__detail5__modIjLj2147483647ELj1ELj0EEET_S1_>:
      __mod(_Tp __x)
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	    constexpr _Tp __a1 = __a ? __a : 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f806 	bl	80019c4 <_ZNSt8__detail4_ModIjLj2147483647ELj1ELj0ELb1ELb1EE6__calcEj>
 80019b8:	4603      	mov	r3, r0
 80019ba:	bf00      	nop
      }
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZNSt8__detail4_ModIjLj2147483647ELj1ELj0ELb1ELb1EE6__calcEj>:
	__calc(_Tp __x)
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	  _Tp __res = __a * __x + __c;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60fb      	str	r3, [r7, #12]
	    __res %= __m;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	2303      	movs	r3, #3
 80019d4:	fba3 1302 	umull	r1, r3, r3, r2
 80019d8:	1ad1      	subs	r1, r2, r3
 80019da:	0849      	lsrs	r1, r1, #1
 80019dc:	440b      	add	r3, r1
 80019de:	0f99      	lsrs	r1, r3, #30
 80019e0:	460b      	mov	r3, r1
 80019e2:	07db      	lsls	r3, r3, #31
 80019e4:	1a5b      	subs	r3, r3, r1
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]
	  return __res;
 80019ea:	68fb      	ldr	r3, [r7, #12]
	}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_Z41__static_initialization_and_destruction_0ii>:

			return HANDLED;
	}

	return IGNORED;
}
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d112      	bne.n	8001a2e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10d      	bne.n	8001a2e <_Z41__static_initialization_and_destruction_0ii+0x36>
static std::default_random_engine generator;
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a14:	f7ff ff40 	bl	8001898 <_ZNSt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEC1Ev>
static std::uniform_int_distribution<uint32_t> randomInt(MIN_RND_TICK_FAULT_INJECT, MAX_RND_TICK_FAULT_INJECT);
 8001a18:	2264      	movs	r2, #100	; 0x64
 8001a1a:	2114      	movs	r1, #20
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001a1e:	f7ff ff48 	bl	80018b2 <_ZNSt24uniform_int_distributionImEC1Emm>
static std::uniform_int_distribution<int32_t> randomJump(-10,10);
 8001a22:	220a      	movs	r2, #10
 8001a24:	f06f 0109 	mvn.w	r1, #9
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001a2a:	f7ff ff53 	bl	80018d4 <_ZNSt24uniform_int_distributionIlEC1Ell>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000378 	.word	0x20000378
 8001a3c:	2000037c 	.word	0x2000037c
 8001a40:	20000384 	.word	0x20000384

08001a44 <_GLOBAL__sub_I__Z32faultInjectorIMUbias_constructorP22faultInjectorIMUbias_tm>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ffd3 	bl	80019f8 <_Z41__static_initialization_and_destruction_0ii>
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a36      	ldr	r2, [pc, #216]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <MX_GPIO_Init+0x13c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8001afa:	2200      	movs	r2, #0
 8001afc:	217a      	movs	r1, #122	; 0x7a
 8001afe:	4825      	ldr	r0, [pc, #148]	; (8001b94 <MX_GPIO_Init+0x140>)
 8001b00:	f005 fdbe 	bl	8007680 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	211c      	movs	r1, #28
 8001b08:	4823      	ldr	r0, [pc, #140]	; (8001b98 <MX_GPIO_Init+0x144>)
 8001b0a:	f005 fdb9 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b14:	4821      	ldr	r0, [pc, #132]	; (8001b9c <MX_GPIO_Init+0x148>)
 8001b16:	f005 fdb3 	bl	8007680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8001b1a:	237a      	movs	r3, #122	; 0x7a
 8001b1c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4818      	ldr	r0, [pc, #96]	; (8001b94 <MX_GPIO_Init+0x140>)
 8001b32:	f005 fbf9 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 8001b36:	231c      	movs	r3, #28
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_GPIO_Init+0x144>)
 8001b4e:	f005 fbeb 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_GPIO_Init+0x148>)
 8001b6c:	f005 fbdc 	bl	8007328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 8001b70:	2308      	movs	r3, #8
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_GPIO_Init+0x14c>)
 8001b84:	f005 fbd0 	bl	8007328 <HAL_GPIO_Init>

}
 8001b88:	bf00      	nop
 8001b8a:	3730      	adds	r7, #48	; 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020c00 	.word	0x40020c00

08001ba4 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f854 	bl	8001c62 <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	829a      	strh	r2, [r3, #20]
    }
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8a9b      	ldrh	r3, [r3, #20]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f005 fd65 	bl	80076b2 <HAL_GPIO_TogglePin>
    }
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f000 f80e 	bl	8001c1c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6918      	ldr	r0, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8a9b      	ldrh	r3, [r3, #20]
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f005 fd36 	bl	8007680 <HAL_GPIO_WritePin>
    }
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8001c2e:	2300      	movs	r3, #0
	}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	6053      	str	r3, [r2, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	6053      	str	r3, [r2, #4]
 8001c74:	6093      	str	r3, [r2, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ffdf 	bl	8001c3c <_ZNSt14_Function_baseC1Ev>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_I2C4_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <MX_I2C4_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001ccc:	f005 fd0c 	bl	80076e8 <HAL_I2C_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001cd6:	f002 ffcb 	bl	8004c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cde:	f005 fd93 	bl	8007808 <HAL_I2CEx_ConfigAnalogFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f002 ffc2 	bl	8004c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_I2C4_Init+0x74>)
 8001cf0:	f005 fdd5 	bl	800789e <HAL_I2CEx_ConfigDigitalFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f002 ffb9 	bl	8004c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000038c 	.word	0x2000038c
 8001d08:	40006000 	.word	0x40006000
 8001d0c:	20404768 	.word	0x20404768

08001d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0aa      	sub	sp, #168	; 0xa8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	2284      	movs	r2, #132	; 0x84
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 fdad 	bl	800a890 <memset>
  if(i2cHandle->Instance==I2C4)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_I2C_MspInit+0xb4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d13d      	bne.n	8001dbc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f006 faf5 	bl	8008340 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001d5c:	f002 ff88 	bl	8004c70 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480b      	ldr	r0, [pc, #44]	; (8001dcc <HAL_I2C_MspInit+0xbc>)
 8001da0:	f005 fac2 	bl	8007328 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_I2C_MspInit+0xb8>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	37a8      	adds	r7, #168	; 0xa8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40006000 	.word	0x40006000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40021400 	.word	0x40021400

08001dd0 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2203      	movs	r2, #3
 8001e16:	4798      	blx	r3
    }
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7a1b      	ldrb	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <_ZN9iPHandler4lockEv+0x14>
			return false;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e003      	b.n	8001e3e <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	721a      	strb	r2, [r3, #8]
		return true;
 8001e3c:	2301      	movs	r3, #1
	}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7a1b      	ldrb	r3, [r3, #8]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e003      	b.n	8001e6c <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	721a      	strb	r2, [r3, #8]
		return true;
 8001e6a:	2301      	movs	r3, #1
	}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	b2db      	uxtb	r3, r3
		}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	b2dc      	uxtb	r4, r3
 8001f38:	2105      	movs	r1, #5
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7ff ffae 	bl	8001e9c <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8001f40:	4603      	mov	r3, r0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4323      	orrs	r3, r4
 8001f46:	b2db      	uxtb	r3, r3
        }
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}

08001f50 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f023 030f 	bic.w	r3, r3, #15
 8001f62:	b2dc      	uxtb	r4, r3
 8001f64:	2100      	movs	r1, #0
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f7ff ff86 	bl	8001e78 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4323      	orrs	r3, r4
 8001f72:	b2db      	uxtb	r3, r3
        }
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	b2dc      	uxtb	r4, r3
 8001f90:	2105      	movs	r1, #5
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f7ff ffa6 	bl	8001ee4 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4323      	orrs	r3, r4
 8001f9e:	b2db      	uxtb	r3, r3
        }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	b2dc      	uxtb	r4, r3
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f7ff ff7e 	bl	8001ec0 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4323      	orrs	r3, r4
 8001fca:	b2db      	uxtb	r3, r3
        }
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <_ZN4iIMUC1Ev+0x1c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	0800aae4 	.word	0x0800aae4

08001ff4 <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2206      	movs	r2, #6
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2206      	movs	r2, #6
 8002006:	705a      	strb	r2, [r3, #1]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2230      	movs	r2, #48	; 0x30
 800200c:	709a      	strb	r2, [r3, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	70da      	strb	r2, [r3, #3]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	711a      	strb	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	715a      	strb	r2, [r3, #5]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	719a      	strb	r2, [r3, #6]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffc5 	bl	8001fd4 <_ZN4iIMUC1Ev>
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3304      	adds	r3, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f001 f935 	bl	80032c4 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8002062:	4615      	mov	r5, r2
 8002064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002070:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ffba 	bl	8001ff4 <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002096:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fb79 	bl	80047b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80020c6:	eef0 7a40 	vmov.f32	s15, s0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fbce 	bl	8004878 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fbe7 	bl	80048c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fc3c 	bl	8004980 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bdb0      	pop	{r4, r5, r7, pc}
 800211c:	0800aa94 	.word	0x0800aa94

08002120 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af04      	add	r7, sp, #16
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 800212e:	2300      	movs	r3, #0
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2300      	movs	r3, #0
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	23ff      	movs	r3, #255	; 0xff
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff ff77 	bl	8002034 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 ff30 	bl	8002fb4 <_ZN8ICM426888icm426886enableEv>
    }
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	731a      	strb	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	735a      	strb	r2, [r3, #13]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	739a      	strb	r2, [r3, #14]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 8002192:	b580      	push	{r7, lr}
 8002194:	b088      	sub	sp, #32
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ffdc 	bl	800215e <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d033      	beq.n	800221a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 80021b6:	2376      	movs	r3, #118	; 0x76
 80021b8:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80021ce:	e002      	b.n	80021d6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80021d6:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7ffa      	ldrb	r2, [r7, #31]
 80021dc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80021f8:	f107 020c 	add.w	r2, r7, #12
 80021fc:	4798      	blx	r3
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 800220e:	2301      	movs	r3, #1
 8002210:	e004      	b.n	800221c <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 800221a:	2300      	movs	r3, #0
    }
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff90 	bl	800215e <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 800223e:	2100      	movs	r1, #0
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ffa6 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002246:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	e055      	b.n	80022fe <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 8002252:	231d      	movs	r3, #29
 8002254:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 8002256:	230e      	movs	r3, #14
 8002258:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <_ZN8ICM426888icm426889save_dataEv+0x48>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800226a:	e002      	b.n	8002272 <_ZN8ICM426888icm426889save_dataEv+0x4e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002272:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800227a:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fdcd 	bl	8001e22 <_ZN9iPHandler4lockEv>
 8002288:	4603      	mov	r3, r0
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8002294:	2305      	movs	r3, #5
 8002296:	e032      	b.n	80022fe <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f107 0108 	add.w	r1, r7, #8
 80022ac:	4610      	mov	r0, r2
 80022ae:	4798      	blx	r3
 80022b0:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 80022b8:	69b8      	ldr	r0, [r7, #24]
 80022ba:	f000 ffdf 	bl	800327c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 80022be:	4603      	mov	r3, r0
 80022c0:	e01d      	b.n	80022fe <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d117      	bne.n	80022fc <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7006 	add.w	r0, r3, #536	; 0x218
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	7a7a      	ldrb	r2, [r7, #9]
 80022dc:	4619      	mov	r1, r3
 80022de:	f008 fb5f 	bl	800a9a0 <memcpy>
            m_handler->unlock();
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fdae 	bl	8001e4a <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 ff48 	bl	800318c <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 80022fc:	69fb      	ldr	r3, [r7, #28]
    }
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 ff37 	bl	800318c <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fd90 	bl	8001e4a <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 800233e:	2300      	movs	r3, #0
        
    }
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 ffc5 	bl	8003300 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 8002376:	4603      	mov	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 800238a:	2304      	movs	r3, #4
    }
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fed8 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80023ae:	2100      	movs	r1, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff feee 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e04e      	b.n	8002468 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80023d0:	69f9      	ldr	r1, [r7, #28]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fdbc 	bl	8001f50 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80023d8:	4603      	mov	r3, r0
 80023da:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7efa      	ldrb	r2, [r7, #27]
 80023e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 80023e4:	234f      	movs	r3, #79	; 0x4f
 80023e6:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80023fc:	e002      	b.n	8002404 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002404:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800240c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3304      	adds	r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002426:	f107 0208 	add.w	r2, r7, #8
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800243c:	2301      	movs	r3, #1
 800243e:	e013      	b.n	8002468 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7efa      	ldrb	r2, [r7, #27]
 8002444:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002456:	4618      	mov	r0, r3
 8002458:	f002 f9ae 	bl	80047b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 800245c:	eef0 7a40 	vmov.f32	s15, s0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 8002466:	2300      	movs	r3, #0
    }
 8002468:	4618      	mov	r0, r3
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fe6a 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800248a:	2100      	movs	r1, #0
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fe80 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e04e      	b.n	8002544 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 80024ac:	69f9      	ldr	r1, [r7, #28]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fd38 	bl	8001f24 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 80024b4:	4603      	mov	r3, r0
 80024b6:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7efa      	ldrb	r2, [r7, #27]
 80024bc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 80024c0:	234f      	movs	r3, #79	; 0x4f
 80024c2:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80024d8:	e002      	b.n	80024e0 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80024e0:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80024e8:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	4798      	blx	r3
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8002518:	2301      	movs	r3, #1
 800251a:	e013      	b.n	8002544 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7efa      	ldrb	r2, [r7, #27]
 8002520:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002532:	4618      	mov	r0, r3
 8002534:	f002 f9a0 	bl	8004878 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8002538:	eef0 7a40 	vmov.f32	s15, s0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 8002542:	2300      	movs	r3, #0

    } 
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fdfc 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002566:	2100      	movs	r1, #0
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fe12 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800257e:	2301      	movs	r3, #1
 8002580:	e04e      	b.n	8002620 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8002588:	69f9      	ldr	r1, [r7, #28]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fd0c 	bl	8001fa8 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 8002590:	4603      	mov	r3, r0
 8002592:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7efa      	ldrb	r2, [r7, #27]
 8002598:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 800259c:	2350      	movs	r3, #80	; 0x50
 800259e:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80025b4:	e002      	b.n	80025bc <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80025bc:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80025c4:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80025de:	f107 0208 	add.w	r2, r7, #8
 80025e2:	4798      	blx	r3
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e013      	b.n	8002620 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7efa      	ldrb	r2, [r7, #27]
 80025fc:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800260e:	4618      	mov	r0, r3
 8002610:	f002 f956 	bl	80048c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8002614:	eef0 7a40 	vmov.f32	s15, s0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 800261e:	2300      	movs	r3, #0
    }
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd8e 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002642:	2100      	movs	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fda4 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800265a:	2301      	movs	r3, #1
 800265c:	e04e      	b.n	80026fc <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8002664:	69f9      	ldr	r1, [r7, #28]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fc88 	bl	8001f7c <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 800266c:	4603      	mov	r3, r0
 800266e:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7efa      	ldrb	r2, [r7, #27]
 8002674:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8002678:	2350      	movs	r3, #80	; 0x50
 800267a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 800267c:	2301      	movs	r3, #1
 800267e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002690:	e002      	b.n	8002698 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002698:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80026a0:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80026ba:	f107 0208 	add.w	r2, r7, #8
 80026be:	4798      	blx	r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e013      	b.n	80026fc <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7efa      	ldrb	r2, [r7, #27]
 80026d8:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 f948 	bl	8004980 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80026f0:	eef0 7a40 	vmov.f32	s15, s0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80026fa:	2300      	movs	r3, #0
    }
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002712:	ee07 3a90 	vmov	s15, r3
    }
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002732:	ee07 3a90 	vmov	s15, r3
    }
 8002736:	eeb0 0a67 	vmov.f32	s0, s15
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002752:	ee07 3a90 	vmov	s15, r3
    }
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8002772:	ee07 3a90 	vmov	s15, r3
    }
 8002776:	eeb0 0a67 	vmov.f32	s0, s15
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 8002792:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027ac <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 8002796:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800279a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800279e:	eeb0 0a67 	vmov.f32	s0, s15
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	47000000 	.word	0x47000000

080027b0 <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 80027be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027d8 <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 80027c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027c6:	eef0 7a66 	vmov.f32	s15, s13
    }
 80027ca:	eeb0 0a67 	vmov.f32	s0, s15
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	47000000 	.word	0x47000000

080027dc <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 80027dc:	b580      	push	{r7, lr}
 80027de:	ed2d 8b02 	vpush	{d8}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
 80027ec:	4613      	mov	r3, r2
 80027ee:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	78bb      	ldrb	r3, [r7, #2]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 80027fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3340      	adds	r3, #64	; 0x40
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	eef0 7a40 	vmov.f32	s15, s0
 800281a:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 800281e:	eeb0 0a67 	vmov.f32	s0, s15
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	ecbd 8b02 	vpop	{d8}
 800282a:	bd80      	pop	{r7, pc}

0800282c <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	ed2d 8b02 	vpush	{d8}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
 800283c:	4613      	mov	r3, r2
 800283e:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	78bb      	ldrb	r3, [r7, #2]
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 800284e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	333c      	adds	r3, #60	; 0x3c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	eef0 7a40 	vmov.f32	s15, s0
 800286a:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 800286e:	eeb0 0a67 	vmov.f32	s0, s15
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	ecbd 8b02 	vpop	{d8}
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f82c 	bl	80028e6 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e01c      	b.n	80028de <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8eb 	bl	8002a80 <_ZN8ICM426888icm4268817write_config_FIFOEv>
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	e00e      	b.n	80028de <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9d5 	bl	8002c70 <_ZN8ICM426888icm4268816write_config_intEv>
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e000      	b.n	80028de <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 80028dc:	68fb      	ldr	r3, [r7, #12]
        
    }
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fc33 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fc49 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b1      	b.n	8002a78 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7ff fafe 	bl	8001f24 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8002928:	4603      	mov	r3, r0
 800292a:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8002932:	7ffb      	ldrb	r3, [r7, #31]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fb0a 	bl	8001f50 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 800293c:	4603      	mov	r3, r0
 800293e:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7ff fb14 	bl	8001f7c <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8002954:	4603      	mov	r3, r0
 8002956:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800295e:	7fbb      	ldrb	r3, [r7, #30]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fb20 	bl	8001fa8 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 8002968:	4603      	mov	r3, r0
 800296a:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 800296c:	2301      	movs	r3, #1
 800296e:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002980:	e002      	b.n	8002988 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002988:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002990:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 8002992:	234f      	movs	r3, #79	; 0x4f
 8002994:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7ffa      	ldrb	r2, [r7, #31]
 800299a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3304      	adds	r3, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80029b6:	f107 020c 	add.w	r2, r7, #12
 80029ba:	4798      	blx	r3
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e053      	b.n	8002a78 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7fba      	ldrb	r2, [r7, #30]
 80029d4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 80029d8:	2350      	movs	r3, #80	; 0x50
 80029da:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80029f4:	f107 020c 	add.w	r2, r7, #12
 80029f8:	4798      	blx	r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e034      	b.n	8002a78 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7ffa      	ldrb	r2, [r7, #31]
 8002a12:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7fba      	ldrb	r2, [r7, #30]
 8002a1a:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fec7 	bl	80047b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8002a2a:	eef0 7a40 	vmov.f32	s15, s0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 ff1c 	bl	8004878 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 ff35 	bl	80048c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8002a56:	eef0 7a40 	vmov.f32	s15, s0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ff8a 	bl	8004980 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 8002a76:	2300      	movs	r3, #0
    }
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb66 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002a92:	2100      	movs	r1, #0
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fb7c 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0dc      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 8002aae:	234c      	movs	r3, #76	; 0x4c
 8002ab0:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002ac6:	e002      	b.n	8002ace <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002ace:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002ad6:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8002ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f107 020c 	add.w	r2, r7, #12
 8002afc:	f107 010b 	add.w	r1, r7, #11
 8002b00:	4798      	blx	r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0a8      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 8002b16:	7afa      	ldrb	r2, [r7, #11]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8002b1e:	2316      	movs	r3, #22
 8002b20:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f9ed 	bl	8001f08 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3304      	adds	r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f107 020c 	add.w	r2, r7, #12
 8002b48:	f107 010a 	add.w	r1, r7, #10
 8002b4c:	4798      	blx	r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e082      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 8002b62:	7aba      	ldrb	r2, [r7, #10]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d078      	beq.n	8002c66 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8002b82:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 8002b94:	235f      	movs	r3, #95	; 0x5f
 8002b96:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7ffa      	ldrb	r2, [r7, #31]
 8002b9c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	4798      	blx	r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e04a      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8002bd2:	2360      	movs	r3, #96	; 0x60
 8002bd4:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7fba      	ldrb	r2, [r7, #30]
 8002bda:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3304      	adds	r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	4798      	blx	r3
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e02b      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8002c10:	2361      	movs	r3, #97	; 0x61
 8002c12:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7f7a      	ldrb	r2, [r7, #29]
 8002c18:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002c34:	f107 020c 	add.w	r2, r7, #12
 8002c38:	4798      	blx	r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00c      	b.n	8002c68 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7ffa      	ldrb	r2, [r7, #31]
 8002c52:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7fba      	ldrb	r2, [r7, #30]
 8002c5a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7f7a      	ldrb	r2, [r7, #29]
 8002c62:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 8002c66:	2300      	movs	r3, #0
    }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c7c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c80:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fa69 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 8002c8c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c90:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002c98:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c9c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	f7ff fa75 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e174      	b.n	8002fa6 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8002cbc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002cc0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002cc8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ccc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8002cda:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002cde:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002ce8:	e006      	b.n	8002cf8 <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8002cea:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002cee:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002cf8:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002cfc:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8002d00:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8002d02:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d06:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002d10:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d14:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002d18:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8002d1a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d1e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2c:	f000 80bb 	beq.w	8002ea6 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8002d30:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d34:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d44:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d52:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002d56:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 8002d58:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d5c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d74:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 8002d78:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 8002d7a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d7e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002d82:	2265      	movs	r2, #101	; 0x65
 8002d84:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 8002d86:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d8a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002d94:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002d98:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f107 020c 	add.w	r2, r7, #12
 8002dac:	f107 010a 	add.w	r1, r7, #10
 8002db0:	4798      	blx	r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0ef      	b.n	8002fa6 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8002dc6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002dca:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d034      	beq.n	8002e42 <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8002dd8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ddc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002de6:	461c      	mov	r4, r3
 8002de8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002dec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002df8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e04:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8002e08:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e0c:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8002e10:	460b      	mov	r3, r1
 8002e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e16:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e1a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e1e:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8002e22:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e26:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002e2a:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f000 fae1 	bl	80033f6 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 faff 	bl	800343e <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8002e40:	e031      	b.n	8002ea6 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8002e42:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e46:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002e50:	461c      	mov	r4, r3
 8002e52:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8002e54:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e60:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8002e64:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8002e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e70:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002e74:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002e7e:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002e82:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8002e86:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002e8a:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8002e8e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	f000 fbef 	bl	8003676 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8002e98:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 fc05 	bl	80036ae <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8002ea4:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8002ea6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002eaa:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d04e      	beq.n	8002f58 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8002eba:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ebe:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	b25a      	sxtb	r2, r3
 8002ece:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ed2:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ee4:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002ee8:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8002eea:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002eee:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	2301      	movs	r3, #1
 8002efe:	4093      	lsls	r3, r2
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f06:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8002f0a:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8002f0c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f10:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002f14:	2266      	movs	r2, #102	; 0x66
 8002f16:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8002f18:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f1c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002f26:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f2a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3304      	adds	r3, #4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f107 020c 	add.w	r2, r7, #12
 8002f3e:	f107 0109 	add.w	r1, r7, #9
 8002f42:	4798      	blx	r3
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e026      	b.n	8002fa6 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8002f58:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f5c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002f60:	2214      	movs	r2, #20
 8002f62:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8002f64:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f68:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002f72:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002f76:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3304      	adds	r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	f107 010b 	add.w	r1, r7, #11
 8002f8e:	4798      	blx	r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8002fa4:	2300      	movs	r3, #0
    }
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	0800aa70 	.word	0x0800aa70

08002fb4 <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff f8cc 	bl	800215e <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff f8e2 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e038      	b.n	8003054 <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8002fe2:	234e      	movs	r3, #78	; 0x4e
 8002fe4:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <_ZN8ICM426888icm426886enableEv+0x48>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002ffa:	e002      	b.n	8003002 <_ZN8ICM426888icm426886enableEv+0x4e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8003002:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3304      	adds	r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f107 0208 	add.w	r2, r7, #8
 800301a:	4910      	ldr	r1, [pc, #64]	; (800305c <_ZN8ICM426888icm426886enableEv+0xa8>)
 800301c:	4798      	blx	r3
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 800302e:	2301      	movs	r3, #1
 8003030:	e010      	b.n	8003054 <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3344      	adds	r3, #68	; 0x44
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 8003052:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	0800aa88 	.word	0x0800aa88

08003060 <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f876 	bl	800215e <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff f88a 	bl	8002192 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 800308e:	2301      	movs	r3, #1
 8003090:	e076      	b.n	8003180 <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <_ZN8ICM426888icm426887disableEv+0x48>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80030a6:	e002      	b.n	80030ae <_ZN8ICM426888icm426887disableEv+0x4e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80030ae:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 80030b0:	2365      	movs	r3, #101	; 0x65
 80030b2:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3304      	adds	r3, #4
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f107 0210 	add.w	r2, r7, #16
 80030ca:	f107 010f 	add.w	r1, r7, #15
 80030ce:	4798      	blx	r3
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e04d      	b.n	8003180 <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 80030e4:	2366      	movs	r3, #102	; 0x66
 80030e6:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3304      	adds	r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f107 0210 	add.w	r2, r7, #16
 80030fe:	f107 010f 	add.w	r1, r7, #15
 8003102:	4798      	blx	r3
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 8003114:	2301      	movs	r3, #1
 8003116:	e033      	b.n	8003180 <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8003118:	2314      	movs	r3, #20
 800311a:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3304      	adds	r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f107 0210 	add.w	r2, r7, #16
 8003132:	f107 010f 	add.w	r1, r7, #15
 8003136:	4798      	blx	r3
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8003148:	2301      	movs	r3, #1
 800314a:	e019      	b.n	8003180 <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 800314c:	234e      	movs	r3, #78	; 0x4e
 800314e:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3304      	adds	r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f107 0210 	add.w	r2, r7, #16
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <_ZN8ICM426888icm426887disableEv+0x128>)
 8003168:	4798      	blx	r3
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 800317e:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	0800aa89 	.word	0x0800aa89

0800318c <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 800318c:	b5b0      	push	{r4, r5, r7, lr}
 800318e:	b08e      	sub	sp, #56	; 0x38
 8003190:	af04      	add	r7, sp, #16
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f001 fc0e 	bl	80049c4 <_ZN8ICM4268815convertTempDataEhh>
 80031a8:	eef0 7a40 	vmov.f32	s15, s0
 80031ac:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3302      	adds	r3, #2
 80031b4:	7819      	ldrb	r1, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	3303      	adds	r3, #3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fb34 	bl	800282c <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80031c4:	eef0 7a40 	vmov.f32	s15, s0
 80031c8:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	3304      	adds	r3, #4
 80031d0:	7819      	ldrb	r1, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3305      	adds	r3, #5
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fb26 	bl	800282c <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80031e0:	eef0 7a40 	vmov.f32	s15, s0
 80031e4:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	3306      	adds	r3, #6
 80031ec:	7819      	ldrb	r1, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3307      	adds	r3, #7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fb18 	bl	800282c <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80031fc:	eef0 7a40 	vmov.f32	s15, s0
 8003200:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	3308      	adds	r3, #8
 8003208:	7819      	ldrb	r1, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	3309      	adds	r3, #9
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fae2 	bl	80027dc <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8003218:	eef0 7a40 	vmov.f32	s15, s0
 800321c:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	330a      	adds	r3, #10
 8003224:	7819      	ldrb	r1, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	330b      	adds	r3, #11
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fad4 	bl	80027dc <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8003234:	eef0 7a40 	vmov.f32	s15, s0
 8003238:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	7819      	ldrb	r1, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	330d      	adds	r3, #13
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fac6 	bl	80027dc <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8003250:	eef0 7a40 	vmov.f32	s15, s0
 8003254:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1d1d      	adds	r5, r3, #4
 800325c:	466c      	mov	r4, sp
 800325e:	f107 0318 	add.w	r3, r7, #24
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800326e:	4628      	mov	r0, r5
 8003270:	f000 fa3c 	bl	80036ec <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 8003274:	bf00      	nop
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bdb0      	pop	{r4, r5, r7, pc}

0800327c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d012      	beq.n	80032b0 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b03      	cmp	r3, #3
 800328e:	dc09      	bgt.n	80032a4 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d006      	beq.n	80032aa <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 800329c:	e002      	b.n	80032a4 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
    		break;
 80032a2:	e008      	b.n	80032b6 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 80032a4:	2301      	movs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
    		break;
 80032a8:	e005      	b.n	80032b6 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 80032aa:	2305      	movs	r3, #5
 80032ac:	60fb      	str	r3, [r7, #12]
    		break;
 80032ae:	e002      	b.n	80032b6 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 80032b0:	2303      	movs	r3, #3
 80032b2:	60fb      	str	r3, [r7, #12]
    		break;
 80032b4:	bf00      	nop

    	}

    	return ret;
 80032b6:	68fb      	ldr	r3, [r7, #12]
    }
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	801a      	strh	r2, [r3, #0]
            
        }
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8003300:	b4b0      	push	{r4, r5, r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8003314:	2300      	movs	r3, #0
 8003316:	e040      	b.n	800339a <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800331e:	4619      	mov	r1, r3
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a5b      	subs	r3, r3, r1
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	4605      	mov	r5, r0
 8003330:	1d1c      	adds	r4, r3, #4
 8003332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003336:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800333a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8003372:	3301      	adds	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8003382:	2b10      	cmp	r3, #16
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8003398:	2301      	movs	r3, #1
        }
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bcb0      	pop	{r4, r5, r7}
 80033a2:	4770      	bx	lr

080033a4 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fa33 	bl	8003820 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 0208 	add.w	r2, r3, #8
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f7ff ffdc 	bl	80033a4 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 80033f6:	b590      	push	{r4, r7, lr}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8003402:	68b8      	ldr	r0, [r7, #8]
 8003404:	f000 f9d7 	bl	80037b6 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003408:	4604      	mov	r4, r0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9de 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	4621      	mov	r1, r4
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f9e3 	bl	80037e2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fce4 	bl	8001dfc <_ZNSt14_Function_baseD1Ev>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f000 f9f9 	bl	8003840 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 800344e:	4602      	mov	r2, r0
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f9fe 	bl	8003858 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fa28 	bl	80038b8 <_ZNSt8functionIFvvEE4swapERS1_>
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ffd9 	bl	8003424 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8003472:	687b      	ldr	r3, [r7, #4]
	}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_ZN4iIMUC1EOS_>:
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <_ZN4iIMUC1EOS_+0x20>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	0800aae4 	.word	0x0800aae4

080034a0 <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ffe3 	bl	800347c <_ZN4iIMUC1EOS_>
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	1d10      	adds	r0, r2, #4
 80034c2:	3304      	adds	r3, #4
 80034c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80034c8:	4619      	mov	r1, r3
 80034ca:	f007 fa69 	bl	800a9a0 <memcpy>
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 80034d6:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 80034f2:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80034f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f502 7406 	add.w	r4, r2, #536	; 0x218
 800350a:	f503 7506 	add.w	r5, r3, #536	; 0x218
 800350e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003512:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003522:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8003526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352a:	6018      	str	r0, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	8019      	strh	r1, [r3, #0]
 8003530:	3302      	adds	r3, #2
 8003532:	0c0a      	lsrs	r2, r1, #16
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdb0      	pop	{r4, r5, r7, pc}
 80035d0:	0800aa94 	.word	0x0800aa94

080035d4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5b 	bl	80034a0 <_ZN8ICM426888icm42688C1EOS0_>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f9b3 	bl	8003970 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1d1a      	adds	r2, r3, #4
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7ff ffdd 	bl	80035d4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ffdd 	bl	80035f4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003656:	e883 0003 	stmia.w	r3, {r0, r1}
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f103 0208 	add.w	r2, r3, #8
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3308      	adds	r3, #8
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7ff ffdc 	bl	8003624 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 8003676:	b5b0      	push	{r4, r5, r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	f000 f938 	bl	80038fa <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 800368a:	4604      	mov	r4, r0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f89d 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003692:	4605      	mov	r5, r0
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f000 f93b 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800369a:	4603      	mov	r3, r0
 800369c:	462a      	mov	r2, r5
 800369e:	4621      	mov	r1, r4
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f940 	bl	8003926 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bdb0      	pop	{r4, r5, r7, pc}

080036ae <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f000 f969 	bl	8003990 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80036be:	4602      	mov	r2, r0
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f96e 	bl	80039a8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 80036cc:	f107 0308 	add.w	r3, r7, #8
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f8f0 	bl	80038b8 <_ZNSt8functionIFvvEE4swapERS1_>
 80036d8:	f107 0308 	add.w	r3, r7, #8
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fea1 	bl	8003424 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80036e2:	687b      	ldr	r3, [r7, #4]
	}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 80036ec:	b084      	sub	sp, #16
 80036ee:	b4b0      	push	{r4, r5, r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	f107 001c 	add.w	r0, r7, #28
 80036fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003704:	4619      	mov	r1, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a5b      	subs	r3, r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	1d1c      	adds	r4, r3, #4
 8003714:	f107 051c 	add.w	r5, r7, #28
 8003718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800371a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800371c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003732:	3301      	adds	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003742:	2b10      	cmp	r3, #16
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10f      	bne.n	8003782 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d005      	beq.n	8003778 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8003772:	3301      	adds	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	e000      	b.n	800377a <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 8003778:	2200      	movs	r2, #0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8003780:	e012      	b.n	80037a8 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	2b10      	cmp	r3, #16
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 80037a8:	2301      	movs	r3, #1
        }
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bcb0      	pop	{r4, r5, r7}
 80037b2:	b004      	add	sp, #16
 80037b4:	4770      	bx	lr

080037b6 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 80037e2:	b590      	push	{r4, r7, lr}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 80037ee:	68b8      	ldr	r0, [r7, #8]
 80037f0:	f000 f90a 	bl	8003a08 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f103 0408 	add.w	r4, r3, #8
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffe0 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800380c:	4603      	mov	r3, r0
 800380e:	4619      	mov	r1, r3
 8003810:	4620      	mov	r0, r4
 8003812:	f000 f904 	bl	8003a1e <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fecf 	bl	80035d4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	461a      	mov	r2, r3
 8003866:	2300      	movs	r3, #0
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe f9e3 	bl	8001c3c <_ZNSt14_Function_baseC1Ev>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800387c:	6838      	ldr	r0, [r7, #0]
 800387e:	f000 f8e1 	bl	8003a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8003888:	687c      	ldr	r4, [r7, #4]
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f7ff ffd8 	bl	8003840 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	4620      	mov	r0, r4
 8003896:	f000 f8e0 	bl	8003a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 800389e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 80038a4:	609a      	str	r2, [r3, #8]
	}
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	08003a7f 	.word	0x08003a7f
 80038b4:	08003a9d 	.word	0x08003a9d

080038b8 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f911 	bl	8003af0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f103 0208 	add.w	r2, r3, #8
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 f93a 	bl	8003b54 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f103 020c 	add.w	r2, r3, #12
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 f95b 	bl	8003ba8 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 8003926:	b5b0      	push	{r4, r5, r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f000 f956 	bl	8003be6 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003942:	e883 0003 	stmia.w	r3, {r0, r1}
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f103 0408 	add.w	r4, r3, #8
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff3d 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003952:	4605      	mov	r5, r0
 8003954:	6838      	ldr	r0, [r7, #0]
 8003956:	f7ff ffdb 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	4629      	mov	r1, r5
 8003960:	4620      	mov	r0, r4
 8003962:	f000 f94b 	bl	8003bfc <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bdb0      	pop	{r4, r5, r7, pc}

08003970 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	8812      	ldrh	r2, [r2, #0]
 8003980:	801a      	strh	r2, [r3, #0]
      { }
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	461a      	mov	r2, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe f93b 	bl	8001c3c <_ZNSt14_Function_baseC1Ev>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80039cc:	6838      	ldr	r0, [r7, #0]
 80039ce:	f000 f92e 	bl	8003c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80039d8:	687c      	ldr	r4, [r7, #4]
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f7ff ffd8 	bl	8003990 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4619      	mov	r1, r3
 80039e4:	4620      	mov	r0, r4
 80039e6:	f000 f92d 	bl	8003c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 80039ee:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 80039f4:	609a      	str	r2, [r3, #8]
	}
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}
 8003a00:	08003c69 	.word	0x08003c69
 8003a04:	08003c87 	.word	0x08003c87

08003a08 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8003a1e:	b590      	push	{r4, r7, lr}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8003a28:	687c      	ldr	r4, [r7, #4]
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	f7ff fece 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4619      	mov	r1, r3
 8003a34:	4620      	mov	r0, r4
 8003a36:	f000 f945 	bl	8003cc4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd90      	pop	{r4, r7, pc}

08003a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003a5a:	b590      	push	{r4, r7, lr}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f7ff feeb 	bl	8003840 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f93a 	bl	8003cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}

08003a7e <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f94c 	bl	8003d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f966 	bl	8003d60 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8003a94:	bf00      	nop
      }
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d109      	bne.n	8003ac4 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f965 	bl	8003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f000 f933 	bl	8003d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6023      	str	r3, [r4, #0]
	    break;
 8003ac2:	e005      	b.n	8003ad0 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f964 	bl	8003d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003ad0:	2300      	movs	r3, #0
      }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}

08003ada <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffed 	bl	8003ada <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b0a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8003b0e:	6838      	ldr	r0, [r7, #0]
 8003b10:	f7ff ffe3 	bl	8003ada <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b1c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ffd8 	bl	8003ada <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b32:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ffed 	bl	8003b3e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003b64:	4603      	mov	r3, r0
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	f7ff ffe7 	bl	8003b3e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003b70:	4603      	mov	r3, r0
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ffde 	bl	8003b3e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003b82:	4603      	mov	r3, r0
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
    }
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffed 	bl	8003b92 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003bbe:	6838      	ldr	r0, [r7, #0]
 8003bc0:	f7ff ffe7 	bl	8003b92 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ffde 	bl	8003b92 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	601a      	str	r2, [r3, #0]
    }
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8003c08:	68fc      	ldr	r4, [r7, #12]
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f7ff fdde 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c10:	4605      	mov	r5, r0
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fe7c 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f8f4 	bl	8003e0c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bdb0      	pop	{r4, r5, r7, pc}

08003c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003c36:	2301      	movs	r3, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f7ff fe9e 	bl	8003990 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4622      	mov	r2, r4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8f4 	bl	8003e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd90      	pop	{r4, r7, pc}

08003c68 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f906 	bl	8003e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f920 	bl	8003ebe <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8003c7e:	bf00      	nop
      }
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003c86:	b590      	push	{r4, r7, lr}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d109      	bne.n	8003cae <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f91f 	bl	8003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	68b8      	ldr	r0, [r7, #8]
 8003ca4:	f000 f8ed 	bl	8003e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	6023      	str	r3, [r4, #0]
	    break;
 8003cac:	e005      	b.n	8003cba <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f91f 	bl	8003ef8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003cba:	2300      	movs	r3, #0
      }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}

08003cc4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003cce:	687c      	ldr	r4, [r7, #4]
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	f7ff fd7b 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 f9f2 	bl	80040c4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}

08003cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003cea:	b5b0      	push	{r4, r5, r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003cf6:	68b8      	ldr	r0, [r7, #8]
 8003cf8:	f7ff fda2 	bl	8003840 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	f44f 701d 	mov.w	r0, #628	; 0x274
 8003d02:	f006 fa71 	bl	800a1e8 <_Znwj>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461c      	mov	r4, r3
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7ff fb59 	bl	80033c4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f834 	bl	8003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003d18:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003d1a:	601c      	str	r4, [r3, #0]
	  }
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bdb0      	pop	{r4, r5, r7, pc}

08003d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f9dc 	bl	80040ea <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8003d32:	4603      	mov	r3, r0
 8003d34:	681b      	ldr	r3, [r3, #0]
	}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	7138      	strb	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003d48:	6838      	ldr	r0, [r7, #0]
 8003d4a:	f000 f9da 	bl	8004102 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f9e1 	bl	8004118 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f9ca 	bl	8004102 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4619      	mov	r1, r3
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff ffe3 	bl	8003d3e <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fe f821 	bl	8001dd0 <_ZNSt9_Any_data9_M_accessEv>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d82a      	bhi.n	8003e02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd3 	.word	0x08003dd3
 8003dbc:	08003de7 	.word	0x08003de7
 8003dc0:	08003df9 	.word	0x08003df9
	      __dest._M_access<const type_info*>() = nullptr;
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f9b9 	bl	800413c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
	      break;
 8003dd0:	e017      	b.n	8003e02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff ffd4 	bl	8003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	68b8      	ldr	r0, [r7, #8]
 8003ddc:	f7ff ffa2 	bl	8003d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003de0:	4603      	mov	r3, r0
 8003de2:	6023      	str	r3, [r4, #0]
	      break;
 8003de4:	e00d      	b.n	8003e02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003de6:	68b8      	ldr	r0, [r7, #8]
 8003de8:	f7ff ff9c 	bl	8003d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003dec:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003dee:	4619      	mov	r1, r3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f9af 	bl	8004154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003df6:	e004      	b.n	8003e02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003df8:	4621      	mov	r1, r4
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f9bc 	bl	8004178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003e00:	bf00      	nop
	  return false;
 8003e02:	2300      	movs	r3, #0
	}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}

08003e0c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8003e18:	68fc      	ldr	r4, [r7, #12]
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fd78 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4619      	mov	r1, r3
 8003e24:	4620      	mov	r0, r4
 8003e26:	f000 f9bc 	bl	80041a2 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1d1c      	adds	r4, r3, #4
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f7ff fccc 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 f943 	bl	80040c4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}

08003e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	f7ff fd9b 	bl	8003990 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	f44f 701e 	mov.w	r0, #632	; 0x278
 8003e60:	f006 f9c2 	bl	800a1e8 <_Znwj>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461c      	mov	r4, r3
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7ff fbea 	bl	8003644 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f834 	bl	8003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003e76:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003e78:	601c      	str	r4, [r3, #0]
	  }
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bdb0      	pop	{r4, r5, r7, pc}

08003e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f99c 	bl	80041c8 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8003e90:	4603      	mov	r3, r0
 8003e92:	681b      	ldr	r3, [r3, #0]
	}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	7138      	strb	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f000 f99a 	bl	80041e0 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f9a1 	bl	80041f6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f98a 	bl	80041e0 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7ff ffe3 	bl	8003e9c <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}

08003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd ff72 	bl	8001dd0 <_ZNSt9_Any_data9_M_accessEv>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d82a      	bhi.n	8003f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f33 	.word	0x08003f33
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f59 	.word	0x08003f59
	      __dest._M_access<const type_info*>() = nullptr;
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f909 	bl	800413c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
	      break;
 8003f30:	e017      	b.n	8003f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ffd3 	bl	8003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003f38:	4604      	mov	r4, r0
 8003f3a:	68b8      	ldr	r0, [r7, #8]
 8003f3c:	f7ff ffa1 	bl	8003e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003f40:	4603      	mov	r3, r0
 8003f42:	6023      	str	r3, [r4, #0]
	      break;
 8003f44:	e00d      	b.n	8003f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003f46:	68b8      	ldr	r0, [r7, #8]
 8003f48:	f7ff ff9b 	bl	8003e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003f4c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003f4e:	4619      	mov	r1, r3
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f962 	bl	800421a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003f56:	e004      	b.n	8003f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003f58:	4621      	mov	r1, r4
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f96f 	bl	800423e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003f60:	bf00      	nop
	  return false;
 8003f62:	2300      	movs	r3, #0
	}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}

08003f6c <_ZN4iIMUC1ERKS_>:
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <_ZN4iIMUC1ERKS_+0x20>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	0800aae4 	.word	0x0800aae4

08003f90 <_ZN8ICM426888icm42688C1ERKS0_>:
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ffe3 	bl	8003f6c <_ZN4iIMUC1ERKS_>
 8003fa6:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	1d10      	adds	r0, r2, #4
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f006 fcf1 	bl	800a9a0 <memcpy>
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8003fc6:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8003fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003fd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8003fe2:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8003ffa:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8003ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004002:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8004012:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8004016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800401a:	6018      	str	r0, [r3, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	8019      	strh	r1, [r3, #0]
 8004020:	3302      	adds	r3, #2
 8004022:	0c0a      	lsrs	r2, r1, #16
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdb0      	pop	{r4, r5, r7, pc}
 80040c0:	0800aa94 	.word	0x0800aa94

080040c4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80040ce:	687c      	ldr	r4, [r7, #4]
 80040d0:	6838      	ldr	r0, [r7, #0]
 80040d2:	f7ff fb7b 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4619      	mov	r1, r3
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff ff58 	bl	8003f90 <_ZN8ICM426888icm42688C1ERKS0_>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}

080040ea <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fe77 	bl	8001de6 <_ZNKSt9_Any_data9_M_accessEv>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8004120:	f000 f8a2 	bl	8004268 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4622      	mov	r2, r4
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8a3 	bl	8004278 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8004132:	4603      	mov	r3, r0
	}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fd fe43 	bl	8001dd0 <_ZNSt9_Any_data9_M_accessEv>
 800414a:	4603      	mov	r3, r0
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800415e:	6838      	ldr	r0, [r7, #0]
 8004160:	f000 f8a7 	bl	80042b2 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8004164:	4603      	mov	r3, r0
 8004166:	4622      	mov	r2, r4
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8f5 	bl	800435a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}

08004178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fdfc 	bl	8003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8004188:	4603      	mov	r3, r0
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8004190:	f44f 711d 	mov.w	r1, #628	; 0x274
 8004194:	4618      	mov	r0, r3
 8004196:	f006 f825 	bl	800a1e4 <_ZdlPvj>
	}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 80041a2:	b590      	push	{r4, r7, lr}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 80041ac:	687c      	ldr	r4, [r7, #4]
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f7ff fbae 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4619      	mov	r1, r3
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 f8eb 	bl	8004394 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fd fe08 	bl	8001de6 <_ZNKSt9_Any_data9_M_accessEv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 80041f6:	b590      	push	{r4, r7, lr}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80041fe:	f000 f833 	bl	8004268 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	4622      	mov	r2, r4
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8d3 	bl	80043b6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8004210:	4603      	mov	r3, r0
	}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}

0800421a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800421a:	b590      	push	{r4, r7, lr}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004224:	6838      	ldr	r0, [r7, #0]
 8004226:	f000 f8f1 	bl	800440c <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 800422a:	4603      	mov	r3, r0
 800422c:	4622      	mov	r2, r4
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f935 	bl	80044a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}

0800423e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fe48 	bl	8003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 800424e:	4603      	mov	r3, r0
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8004256:	f44f 711e 	mov.w	r1, #632	; 0x278
 800425a:	4618      	mov	r0, r3
 800425c:	f005 ffc2 	bl	800a1e4 <_ZdlPvj>
	}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800426c:	bf00      	nop
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8004284:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3308      	adds	r3, #8
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f925 	bl	80044da <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8004290:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f92b 	bl	80044f4 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 800429e:	4603      	mov	r3, r0
 80042a0:	4619      	mov	r1, r3
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 f934 	bl	8004510 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 80042a8:	4603      	mov	r3, r0
	}
 80042aa:	4618      	mov	r0, r3
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}

080042b2 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fe59 	bl	8003f90 <_ZN8ICM426888icm42688C1ERKS0_>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ffe5 	bl	80042c8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ffe5 	bl	80042e8 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800433a:	e883 0003 	stmia.w	r3, {r0, r1}
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f103 0208 	add.w	r2, r3, #8
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7ff ffdc 	bl	8004308 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800435a:	b5b0      	push	{r4, r5, r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f7ff ffa3 	bl	80042b2 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 800436c:	4605      	mov	r5, r0
 800436e:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004372:	f005 ff39 	bl	800a1e8 <_Znwj>
 8004376:	4603      	mov	r3, r0
 8004378:	461c      	mov	r4, r3
 800437a:	4629      	mov	r1, r5
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ffd3 	bl	8004328 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fcfc 	bl	8003d80 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8004388:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800438a:	601c      	str	r4, [r3, #0]
	  }
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bdb0      	pop	{r4, r5, r7, pc}

08004394 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800439e:	6838      	ldr	r0, [r7, #0]
 80043a0:	f7ff fab6 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80043a4:	4603      	mov	r3, r0
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80043b6:	b5b0      	push	{r4, r5, r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 80043c2:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3308      	adds	r3, #8
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f8b8 	bl	800453e <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80043ce:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f88c 	bl	80044f4 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 80043dc:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3308      	adds	r3, #8
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f8b8 	bl	8004558 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80043e8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f8be 	bl	8004572 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	4629      	mov	r1, r5
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 f8c6 	bl	800458e <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 8004402:	4603      	mov	r3, r0
	}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bdb0      	pop	{r4, r5, r7, pc}

0800440c <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	8812      	ldrh	r2, [r2, #0]
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff ff42 	bl	80042c8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ffdf 	bl	8004422 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004480:	e883 0003 	stmia.w	r3, {r0, r1}
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f103 0208 	add.w	r2, r3, #8
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7ff ffdc 	bl	800444e <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80044ac:	68b8      	ldr	r0, [r7, #8]
 80044ae:	f7ff ffad 	bl	800440c <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 80044b2:	4605      	mov	r5, r0
 80044b4:	f44f 701e 	mov.w	r0, #632	; 0x278
 80044b8:	f005 fe96 	bl	800a1e8 <_Znwj>
 80044bc:	4603      	mov	r3, r0
 80044be:	461c      	mov	r4, r3
 80044c0:	4629      	mov	r1, r5
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff ffd3 	bl	800446e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fd08 	bl	8003ede <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 80044ce:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80044d0:	601c      	str	r4, [r3, #0]
	  }
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bdb0      	pop	{r4, r5, r7, pc}

080044da <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f86e 	bl	80045c6 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f7ff f963 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8004506:	4603      	mov	r3, r0
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8004510:	b5b0      	push	{r4, r5, r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f85f 	bl	80045de <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004520:	4604      	mov	r4, r0
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f7ff f952 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f860 	bl	80045f4 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8004534:	4603      	mov	r3, r0
    }
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bdb0      	pop	{r4, r5, r7, pc}

0800453e <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f87a 	bl	8004642 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800454e:	4603      	mov	r3, r0
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f879 	bl	800465a <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 8004568:	4603      	mov	r3, r0
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f7ff f9c6 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004584:	4603      	mov	r3, r0
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800458e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f869 	bl	8004672 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045a0:	4604      	mov	r4, r0
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f7ff f912 	bl	80037cc <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80045a8:	4605      	mov	r5, r0
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff f9b0 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80045b0:	4603      	mov	r3, r0
 80045b2:	462a      	mov	r2, r5
 80045b4:	4621      	mov	r1, r4
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 f866 	bl	8004688 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 80045bc:	4603      	mov	r3, r0
    }
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045c6 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f889 	bl	80046e6 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	7338      	strb	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f87d 	bl	8004700 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8004606:	4603      	mov	r3, r0
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	6852      	ldr	r2, [r2, #4]
 800460c:	1052      	asrs	r2, r2, #1
 800460e:	1899      	adds	r1, r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	6852      	ldr	r2, [r2, #4]
 8004614:	f002 0201 	and.w	r2, r2, #1
 8004618:	2a00      	cmp	r2, #0
 800461a:	d102      	bne.n	8004622 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	e008      	b.n	8004634 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	6852      	ldr	r2, [r2, #4]
 8004626:	1052      	asrs	r2, r2, #1
 8004628:	4413      	add	r3, r2
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	4413      	add	r3, r2
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4608      	mov	r0, r1
 8004636:	4798      	blx	r3
 8004638:	4603      	mov	r3, r0
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f863 	bl	8004716 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 8004650:	4603      	mov	r3, r0
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f865 	bl	8004732 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 8004668:	4603      	mov	r3, r0
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	7338      	strb	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f832 	bl	8004700 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 800469c:	4603      	mov	r3, r0
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	6852      	ldr	r2, [r2, #4]
 80046a2:	1052      	asrs	r2, r2, #1
 80046a4:	189d      	adds	r5, r3, r2
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	6852      	ldr	r2, [r2, #4]
 80046aa:	f002 0201 	and.w	r2, r2, #1
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	d102      	bne.n	80046b8 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	681c      	ldr	r4, [r3, #0]
 80046b6:	e008      	b.n	80046ca <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	6852      	ldr	r2, [r2, #4]
 80046bc:	1052      	asrs	r2, r2, #1
 80046be:	4413      	add	r3, r2
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f7ff f920 	bl	8003910 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80046d0:	4603      	mov	r3, r0
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	4619      	mov	r1, r3
 80046d8:	4628      	mov	r0, r5
 80046da:	47a0      	blx	r4
 80046dc:	4603      	mov	r3, r0
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bdb0      	pop	{r4, r5, r7, pc}

080046e6 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f82b 	bl	800474c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f812 	bl	800474c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 8004728:	4603      	mov	r3, r0
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f810 	bl	8004762 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 8004742:	4603      	mov	r3, r0
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	4093      	lsls	r3, r2
        }   
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	4093      	lsls	r3, r2
        } 
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d102      	bne.n	80047cc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 80047c6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800486c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 80047ca:	e049      	b.n	8004860 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 80047cc:	2106      	movs	r1, #6
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f91e 	bl	8004a10 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80047da:	2101      	movs	r1, #1
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f92b 	bl	8004a38 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d010      	beq.n	8004814 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 80047f2:	2101      	movs	r1, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f933 	bl	8004a60 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	2301      	movs	r3, #1
 8004800:	4093      	lsls	r3, r2
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800480a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004870 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 800480e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004812:	e025      	b.n	8004860 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 8004814:	210b      	movs	r1, #11
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8fa 	bl	8004a10 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8004822:	2107      	movs	r1, #7
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f907 	bl	8004a38 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 800483a:	2107      	movs	r1, #7
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f90f 	bl	8004a60 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 8004842:	4603      	mov	r3, r0
 8004844:	461a      	mov	r2, r3
 8004846:	2301      	movs	r3, #1
 8004848:	4093      	lsls	r3, r2
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004852:	eddf 6a08 	vldr	s13, [pc, #32]	; 8004874 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	e001      	b.n	8004860 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 800485c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 8004860:	eeb0 0a67 	vmov.f32	s0, s15
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	43fa0000 	.word	0x43fa0000
 8004870:	46fa0000 	.word	0x46fa0000
 8004874:	43480000 	.word	0x43480000

08004878 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 8004880:	2107      	movs	r1, #7
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8fd 	bl	8004a82 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	2001      	movs	r0, #1
 8004892:	f7ff ff71 	bl	8004778 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 8004896:	ee07 0a90 	vmov	s15, r0
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a07 	vldr	s13, [pc, #28]	; 80048bc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	e001      	b.n	80048ac <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 80048a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 80048ac:	eef0 7a47 	vmov.f32	s15, s14
 80048b0:	eeb0 0a67 	vmov.f32	s0, s15
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	44fa0000 	.word	0x44fa0000

080048c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d102      	bne.n	80048d4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 80048ce:	eddf 7a29 	vldr	s15, [pc, #164]	; 8004974 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 80048d2:	e049      	b.n	8004968 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 80048d4:	2106      	movs	r1, #6
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8e7 	bl	8004aaa <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80048e2:	2101      	movs	r1, #1
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8f4 	bl	8004ad2 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 80048fa:	2101      	movs	r1, #1
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8fc 	bl	8004afa <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	2301      	movs	r3, #1
 8004908:	4093      	lsls	r3, r2
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004912:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004978 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	e025      	b.n	8004968 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 800491c:	210e      	movs	r1, #14
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8c3 	bl	8004aaa <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 800492a:	2107      	movs	r1, #7
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8d0 	bl	8004ad2 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 8004942:	2107      	movs	r1, #7
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8d8 	bl	8004afa <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	2301      	movs	r3, #1
 8004950:	4093      	lsls	r3, r2
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800495a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800497c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 800495e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004962:	e001      	b.n	8004968 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 8004964:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 8004968:	eeb0 0a67 	vmov.f32	s0, s15
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	43fa0000 	.word	0x43fa0000
 8004978:	46fa0000 	.word	0x46fa0000
 800497c:	43480000 	.word	0x43480000

08004980 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 8004988:	2103      	movs	r1, #3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8c6 	bl	8004b1c <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff fefd 	bl	8004798 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 800499e:	ee07 0a90 	vmov	s15, r0
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	e001      	b.n	80049b4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 80049b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 80049b4:	eef0 7a47 	vmov.f32	s15, s14
 80049b8:	eeb0 0a67 	vmov.f32	s0, s15
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	460a      	mov	r2, r1
 80049ce:	71fb      	strb	r3, [r7, #7]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	b21a      	sxth	r2, r3
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	b21b      	sxth	r3, r3
 80049de:	4313      	orrs	r3, r2
 80049e0:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 80049e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ee:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004a0c <_ZN8ICM4268815convertTempDataEhh+0x48>
 80049f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80049fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 80049fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	43047ae1 	.word	0x43047ae1

08004a10 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	429a      	cmp	r2, r3
 8004a24:	bf94      	ite	ls
 8004a26:	2301      	movls	r3, #1
 8004a28:	2300      	movhi	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
        }
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf2c      	ite	cs
 8004a4e:	2301      	movcs	r3, #1
 8004a50:	2300      	movcc	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
        }
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	b2db      	uxtb	r3, r3
        }
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
        }
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
        }
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	bf2c      	ite	cs
 8004ae8:	2301      	movcs	r3, #1
 8004aea:	2300      	movcc	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
        }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	b2db      	uxtb	r3, r3
        }
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	bf94      	ite	ls
 8004b32:	2301      	movls	r3, #1
 8004b34:	2300      	movhi	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
        }  
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b48:	f001 fb09 	bl	800615e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b4c:	f000 f812 	bl	8004b74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b50:	f7fc ff80 	bl	8001a54 <MX_GPIO_Init>
  MX_SPI2_Init();
 8004b54:	f000 fbde 	bl	8005314 <MX_SPI2_Init>
  MX_I2C4_Init();
 8004b58:	f7fd f89a 	bl	8001c90 <MX_I2C4_Init>
  MX_CAN1_Init();
 8004b5c:	f7fc fd90 	bl	8001680 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004b60:	f7fc fdc6 	bl	80016f0 <MX_CAN2_Init>
  MX_TIM5_Init();
 8004b64:	f001 f894 	bl	8005c90 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000);

  system_init();
 8004b68:	f000 fd10 	bl	800558c <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 8004b6c:	f000 fd32 	bl	80055d4 <_Z22system_run_active_modev>
 8004b70:	e7fc      	b.n	8004b6c <main+0x28>
	...

08004b74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b094      	sub	sp, #80	; 0x50
 8004b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7a:	f107 0320 	add.w	r3, r7, #32
 8004b7e:	2230      	movs	r2, #48	; 0x30
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f005 fe84 	bl	800a890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b98:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <_Z18SystemClock_Configv+0xf4>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <_Z18SystemClock_Configv+0xf4>)
 8004b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <_Z18SystemClock_Configv+0xf4>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <_Z18SystemClock_Configv+0xf8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <_Z18SystemClock_Configv+0xf8>)
 8004bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <_Z18SystemClock_Configv+0xf8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004bc8:	2309      	movs	r3, #9
 8004bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004be0:	2306      	movs	r3, #6
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004be4:	23d8      	movs	r3, #216	; 0xd8
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004be8:	2302      	movs	r3, #2
 8004bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004bec:	2309      	movs	r3, #9
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf0:	f107 0320 	add.w	r3, r7, #32
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f002 ff4d 	bl	8007a94 <HAL_RCC_OscConfig>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8004c0a:	f000 f831 	bl	8004c70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c0e:	f002 fef1 	bl	80079f4 <HAL_PWREx_EnableOverDrive>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8004c22:	f000 f825 	bl	8004c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c26:	230f      	movs	r3, #15
 8004c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2107      	movs	r1, #7
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 f9c9 	bl	8007fdc <HAL_RCC_ClockConfig>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8004c5a:	f000 f809 	bl	8004c70 <Error_Handler>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3750      	adds	r7, #80	; 0x50
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40007000 	.word	0x40007000

08004c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c74:	b672      	cpsid	i
}
 8004c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c78:	e7fe      	b.n	8004c78 <Error_Handler+0x8>
	...

08004c7c <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LED1_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LED1_Pin

void fail_silent_mode_run(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8004c82:	463b      	mov	r3, r7
 8004c84:	2210      	movs	r2, #16
 8004c86:	4905      	ldr	r1, [pc, #20]	; (8004c9c <_Z20fail_silent_mode_runv+0x20>)
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fc ff8b 	bl	8001ba4 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8004c8e:	463b      	mov	r3, r7
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc ffac 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8004c98:	e7fe      	b.n	8004c98 <_Z20fail_silent_mode_runv+0x1c>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
 8004caa:	460b      	mov	r3, r1
 8004cac:	71bb      	strb	r3, [r7, #6]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8004cb2:	797b      	ldrb	r3, [r7, #5]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8004cb8:	79bb      	ldrb	r3, [r7, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e00f      	b.n	8004ce8 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	e00d      	b.n	8004ce8 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8004ccc:	79bb      	ldrb	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <_ZN9iPHandler12add_read_bitEhbb+0x42>
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e002      	b.n	8004ce8 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	71fb      	strb	r3, [r7, #7]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	71bb      	strb	r3, [r7, #6]
 8004d02:	4613      	mov	r3, r2
 8004d04:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8004d06:	797b      	ldrb	r3, [r7, #5]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8004d0c:	79bb      	ldrb	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <_ZN9iPHandler13add_write_bitEhbb+0x22>
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	e012      	b.n	8004d3c <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e00d      	b.n	8004d3c <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8004d20:	79bb      	ldrb	r3, [r7, #6]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e006      	b.n	8004d3c <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
    }
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_Z15normal_mode_runv>:
#define TIMEOUT_RX_MSG_ATTITUDE 200

static bool run = false;

void normal_mode_run(void)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8004d4e:	af06      	add	r7, sp, #24
	taskCNIreceiveData_t   taskCNIreceiveAttitudeData3;
	//taskCNIreceiveData_t   taskCNIreceiveCompareAttitudeData3;
#endif

	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_PORT, ICM42688_CS_PIN);
 8004d50:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d58:	49af      	ldr	r1, [pc, #700]	; (8005018 <_Z15normal_mode_runv+0x2d0>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fc ff22 	bl	8001ba4 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8004d60:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8004d64:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 8004d68:	2300      	movs	r3, #0
 8004d6a:	49ac      	ldr	r1, [pc, #688]	; (800501c <_Z15normal_mode_runv+0x2d4>)
 8004d6c:	f000 f98e 	bl	800508c <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 8004d70:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d78:	2201      	movs	r2, #1
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 8004d88:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d90:	4aa3      	ldr	r2, [pc, #652]	; (8005020 <_Z15normal_mode_runv+0x2d8>)
 8004d92:	461c      	mov	r4, r3
 8004d94:	4613      	mov	r3, r2
 8004d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8004d9c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004da0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004da4:	4618      	mov	r0, r3
 8004da6:	2328      	movs	r3, #40	; 0x28
 8004da8:	461a      	mov	r2, r3
 8004daa:	2100      	movs	r1, #0
 8004dac:	f005 fd70 	bl	800a890 <memset>
 8004db0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004db4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004db8:	2203      	movs	r2, #3
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004dc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004dc4:	2206      	movs	r2, #6
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004dcc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004dd8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ddc:	2206      	movs	r2, #6
 8004dde:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8004de0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004de4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004de8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004dec:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 8004df0:	3310      	adds	r3, #16
 8004df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004df6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004dfa:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004dfe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e02:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004e06:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8004e0a:	f103 0418 	add.w	r4, r3, #24
 8004e0e:	4613      	mov	r3, r2
 8004e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8004e16:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004e1a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8004e1e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8004e22:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004e26:	f7fd f97b 	bl	8002120 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED para calibración de la IMU==============
	STM32::gpio ledIMUcalibration(LED_IMU_CALIBRATION_GPIO_PORT, LED_IMU_CALIBRATION_GPIO_PIN);
 8004e2a:	f107 031c 	add.w	r3, r7, #28
 8004e2e:	2210      	movs	r2, #16
 8004e30:	497c      	ldr	r1, [pc, #496]	; (8005024 <_Z15normal_mode_runv+0x2dc>)
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc feb6 	bl	8001ba4 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_PORT, LED_HEARTBEAT_GPIO_PIN);
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	497a      	ldr	r1, [pc, #488]	; (8005028 <_Z15normal_mode_runv+0x2e0>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc feb0 	bl	8001ba4 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8004e44:	4879      	ldr	r0, [pc, #484]	; (800502c <_Z15normal_mode_runv+0x2e4>)
 8004e46:	f7fc f803 	bl	8000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Inicialización del attitude estimator ==============================
	attitudeEstimator_constructor(ALPHA_ATTITUDE_ESTIMATOR, DELTA_T_ATTITUDE_ESTIMATOR_S);
 8004e4a:	eddf 0a79 	vldr	s1, [pc, #484]	; 8005030 <_Z15normal_mode_runv+0x2e8>
 8004e4e:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8005034 <_Z15normal_mode_runv+0x2ec>
 8004e52:	f7fc fab5 	bl	80013c0 <_Z29attitudeEstimator_constructorff>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog, DELAY_TASK_WATCHDOG_TICKS_NORMAL, PERIOD_TASK_WATCHDOG_TICKS_NORMAL, WCET_TASK_WATCHDOG_US, BCET_TASK_WATCHDOG_US,
 8004e56:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8004e5a:	4b77      	ldr	r3, [pc, #476]	; (8005038 <_Z15normal_mode_runv+0x2f0>)
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2364      	movs	r3, #100	; 0x64
 8004e64:	2201      	movs	r2, #1
 8004e66:	2100      	movs	r1, #0
 8004e68:	f000 feca 	bl	8005c00 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat, DELAY_TASK_HEARTBEAT_TICKS_NORMAL, PERIOD_TASK_HEARTBEAT_TICKS_NORMAL, WCET_TASK_HEARTBEAT_US, BCET_TASK_HEARTBEAT_US,
 8004e6c:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2364      	movs	r3, #100	; 0x64
 8004e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e7e:	2100      	movs	r1, #0
 8004e80:	f000 fcfc 	bl	800587c <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			&ledHeartbeat);
// ==================== Datos IMU raw ====================
	taskIMUgetData_constructor(&taskIMUgetData, DELAY_TASK_IMU_TICKS_NORMAL, PERIOD_TASK_IMU_TICKS_NORMAL, WCET_TASK_IMU_US, BCET_TASK_IMU_US,
 8004e84:	f507 707f 	add.w	r0, r7, #1020	; 0x3fc
 8004e88:	2307      	movs	r3, #7
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2364      	movs	r3, #100	; 0x64
 8004e9e:	2264      	movs	r2, #100	; 0x64
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	f000 fd21 	bl	80058e8 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm>

//	taskCNIsendData_constructor(&taskCNIsendIMUdata, DELAY_TASK_CNI_SEND_IMU_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_IMU_TICKS_NORMAL, WCET_TASK_CNI_SEND_IMU_US, BCET_TASK_CNI_SEND_IMU_US,
//			HANDLE_MSG_CNI_SEND_IMU_DATA);
// =======================================================
// =================== Datos attitude  ===================
	taskEstimateAttitude_constructor(&taskEstimateAttitude, DELAY_TASK_ESTIMATE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_ESTIMATE_ATTITUDE_TICKS_NORMAL, WCET_TASK_ESTIMATE_ATTITUDE_US, BCET_TASK_ESTIMATE_ATTITUDE_US,
 8004ea6:	f507 7079 	add.w	r0, r7, #996	; 0x3e4
 8004eaa:	230c      	movs	r3, #12
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2364      	movs	r3, #100	; 0x64
 8004eb4:	2264      	movs	r2, #100	; 0x64
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	f000 fcaa 	bl	8005810 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);

	taskCNIsendData_constructor(&taskCNIsendAttitudeData, DELAY_TASK_CNI_SEND_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_ATTITUDE_TICKS_NORMAL, WCET_TASK_CNI_SEND_ATTITUDE_US, BCET_TASK_CNI_SEND_ATTITUDE_US,
 8004ebc:	f507 7073 	add.w	r0, r7, #972	; 0x3cc
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2364      	movs	r3, #100	; 0x64
 8004eca:	2264      	movs	r2, #100	; 0x64
 8004ecc:	2103      	movs	r1, #3
 8004ece:	f000 fbd1 	bl	8005674 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);
#if SETTINGS_NODE_ID!=1
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData1, DELAY_TASK_CNI_RECEIVE_ATTITUDE_1_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_1_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_1_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_1_US,
 8004ed2:	f507 705d 	add.w	r0, r7, #884	; 0x374
 8004ed6:	23c8      	movs	r3, #200	; 0xc8
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	230a      	movs	r3, #10
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2364      	movs	r3, #100	; 0x64
 8004ee4:	2264      	movs	r2, #100	; 0x64
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	f000 fb96 	bl	8005618 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmmm>
			HANDLE_MSG_CNI_ATTITUDE_1, TIMEOUT_RX_MSG_ATTITUDE);
#endif
#if SETTINGS_NODE_ID!=2
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData2, DELAY_TASK_CNI_RECEIVE_ATTITUDE_2_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_2_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_2_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_2_US,
 8004eec:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8004ef0:	23c8      	movs	r3, #200	; 0xc8
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	230b      	movs	r3, #11
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2364      	movs	r3, #100	; 0x64
 8004efe:	2264      	movs	r2, #100	; 0x64
 8004f00:	2102      	movs	r1, #2
 8004f02:	f000 fb89 	bl	8005618 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmmm>
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData3, DELAY_TASK_CNI_RECEIVE_ATTITUDE_3_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_3_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_3_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_3_US,
			HANDLE_MSG_CNI_ATTITUDE_3, TIMEOUT_RX_MSG_ATTITUDE);
#endif
// =======================================================
//================== Comparacion attitude ================
	taskCompareAttitude_constructor(&taskCompareAttitudeData, DELAY_TASK_COMPARE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_COMPARE_ATTITUDE_TICKS_NORMAL, WCET_TASK_COMPARE_ATTITUDE_US, BCET_TASK_COMPARE_ATTITUDE_US,
 8004f06:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
 8004f0a:	2313      	movs	r3, #19
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	230c      	movs	r3, #12
 8004f10:	9303      	str	r3, [sp, #12]
 8004f12:	230b      	movs	r3, #11
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	230a      	movs	r3, #10
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2364      	movs	r3, #100	; 0x64
 8004f20:	2264      	movs	r2, #100	; 0x64
 8004f22:	2104      	movs	r1, #4
 8004f24:	f000 fbce 	bl	80056c4 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm>
			HANDLE_MSG_CNI_ATTITUDE_1, HANDLE_MSG_CNI_ATTITUDE_2, HANDLE_MSG_CNI_ATTITUDE_3, HANDLE_MSG_CNI_COMPARE_ATTITUDE);

	taskCNIsendData_constructor(&taskCNIsendCompareAttitudeData, DELAY_TASK_CNI_SEND_COMPARE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_COMPARE_ATTITUDE_TICKS_NORMAL, WCET_TASK_CNI_SEND_COMPARE_ATTITUDE_US, BCET_TASK_CNI_SEND_COMPARE_ATTITUDE_US,
 8004f28:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8004f2c:	2313      	movs	r3, #19
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2364      	movs	r3, #100	; 0x64
 8004f36:	2264      	movs	r2, #100	; 0x64
 8004f38:	2107      	movs	r1, #7
 8004f3a:	f000 fb9b 	bl	8005674 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			HANDLE_MSG_CNI_COMPARE_ATTITUDE);
// =======================================================
//================== Syncronización ================
	taskTimeTriggeredSync_constructor(&taskPeriodicSync, DELAY_TASK_SYNC_TICKS_NORMAL, PERIOD_TASK_SYNC_TICKS_NORMAL, WCET_TASK_SYNC_US, BCET_TASK_SYNC_US,
 8004f3e:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8004f42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f46:	9303      	str	r3, [sp, #12]
 8004f48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f4c:	9302      	str	r3, [sp, #8]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2364      	movs	r3, #100	; 0x64
 8004f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f5c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004f60:	f001 f82e 	bl	8005fc0 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
			HANDLE_MSG_CNI_SYNC, EXPECTED_SYNC_TIMESTAMP_TICKS, DELAY_SYNC_TICKS);
// =======================================================

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8004f64:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004f68:	4834      	ldr	r0, [pc, #208]	; (800503c <_Z15normal_mode_runv+0x2f4>)
 8004f6a:	f000 ff17 	bl	8005d9c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8004f6e:	f000 ff3f 	bl	8005df0 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8004f72:	f7fb ff89 	bl	8000e88 <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8004f76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fc98 	bl	80058b0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8004f80:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fccf 	bl	8005928 <_Z20taskIMUgetData_startP16taskIMUgetData_t>
//	taskCNIsendData_start(&taskCNIsendIMUdata);

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8004f8a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 ffee 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8004f94:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 ffe9 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8004f9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 ffe4 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8004fa8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 ffdf 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskEstimateAttitude);
 8004fb2:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 ffda 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendAttitudeData);
 8004fbc:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 ffd5 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#if SETTINGS_NODE_ID!=1
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData1);
 8004fc6:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 ffd0 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#endif
#if SETTINGS_NODE_ID!=2
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData2);
 8004fd0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 ffcb 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#endif
#if SETTINGS_NODE_ID!=3
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData3);
#endif
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCompareAttitudeData);
 8004fda:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 ffc6 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendCompareAttitudeData);
 8004fe4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 ffc1 	bl	8005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	CNI_start();
 8004fee:	f7fb ff71 	bl	8000ed4 <_Z9CNI_startv>
	//taskIMUgetData_update(&taskIMUgetData);
	//taskIMUgetData_update(&taskIMUgetData);
	//taskIMUgetData_update(&taskIMUgetData);

	// Se queda acá esperando hasta que uno presione el botón para comenzar
	while(!run)
 8004ff2:	bf00      	nop
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <_Z15normal_mode_runv+0x2f8>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f083 0301 	eor.w	r3, r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f8      	bne.n	8004ff4 <_Z15normal_mode_runv+0x2ac>
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
#endif
	taskWatchdog_start(&taskWatchdog);
 8005002:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fe28 	bl	8005c5c <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 800500c:	f000 ff08 	bl	8005e20 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8005010:	f000 ff12 	bl	8005e38 <_Z31timeTriggeredScheduler_dispatchv>
 8005014:	e7fc      	b.n	8005010 <_Z15normal_mode_runv+0x2c8>
 8005016:	bf00      	nop
 8005018:	40020400 	.word	0x40020400
 800501c:	200003f4 	.word	0x200003f4
 8005020:	0800aa78 	.word	0x0800aa78
 8005024:	40021400 	.word	0x40021400
 8005028:	40021000 	.word	0x40021000
 800502c:	20000324 	.word	0x20000324
 8005030:	3dcccccd 	.word	0x3dcccccd
 8005034:	3ccccccd 	.word	0x3ccccccd
 8005038:	200003e0 	.word	0x200003e0
 800503c:	20000460 	.word	0x20000460
 8005040:	200003f0 	.word	0x200003f0

08005044 <HAL_CAN_RxFifo0MsgPendingCallback>:
    	run = true;
    }
}
#else
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800504c:	2102      	movs	r1, #2
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fdd0 	bl	8006bf4 <HAL_CAN_DeactivateNotification>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8005054:	2014      	movs	r0, #20
 8005056:	f002 f94c 	bl	80072f2 <HAL_NVIC_DisableIRQ>
	run = true;
 800505a:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	200003f0 	.word	0x200003f0

0800506c <_ZN9iPHandlerC1Ev>:
class iPHandler {
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <_ZN9iPHandlerC1Ev+0x1c>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	0800ab44 	.word	0x0800ab44

0800508c <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffe5 	bl	800506c <_ZN9iPHandlerC1Ev>
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	615a      	str	r2, [r3, #20]
		, m_size(0)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2101      	movs	r1, #1
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc fd8e 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f103 0219 	add.w	r2, r3, #25
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	0800ab34 	.word	0x0800ab34

080050f4 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b1f      	cmp	r3, #31
 8005104:	d901      	bls.n	800510a <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e029      	b.n	800515e <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	7818      	ldrb	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	7b19      	ldrb	r1, [r3, #12]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	7b5b      	ldrb	r3, [r3, #13]
 8005116:	461a      	mov	r2, r3
 8005118:	f7ff fdc2 	bl	8004ca0 <_ZN9iPHandler12add_read_bitEhbb>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	3301      	adds	r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	7b9b      	ldrb	r3, [r3, #14]
 8005148:	3318      	adds	r3, #24
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8005152:	2100      	movs	r1, #0
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f842 	bl	80051de <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 800515a:	4603      	mov	r3, r0
 800515c:	bf00      	nop
	}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b1f      	cmp	r3, #31
 8005178:	d901      	bls.n	800517e <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e02b      	b.n	80051d6 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7818      	ldrb	r0, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7b19      	ldrb	r1, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7b5b      	ldrb	r3, [r3, #13]
 800518a:	461a      	mov	r2, r3
 800518c:	f7ff fdb2 	bl	8004cf4 <_ZN9iPHandler13add_write_bitEhbb>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3338      	adds	r3, #56	; 0x38
 800519e:	1c58      	adds	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	461a      	mov	r2, r3
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	f005 fbfa 	bl	800a9a0 <memcpy>
		m_mode = opt.mode;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	3301      	adds	r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	611a      	str	r2, [r3, #16]

		return start_transmition();
 80051ca:	2100      	movs	r1, #0
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f806 	bl	80051de <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 80051d2:	4603      	mov	r3, r0
 80051d4:	bf00      	nop
	}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fc fcfc 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d021      	beq.n	8005244 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 8005200:	2b02      	cmp	r3, #2
 8005202:	dc21      	bgt.n	8005248 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8005208:	2b01      	cmp	r3, #1
 800520a:	d019      	beq.n	8005240 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 800520c:	e01c      	b.n	8005248 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f103 0218 	add.w	r2, r3, #24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005220:	b29b      	uxth	r3, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f81e 	bl	8005264 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8005228:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc fcdd 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e00d      	b.n	800525c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8005240:	2303      	movs	r3, #3
 8005242:	e00b      	b.n	800525c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8005244:	2303      	movs	r3, #3
 8005246:	e009      	b.n	800525c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fcce 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8005254:	2303      	movs	r3, #3
 8005256:	e001      	b.n	800525c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8005258:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 800525a:	2300      	movs	r3, #0
	}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e013      	b.n	80052aa <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68d8      	ldr	r0, [r3, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	f003 fcef 	bl	8008c76 <HAL_SPI_TransmitReceive>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	4619      	mov	r1, r3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f806 	bl	80052b2 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 80052a6:	4603      	mov	r3, r0
 80052a8:	bf00      	nop

   }
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 80052c8:	2301      	movs	r3, #1
		   break;
	   }
   }
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e00a      	b.n	80052fe <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	441a      	add	r2, r3
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	440b      	add	r3, r1
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3301      	adds	r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d3f0      	bcc.n	80052e8 <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <MX_SPI2_Init+0x74>)
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <MX_SPI2_Init+0x78>)
 800531c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <MX_SPI2_Init+0x74>)
 8005320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005324:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <MX_SPI2_Init+0x74>)
 8005328:	2200      	movs	r2, #0
 800532a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800532c:	4b16      	ldr	r3, [pc, #88]	; (8005388 <MX_SPI2_Init+0x74>)
 800532e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005332:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <MX_SPI2_Init+0x74>)
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <MX_SPI2_Init+0x74>)
 800533c:	2201      	movs	r2, #1
 800533e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <MX_SPI2_Init+0x74>)
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <MX_SPI2_Init+0x74>)
 800534a:	2210      	movs	r2, #16
 800534c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <MX_SPI2_Init+0x74>)
 8005350:	2200      	movs	r2, #0
 8005352:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <MX_SPI2_Init+0x74>)
 8005356:	2200      	movs	r2, #0
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <MX_SPI2_Init+0x74>)
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <MX_SPI2_Init+0x74>)
 8005362:	2207      	movs	r2, #7
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <MX_SPI2_Init+0x74>)
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <MX_SPI2_Init+0x74>)
 800536e:	2200      	movs	r2, #0
 8005370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005372:	4805      	ldr	r0, [pc, #20]	; (8005388 <MX_SPI2_Init+0x74>)
 8005374:	f003 fbd4 	bl	8008b20 <HAL_SPI_Init>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800537e:	f7ff fc77 	bl	8004c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200003f4 	.word	0x200003f4
 800538c:	40003800 	.word	0x40003800

08005390 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <HAL_SPI_MspInit+0x7c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d128      	bne.n	8005404 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053bc:	6413      	str	r3, [r2, #64]	; 0x40
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053d0:	f043 0302 	orr.w	r3, r3, #2
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_SPI_MspInit+0x80>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80053e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053f4:	2305      	movs	r3, #5
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f8:	f107 0314 	add.w	r3, r7, #20
 80053fc:	4619      	mov	r1, r3
 80053fe:	4805      	ldr	r0, [pc, #20]	; (8005414 <HAL_SPI_MspInit+0x84>)
 8005400:	f001 ff92 	bl	8007328 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005404:	bf00      	nop
 8005406:	3728      	adds	r7, #40	; 0x28
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40003800 	.word	0x40003800
 8005410:	40023800 	.word	0x40023800
 8005414:	40020400 	.word	0x40020400

08005418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_MspInit+0x44>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <HAL_MspInit+0x44>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_MspInit+0x44>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_MspInit+0x44>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_MspInit+0x44>)
 800543c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005440:	6453      	str	r3, [r2, #68]	; 0x44
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_MspInit+0x44>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800

08005460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005464:	e7fe      	b.n	8005464 <NMI_Handler+0x4>

08005466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800546a:	e7fe      	b.n	800546a <HardFault_Handler+0x4>

0800546c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005470:	e7fe      	b.n	8005470 <MemManage_Handler+0x4>

08005472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005476:	e7fe      	b.n	8005476 <BusFault_Handler+0x4>

08005478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800547c:	e7fe      	b.n	800547c <UsageFault_Handler+0x4>

0800547e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054ac:	f000 fe94 	bl	80061d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <CAN1_RX0_IRQHandler+0x10>)
 80054ba:	f001 fbc2 	bl	8006c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000324 	.word	0x20000324

080054c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80054cc:	4802      	ldr	r0, [pc, #8]	; (80054d8 <TIM5_IRQHandler+0x10>)
 80054ce:	f004 f878 	bl	80095c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000460 	.word	0x20000460

080054dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return 1;
 80054e0:	2301      	movs	r3, #1
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_kill>:

int _kill(int pid, int sig)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80054f6:	f005 fa27 	bl	800a948 <__errno>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2216      	movs	r2, #22
 80054fe:	601a      	str	r2, [r3, #0]
  return -1;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <_exit>:

void _exit (int status)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ffe7 	bl	80054ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800551e:	e7fe      	b.n	800551e <_exit+0x12>

08005520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <_sbrk+0x5c>)
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <_sbrk+0x60>)
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <_sbrk+0x64>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <_sbrk+0x64>)
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <_sbrk+0x68>)
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <_sbrk+0x64>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d207      	bcs.n	8005560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005550:	f005 f9fa 	bl	800a948 <__errno>
 8005554:	4603      	mov	r3, r0
 8005556:	220c      	movs	r2, #12
 8005558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800555e:	e009      	b.n	8005574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <_sbrk+0x64>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <_sbrk+0x64>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	4a05      	ldr	r2, [pc, #20]	; (8005584 <_sbrk+0x64>)
 8005570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20050000 	.word	0x20050000
 8005580:	00000400 	.word	0x00000400
 8005584:	20000458 	.word	0x20000458
 8005588:	200006d0 	.word	0x200006d0

0800558c <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <_Z11system_initv+0x40>)
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <_Z11system_initv+0x40>)
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <_Z11system_initv+0x40>)
 80055ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b0:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <_Z11system_initv+0x44>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 80055b8:	e002      	b.n	80055c0 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <_Z11system_initv+0x44>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800
 80055d0:	2000045c 	.word	0x2000045c

080055d4 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <_Z22system_run_active_modev+0x1c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 80055e0:	f7ff fbb2 	bl	8004d48 <_Z15normal_mode_runv>
			break;
 80055e4:	e002      	b.n	80055ec <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 80055e6:	f7ff fb49 	bl	8004c7c <_Z20fail_silent_mode_runv>
			break;
 80055ea:	bf00      	nop
	}
}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2000045c 	.word	0x2000045c

080055f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <SystemInit+0x20>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <SystemInit+0x20>)
 8005600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmmm>:

#include "taskCNIreceiveData.h"
#include "CNI.h"

void taskCNIreceiveData_constructor(taskCNIreceiveData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t rxTimeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIreceiveData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4906      	ldr	r1, [pc, #24]	; (8005650 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmmm+0x38>)
 8005636:	f000 fd4b 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	615a      	str	r2, [r3, #20]
	me->mRxTimeout_ = rxTimeout;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	619a      	str	r2, [r3, #24]
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	08005655 	.word	0x08005655

08005654 <_Z25taskCNIreceiveData_updateP20taskCNIreceiveData_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCNIreceiveData_update(taskCNIreceiveData_t *me)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	CNI_receive_msg(me->mHandleMsg_, me->mRxTimeout_);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fb fcd8 	bl	800101c <_Z15CNI_receive_msgmm>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4904      	ldr	r1, [pc, #16]	; (80056a4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 8005692:	f000 fd1d 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	615a      	str	r2, [r3, #20]
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	080056a9 	.word	0x080056a9

080056a8 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fb fc1f 	bl	8000ef8 <_Z12CNI_send_msgm>
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm>:

#define LEN_CNI_DATA 8
#define LEN_COMPARE_ATTITUDE_CNI_DATA 24

void taskCompareAttitude_constructor(taskCompareAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsgAttitude1, uint32_t handleMsgAttitude2, uint32_t handleMsgAttitude3, uint32_t handleMsg)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCompareAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	4909      	ldr	r1, [pc, #36]	; (8005708 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm+0x44>)
 80056e2:	f000 fcf5 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsgAttitude1_ = handleMsgAttitude1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	615a      	str	r2, [r3, #20]
	me->mHandleMsgAttitude2_ = handleMsgAttitude2;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	619a      	str	r2, [r3, #24]
	me->mHandleMsgAttitude3_ = handleMsgAttitude3;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	61da      	str	r2, [r3, #28]
	me->mHandleMsg_ = handleMsg;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	0800570d 	.word	0x0800570d

0800570c <_Z26taskCompareAttitude_updateP21taskCompareAttitude_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCompareAttitude_update(taskCompareAttitude_t *me)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b098      	sub	sp, #96	; 0x60
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	uint8_t dataCNI[LEN_CNI_DATA];
	uint8_t dataCNIcompareAttitude[LEN_COMPARE_ATTITUDE_CNI_DATA];
	uint32_t lenDataReadFromCNI = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
	float comparePitch12, compareRoll12;
	float comparePitch13, compareRoll13;
	float comparePitch23, compareRoll23;

	// Leer los datos de pitch y roll de las 3 placas, de la tabla CNI
	CNI_get_msg_content(me->mHandleMsgAttitude1_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6958      	ldr	r0, [r3, #20]
 800571c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005720:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005724:	2208      	movs	r2, #8
 8005726:	f7fb fdd1 	bl	80012cc <_Z19CNI_get_msg_contentmPhmPm>
 800572a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch1, dataCNI, 4);
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll1, &dataCNI[4], 4);
 8005730:	637b      	str	r3, [r7, #52]	; 0x34

	CNI_get_msg_content(me->mHandleMsgAttitude2_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6998      	ldr	r0, [r3, #24]
 8005736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800573a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800573e:	2208      	movs	r2, #8
 8005740:	f7fb fdc4 	bl	80012cc <_Z19CNI_get_msg_contentmPhmPm>
 8005744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch2, dataCNI, 4);
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
 8005748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll2, &dataCNI[4], 4);
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CNI_get_msg_content(me->mHandleMsgAttitude3_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69d8      	ldr	r0, [r3, #28]
 8005750:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005754:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005758:	2208      	movs	r2, #8
 800575a:	f7fb fdb7 	bl	80012cc <_Z19CNI_get_msg_contentmPhmPm>
 800575e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch3, dataCNI, 4);
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll3, &dataCNI[4], 4);
 8005764:	627b      	str	r3, [r7, #36]	; 0x24

	// Calcular los residuos 12, 13, 23
	comparePitch12 = fabs(pitch1 - pitch2);
 8005766:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800576a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800576e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005772:	eef0 7ae7 	vabs.f32	s15, s15
 8005776:	edc7 7a08 	vstr	s15, [r7, #32]
	comparePitch13 = fabs(pitch1 - pitch3);
 800577a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800577e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005786:	eef0 7ae7 	vabs.f32	s15, s15
 800578a:	edc7 7a06 	vstr	s15, [r7, #24]
	comparePitch23 = fabs(pitch2 - pitch3);
 800578e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005792:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579a:	eef0 7ae7 	vabs.f32	s15, s15
 800579e:	edc7 7a04 	vstr	s15, [r7, #16]
	compareRoll12  = fabs(roll1  - roll2);
 80057a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80057a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80057aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ae:	eef0 7ae7 	vabs.f32	s15, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
	compareRoll13  = fabs(roll1  - roll3);
 80057b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80057ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057c2:	eef0 7ae7 	vabs.f32	s15, s15
 80057c6:	edc7 7a05 	vstr	s15, [r7, #20]
	compareRoll23  = fabs(roll2  - roll3);
 80057ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80057ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d6:	eef0 7ae7 	vabs.f32	s15, s15
 80057da:	edc7 7a03 	vstr	s15, [r7, #12]
 80057de:	6a3b      	ldr	r3, [r7, #32]

	// Convertir los datos en bytes
	memcpy(dataCNIcompareAttitude     , &comparePitch12 , 4);
 80057e0:	643b      	str	r3, [r7, #64]	; 0x40
 80057e2:	69fb      	ldr	r3, [r7, #28]
	memcpy(&dataCNIcompareAttitude[4] , &compareRoll12  , 4);
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
 80057e6:	69bb      	ldr	r3, [r7, #24]
	memcpy(&dataCNIcompareAttitude[8] , &comparePitch13 , 4);
 80057e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ea:	697b      	ldr	r3, [r7, #20]
	memcpy(&dataCNIcompareAttitude[12], &compareRoll13  , 4);
 80057ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ee:	693b      	ldr	r3, [r7, #16]
	memcpy(&dataCNIcompareAttitude[16], &comparePitch23 , 4);
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
 80057f2:	68fb      	ldr	r3, [r7, #12]
	memcpy(&dataCNIcompareAttitude[20], &compareRoll23  , 4);
 80057f4:	657b      	str	r3, [r7, #84]	; 0x54

	// Actualizar los valores en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataCNIcompareAttitude, LEN_COMPARE_ATTITUDE_CNI_DATA);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80057fe:	2218      	movs	r2, #24
 8005800:	4618      	mov	r0, r3
 8005802:	f7fb fcc7 	bl	8001194 <_Z22CNI_update_msg_contentmPhm>
}
 8005806:	bf00      	nop
 8005808:	3760      	adds	r7, #96	; 0x60
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>:
#include "CNI.h"

#define LEN_ATTITUDE_CNI_DATA 8

void taskEstimateAttitude_constructor(taskEstimateAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskEstimateAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4904      	ldr	r1, [pc, #16]	; (8005840 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm+0x30>)
 800582e:	f000 fc4f 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	615a      	str	r2, [r3, #20]
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08005845 	.word	0x08005845

08005844 <_Z27taskEstimateAttitude_updateP22taskEstimateAttitude_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskEstimateAttitude_update(taskEstimateAttitude_t *me)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	attitudeData_t outputData;
	uint8_t dataForCni[LEN_ATTITUDE_CNI_DATA];

	attitudeEstimator_update();
 800584c:	f7fb fe48 	bl	80014e0 <_Z24attitudeEstimator_updatev>

	// Convertir los datos del estimador en bytes
	attitudeEstimator_read_data(&outputData);
 8005850:	f107 0310 	add.w	r3, r7, #16
 8005854:	4618      	mov	r0, r3
 8005856:	f7fb feff 	bl	8001658 <_Z27attitudeEstimator_read_dataP14attitudeData_t>
 800585a:	693b      	ldr	r3, [r7, #16]
	memcpy(dataForCni    , &outputData.mPitch_, 4);
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	697b      	ldr	r3, [r7, #20]
	memcpy(&dataForCni[4], &outputData.mRoll_ , 4);
 8005860:	60fb      	str	r3, [r7, #12]

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_ATTITUDE_CNI_DATA);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f107 0108 	add.w	r1, r7, #8
 800586a:	2208      	movs	r2, #8
 800586c:	4618      	mov	r0, r3
 800586e:	f7fb fc91 	bl	8001194 <_Z22CNI_update_msg_contentmPhm>
}
 8005872:	bf00      	nop
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4904      	ldr	r1, [pc, #16]	; (80058ac <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 800589a:	f000 fc19 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	615a      	str	r2, [r3, #20]
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	080058cd 	.word	0x080058cd

080058b0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2101      	movs	r1, #1
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fc f996 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fc f979 	bl	8001bd0 <_ZN5STM324gpio6toggleEv>
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm>:
// ================================================

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, STM32::gpio *led, uint32_t handleMsg)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4907      	ldr	r1, [pc, #28]	; (8005924 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm+0x3c>)
 8005906:	f000 fbe3 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	615a      	str	r2, [r3, #20]
	me->mLED_ = led;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	635a      	str	r2, [r3, #52]	; 0x34
	me->mHandleMsg_ = handleMsg;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
	faultInjectorIMUstuckAt_constructor(&_faultInjector, INITIAL_DELAY_MID_AIR);

#elif SIMULATE_FAULT_IMU == 4
	faultInjectorIMUinconsistent_constructor(&_faultInjector, INITIAL_DELAY_MID_AIR);
#endif
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08005ad1 	.word	0x08005ad1

08005928 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:
	timeTriggeredTask_destructor(&me->super);
}

// Ejecuta una rutina de calibración de la IMU
void taskIMUgetData_start(taskIMUgetData_t *me)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	IMUData sampleData;
	uint32_t i;

	me->mLED_->write(GPIO_ST::HIGH);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	2101      	movs	r1, #1
 8005936:	4618      	mov	r0, r3
 8005938:	f7fc f95a 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>

	me->mIMUoffsetData_.accelX = 0;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
	me->mIMUoffsetData_.accelY = 0;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c
	me->mIMUoffsetData_.accelZ = 0;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
	me->mIMUoffsetData_.gyroX  = 0;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	61da      	str	r2, [r3, #28]
	me->mIMUoffsetData_.gyroY  = 0;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
	me->mIMUoffsetData_.gyroZ  = 0;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_Delay(1000);
 800596c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005970:	f000 fc52 	bl	8006218 <HAL_Delay>

	// Mido "N" muestras
	for(i = 0; i < N_CALIBRATION_SAMPLES ; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	e054      	b.n	8005a24 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0xfc>
	{
		me->mIMU_->save_data();
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
		me->mIMU_->read_data(&sampleData);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3310      	adds	r3, #16
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f107 0108 	add.w	r1, r7, #8
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3

		me->mIMUoffsetData_.accelX += sampleData.accelX;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80059a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80059aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		me->mIMUoffsetData_.accelY += sampleData.accelY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80059ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80059be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		me->mIMUoffsetData_.accelZ += sampleData.accelZ;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80059ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80059d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		me->mIMUoffsetData_.gyroX  += sampleData.gyroX;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	ed93 7a07 	vldr	s14, [r3, #28]
 80059e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	edc3 7a07 	vstr	s15, [r3, #28]
		me->mIMUoffsetData_.gyroY  += sampleData.gyroY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80059f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80059fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	edc3 7a08 	vstr	s15, [r3, #32]
		me->mIMUoffsetData_.gyroZ  += sampleData.gyroZ;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005a0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		HAL_Delay(50);
 8005a18:	2032      	movs	r0, #50	; 0x32
 8005a1a:	f000 fbfd 	bl	8006218 <HAL_Delay>
	for(i = 0; i < N_CALIBRATION_SAMPLES ; i++)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	3301      	adds	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b63      	cmp	r3, #99	; 0x63
 8005a28:	d9a7      	bls.n	800597a <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x52>
	}

	// Calculo promedio para saber el offset
	me->mIMUoffsetData_.accelX /= N_CALIBRATION_SAMPLES;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005a30:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	me->mIMUoffsetData_.accelY /= N_CALIBRATION_SAMPLES;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005a44:	eddf 6a21 	vldr	s13, [pc, #132]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	me->mIMUoffsetData_.accelZ /= N_CALIBRATION_SAMPLES;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005a58:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	me->mIMUoffsetData_.accelZ -= 1.0;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	me->mIMUoffsetData_.gyroX  /= N_CALIBRATION_SAMPLES;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005a80:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005a84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	edc3 7a07 	vstr	s15, [r3, #28]
	me->mIMUoffsetData_.gyroY  /= N_CALIBRATION_SAMPLES;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	ed93 7a08 	vldr	s14, [r3, #32]
 8005a94:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	edc3 7a08 	vstr	s15, [r3, #32]
	me->mIMUoffsetData_.gyroZ  /= N_CALIBRATION_SAMPLES;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005aa8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005acc <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	// Simulación de fallas de la IMU en medio del vuelo
#if SIMULATE_FAULT_IMU > 0
	stateMachine_init((stateMachine_t*)&_faultInjector);
#endif

	me->mLED_->write(GPIO_ST::LOW);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fc f897 	bl	8001bf0 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8005ac2:	bf00      	nop
 8005ac4:	3728      	adds	r7, #40	; 0x28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	42c80000 	.word	0x42c80000

08005ad0 <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b095      	sub	sp, #84	; 0x54
 8005ad4:	af04      	add	r7, sp, #16
 8005ad6:	6078      	str	r0, [r7, #4]
	IMUData imuData;
#if SIMULATE_FAULT_IMU > 0
	evTick_t tickEvent = { SIG_TICK, &imuData };
#endif

	me->mIMU_->save_data();
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
	me->mIMU_->read_data(&imuData);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3310      	adds	r3, #16
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f107 010c 	add.w	r1, r7, #12
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3

	// Se corrige con los offsets
	imuData.accelX -= me->mIMUoffsetData_.accelX;
 8005afe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b0c:	edc7 7a07 	vstr	s15, [r7, #28]
	imuData.accelY -= me->mIMUoffsetData_.accelY;
 8005b10:	ed97 7a08 	vldr	s14, [r7, #32]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1e:	edc7 7a08 	vstr	s15, [r7, #32]
	imuData.accelZ -= me->mIMUoffsetData_.accelZ;
 8005b22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	imuData.gyroX  -= me->mIMUoffsetData_.gyroX;
 8005b34:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b42:	edc7 7a04 	vstr	s15, [r7, #16]
	imuData.gyroY  -= me->mIMUoffsetData_.gyroY;
 8005b46:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b54:	edc7 7a05 	vstr	s15, [r7, #20]
	imuData.gyroZ  -= me->mIMUoffsetData_.gyroZ;
 8005b58:	ed97 7a06 	vldr	s14, [r7, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b66:	edc7 7a06 	vstr	s15, [r7, #24]
	stateMachine_dispatch((stateMachine_t*)&_faultInjector, (event_t*)&tickEvent);
#endif
// ================================================

	// Se le pasan las mediciones del sensor al attitude estimator
	attitudeEstimator_set_imu_data(imuData);
 8005b6a:	466c      	mov	r4, sp
 8005b6c:	f107 031c 	add.w	r3, r7, #28
 8005b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b7e:	f7fb fc55 	bl	800142c <_Z30attitudeEstimator_set_imu_data7IMUData>

	// Convertir los datos de la IMU en bytes
	make_imu_data_for_cni(imuData, dataForCni);
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	466c      	mov	r4, sp
 8005b8a:	f107 031c 	add.w	r3, r7, #28
 8005b8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b9c:	f000 f80c 	bl	8005bb8 <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005ba8:	2218      	movs	r2, #24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fb faf2 	bl	8001194 <_Z22CNI_update_msg_contentmPhm>
}
 8005bb0:	bf00      	nop
 8005bb2:	3744      	adds	r7, #68	; 0x44
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd90      	pop	{r4, r7, pc}

08005bb8 <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 8005bb8:	b084      	sub	sp, #16
 8005bba:	b490      	push	{r4, r7}
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	f107 0408 	add.w	r4, r7, #8
 8005bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005bc6:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	3304      	adds	r3, #4
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	330c      	adds	r3, #12
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	3310      	adds	r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	3314      	adds	r3, #20
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	601a      	str	r2, [r3, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc90      	pop	{r4, r7}
 8005bfa:	b004      	add	sp, #16
 8005bfc:	4770      	bx	lr
	...

08005c00 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	490d      	ldr	r1, [pc, #52]	; (8005c54 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 8005c1e:	f000 fa57 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 8005c2e:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005c40:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2209      	movs	r2, #9
 8005c48:	609a      	str	r2, [r3, #8]
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08005c77 	.word	0x08005c77
 8005c58:	40003000 	.word	0x40003000

08005c5c <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 fe64 	bl	8007936 <HAL_IWDG_Init>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fea6 	bl	80079d4 <HAL_IWDG_Refresh>
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	605a      	str	r2, [r3, #4]
 8005ca0:	609a      	str	r2, [r3, #8]
 8005ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	605a      	str	r2, [r3, #4]
 8005cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005cae:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <MX_TIM5_Init+0x98>)
 8005cb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cb6:	226b      	movs	r2, #107	; 0x6b
 8005cb8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cc6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005cd4:	4813      	ldr	r0, [pc, #76]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cd6:	f003 fb69 	bl	80093ac <HAL_TIM_Base_Init>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005ce0:	f7fe ffc6 	bl	8004c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005cea:	f107 0310 	add.w	r3, r7, #16
 8005cee:	4619      	mov	r1, r3
 8005cf0:	480c      	ldr	r0, [pc, #48]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005cf2:	f003 fda7 	bl	8009844 <HAL_TIM_ConfigClockSource>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005cfc:	f7fe ffb8 	bl	8004c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <MX_TIM5_Init+0x94>)
 8005d0e:	f004 f9b3 	bl	800a078 <HAL_TIMEx_MasterConfigSynchronization>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005d18:	f7fe ffaa 	bl	8004c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005d1c:	bf00      	nop
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000460 	.word	0x20000460
 8005d28:	40000c00 	.word	0x40000c00

08005d2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <HAL_TIM_Base_MspInit+0x44>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d113      	bne.n	8005d66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <HAL_TIM_Base_MspInit+0x48>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_TIM_Base_MspInit+0x48>)
 8005d44:	f043 0308 	orr.w	r3, r3, #8
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <HAL_TIM_Base_MspInit+0x48>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005d56:	2200      	movs	r2, #0
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2032      	movs	r0, #50	; 0x32
 8005d5c:	f001 fa9f 	bl	800729e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005d60:	2032      	movs	r0, #50	; 0x32
 8005d62:	f001 fab8 	bl	80072d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40023800 	.word	0x40023800

08005d78 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8005d88:	6053      	str	r3, [r2, #4]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	2000051c 	.word	0x2000051c

08005d9c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e008      	b.n	8005dc4 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3302      	adds	r3, #2
 8005db8:	2100      	movs	r1, #0
 8005dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b13      	cmp	r3, #19
 8005dc8:	d9f3      	bls.n	8005db2 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 8005dd0:	4a06      	ldr	r2, [pc, #24]	; (8005dec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6593      	str	r3, [r2, #88]	; 0x58
	_instance.mSyncExecuted_ = 0;
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	2000051c 	.word	0x2000051c

08005df0 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 fbb3 	bl	8009564 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a06      	ldr	r2, [pc, #24]	; (8005e1c <_Z27timeTriggeredScheduler_initv+0x2c>)
 8005e04:	210e      	movs	r1, #14
 8005e06:	4618      	mov	r0, r3
 8005e08:	f003 fe4a 	bl	8009aa0 <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 8005e0c:	4b02      	ldr	r3, [pc, #8]	; (8005e18 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	2000051c 	.word	0x2000051c
 8005e1c:	08005d79 	.word	0x08005d79

08005e20 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <_Z28timeTriggeredScheduler_startv+0x14>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f003 fb23 	bl	8009474 <HAL_TIM_Base_Start_IT>
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	2000051c 	.word	0x2000051c

08005e38 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e42:	b672      	cpsid	i
}
 8005e44:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 8005e46:	4b49      	ldr	r3, [pc, #292]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <_Z31timeTriggeredScheduler_dispatchv+0x62>
	{
		_instance.mTicks_--;
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e60:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 8005e62:	2301      	movs	r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
		if(_instance.mSyncExecuted_ == 1)
 8005e66:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00e      	beq.n	8005e9a <_Z31timeTriggeredScheduler_dispatchv+0x62>
		{
			_instance.mSyncExecuted_ = 0;
 8005e7c:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8005e84:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a38      	ldr	r2, [pc, #224]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e8c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a35      	ldr	r2, [pc, #212]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005e96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e98:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e9a:	b662      	cpsie	i
}
 8005e9c:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 8005e9e:	e05d      	b.n	8005f5c <_Z31timeTriggeredScheduler_dispatchv+0x124>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	e026      	b.n	8005ef4 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
		{
			if((task = _instance.mTaskList_[i]))
 8005ea6:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d015      	beq.n	8005eee <_Z31timeTriggeredScheduler_dispatchv+0xb6>
			{
				if( (--(task->mDelayTicks_)) == 0 )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <_Z31timeTriggeredScheduler_dispatchv+0xb6>
				{
					(*(task->mTaskHandler_))(task);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
					task->mDelayTicks_ = task->mPeriodTicks_;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b13      	cmp	r3, #19
 8005ef8:	d9d5      	bls.n	8005ea6 <_Z31timeTriggeredScheduler_dispatchv+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005efa:	b672      	cpsid	i
}
 8005efc:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 8005efe:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d021      	beq.n	8005f54 <_Z31timeTriggeredScheduler_dispatchv+0x11c>
		{
			_instance.mTicks_--;
 8005f10:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f18:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
			if(_instance.mSyncExecuted_ == 1)
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			{
				_instance.mSyncExecuted_ = 0;
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f44:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005f4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e001      	b.n	8005f58 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			}
#endif
		}
		else
		{
			updateRequired = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f58:	b662      	cpsie	i
}
 8005f5a:	bf00      	nop
	while(updateRequired)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d19e      	bne.n	8005ea0 <_Z31timeTriggeredScheduler_dispatchv+0x68>
		}

		__enable_irq();
	}
	__asm__("wfi");
 8005f62:	bf30      	wfi
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	2000051c 	.word	0x2000051c

08005f70 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8005f7c:	e002      	b.n	8005f84 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8005f84:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b13      	cmp	r3, #19
 8005f96:	d9f2      	bls.n	8005f7e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b14      	cmp	r3, #20
 8005f9c:	d101      	bne.n	8005fa2 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e006      	b.n	8005fb0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 8005fa2:	4906      	ldr	r1, [pc, #24]	; (8005fbc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	2000051c 	.word	0x2000051c

08005fc0 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4907      	ldr	r1, [pc, #28]	; (8005ffc <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 8005fde:	f000 f877 	bl	80060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	61da      	str	r2, [r3, #28]
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	08006001 	.word	0x08006001

08006000 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
#if !IS_MASTER
	uint32_t timestamp;
	uint32_t deltaTime;

	// Espero a que me llegue el mensaje de sincronización
	if( CNI_receive_msg(me->mHandleMsg_, 0) == CNI_OK )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f7fb f804 	bl	800101c <_Z15CNI_receive_msgmm>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d040      	beq.n	80060a6 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa6>
	{
		// Tomo un timestamp del mensaje recibido
		timestamp = __HAL_TIM_GET_COUNTER(_instance.mTimer_);
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	60bb      	str	r3, [r7, #8]

		// Comparo ese valor con el valor esperado
		if(timestamp > me->mExpectedTimestamp_)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d919      	bls.n	800606c <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x6c>
		{
			deltaTime = timestamp - me->mExpectedTimestamp_;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b64      	cmp	r3, #100	; 0x64
 8006046:	d901      	bls.n	800604c <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x4c>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8006048:	2364      	movs	r3, #100	; 0x64
 800604a:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ + deltaTime);
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 800604e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006050:	4b17      	ldr	r3, [pc, #92]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	440a      	add	r2, r1
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 800605e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	440a      	add	r2, r1
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	e018      	b.n	800609e <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x9e>
		}
		else
		{
			deltaTime = me->mExpectedTimestamp_ - timestamp;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x80>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 800607c:	2364      	movs	r3, #100	; 0x64
 800607e:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ - deltaTime);
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006082:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	1a8a      	subs	r2, r1, r2
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006092:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	1a8a      	subs	r2, r1, r2
 800609c:	60da      	str	r2, [r3, #12]
		}

		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xb0>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
#endif
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	2000051c 	.word	0x2000051c

080060b4 <_Z31timeTriggeredScheduler_get_timev>:

uint32_t timeTriggeredScheduler_get_time(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_instance.mTimer_);
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <_Z31timeTriggeredScheduler_get_timev+0x18>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	2000051c 	.word	0x2000051c

080060d0 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	611a      	str	r2, [r3, #16]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800610c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006112:	490e      	ldr	r1, [pc, #56]	; (800614c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006114:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006118:	e002      	b.n	8006120 <LoopCopyDataInit>

0800611a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800611a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800611c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800611e:	3304      	adds	r3, #4

08006120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006124:	d3f9      	bcc.n	800611a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006126:	4a0b      	ldr	r2, [pc, #44]	; (8006154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006128:	4c0b      	ldr	r4, [pc, #44]	; (8006158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800612a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800612c:	e001      	b.n	8006132 <LoopFillZerobss>

0800612e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800612e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006130:	3204      	adds	r2, #4

08006132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006134:	d3fb      	bcc.n	800612e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006136:	f7ff fa5d 	bl	80055f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800613a:	f004 fc0b 	bl	800a954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800613e:	f7fe fd01 	bl	8004b44 <main>
  bx  lr    
 8006142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006144:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800614c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8006150:	0800abe4 	.word	0x0800abe4
  ldr r2, =_sbss
 8006154:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8006158:	200006cc 	.word	0x200006cc

0800615c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800615c:	e7fe      	b.n	800615c <ADC_IRQHandler>

0800615e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006162:	2003      	movs	r0, #3
 8006164:	f001 f890 	bl	8007288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006168:	200f      	movs	r0, #15
 800616a:	f000 f805 	bl	8006178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800616e:	f7ff f953 	bl	8005418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <HAL_InitTick+0x54>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <HAL_InitTick+0x58>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800618e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f8b9 	bl	800730e <HAL_SYSTICK_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00e      	b.n	80061c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b0f      	cmp	r3, #15
 80061aa:	d80a      	bhi.n	80061c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061ac:	2200      	movs	r2, #0
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061b4:	f001 f873 	bl	800729e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061b8:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <HAL_InitTick+0x5c>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000260 	.word	0x20000260
 80061d0:	20000268 	.word	0x20000268
 80061d4:	20000264 	.word	0x20000264

080061d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_IncTick+0x20>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <HAL_IncTick+0x24>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	4a04      	ldr	r2, [pc, #16]	; (80061fc <HAL_IncTick+0x24>)
 80061ea:	6013      	str	r3, [r2, #0]
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000268 	.word	0x20000268
 80061fc:	2000057c 	.word	0x2000057c

08006200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return uwTick;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_GetTick+0x14>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000057c 	.word	0x2000057c

08006218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006220:	f7ff ffee 	bl	8006200 <HAL_GetTick>
 8006224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006230:	d005      	beq.n	800623e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <HAL_Delay+0x44>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800623e:	bf00      	nop
 8006240:	f7ff ffde 	bl	8006200 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	429a      	cmp	r2, r3
 800624e:	d8f7      	bhi.n	8006240 <HAL_Delay+0x28>
  {
  }
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000268 	.word	0x20000268

08006260 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0ed      	b.n	800644e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fb fa6e 	bl	8001760 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006294:	f7ff ffb4 	bl	8006200 <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800629a:	e012      	b.n	80062c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800629c:	f7ff ffb0 	bl	8006200 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b0a      	cmp	r3, #10
 80062a8:	d90b      	bls.n	80062c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2205      	movs	r2, #5
 80062ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e0c5      	b.n	800644e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0e5      	beq.n	800629c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0202 	bic.w	r2, r2, #2
 80062de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e0:	f7ff ff8e 	bl	8006200 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80062e6:	e012      	b.n	800630e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80062e8:	f7ff ff8a 	bl	8006200 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b0a      	cmp	r3, #10
 80062f4:	d90b      	bls.n	800630e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2205      	movs	r2, #5
 8006306:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e09f      	b.n	800644e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7e1b      	ldrb	r3, [r3, #24]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d108      	bne.n	8006336 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e007      	b.n	8006346 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006344:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7e5b      	ldrb	r3, [r3, #25]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d108      	bne.n	8006360 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e007      	b.n	8006370 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7e9b      	ldrb	r3, [r3, #26]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d108      	bne.n	800638a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0220 	orr.w	r2, r2, #32
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e007      	b.n	800639a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0220 	bic.w	r2, r2, #32
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	7edb      	ldrb	r3, [r3, #27]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0210 	bic.w	r2, r2, #16
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e007      	b.n	80063c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0210 	orr.w	r2, r2, #16
 80063c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7f1b      	ldrb	r3, [r3, #28]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d108      	bne.n	80063de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0208 	orr.w	r2, r2, #8
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e007      	b.n	80063ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0208 	bic.w	r2, r2, #8
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7f5b      	ldrb	r3, [r3, #29]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d108      	bne.n	8006408 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0204 	orr.w	r2, r2, #4
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e007      	b.n	8006418 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0204 	bic.w	r2, r2, #4
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	ea42 0103 	orr.w	r1, r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800646e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d003      	beq.n	800647e <HAL_CAN_ConfigFilter+0x26>
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	2b02      	cmp	r3, #2
 800647a:	f040 80be 	bne.w	80065fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800647e:	4b65      	ldr	r3, [pc, #404]	; (8006614 <HAL_CAN_ConfigFilter+0x1bc>)
 8006480:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006488:	f043 0201 	orr.w	r2, r3, #1
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006498:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	431a      	orrs	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	2201      	movs	r2, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	401a      	ands	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d123      	bne.n	8006528 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006502:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	3248      	adds	r2, #72	; 0x48
 8006508:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800651c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	3348      	adds	r3, #72	; 0x48
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	440b      	add	r3, r1
 8006526:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d122      	bne.n	8006576 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	431a      	orrs	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006550:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	3248      	adds	r2, #72	; 0x48
 8006556:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800656a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	3348      	adds	r3, #72	; 0x48
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	440b      	add	r3, r1
 8006574:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	43db      	mvns	r3, r3
 8006588:	401a      	ands	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006590:	e007      	b.n	80065a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	431a      	orrs	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	401a      	ands	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80065bc:	e007      	b.n	80065ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d107      	bne.n	80065e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	431a      	orrs	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065ec:	f023 0201 	bic.w	r2, r3, #1
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e006      	b.n	8006608 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40006400 	.word	0x40006400

08006618 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d12e      	bne.n	800668a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006644:	f7ff fddc 	bl	8006200 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800664a:	e012      	b.n	8006672 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800664c:	f7ff fdd8 	bl	8006200 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b0a      	cmp	r3, #10
 8006658:	d90b      	bls.n	8006672 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2205      	movs	r2, #5
 800666a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e012      	b.n	8006698 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e006      	b.n	8006698 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b089      	sub	sp, #36	; 0x24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80066be:	7ffb      	ldrb	r3, [r7, #31]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d003      	beq.n	80066cc <HAL_CAN_AddTxMessage+0x2c>
 80066c4:	7ffb      	ldrb	r3, [r7, #31]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	f040 80ad 	bne.w	8006826 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8095 	beq.w	8006816 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	0e1b      	lsrs	r3, r3, #24
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80066f6:	2201      	movs	r2, #1
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	409a      	lsls	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	6809      	ldr	r1, [r1, #0]
 8006716:	431a      	orrs	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3318      	adds	r3, #24
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	440b      	add	r3, r1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e00f      	b.n	8006744 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800672e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006738:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3318      	adds	r3, #24
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	440b      	add	r3, r1
 8006742:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3318      	adds	r3, #24
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	440b      	add	r3, r1
 8006754:	3304      	adds	r3, #4
 8006756:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	7d1b      	ldrb	r3, [r3, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d111      	bne.n	8006784 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3318      	adds	r3, #24
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	4413      	add	r3, r2
 800676c:	3304      	adds	r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	6811      	ldr	r1, [r2, #0]
 8006774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3318      	adds	r3, #24
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	440b      	add	r3, r1
 8006780:	3304      	adds	r3, #4
 8006782:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3307      	adds	r3, #7
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	061a      	lsls	r2, r3, #24
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3306      	adds	r3, #6
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3305      	adds	r3, #5
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	4313      	orrs	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	3204      	adds	r2, #4
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	4610      	mov	r0, r2
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	6811      	ldr	r1, [r2, #0]
 80067ac:	ea43 0200 	orr.w	r2, r3, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	440b      	add	r3, r1
 80067b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80067ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3303      	adds	r3, #3
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	061a      	lsls	r2, r3, #24
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3302      	adds	r3, #2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3301      	adds	r3, #1
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	4313      	orrs	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	4610      	mov	r0, r2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	ea43 0200 	orr.w	r2, r3, r0
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80067f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3318      	adds	r3, #24
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	6811      	ldr	r1, [r2, #0]
 8006804:	f043 0201 	orr.w	r2, r3, #1
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3318      	adds	r3, #24
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	440b      	add	r3, r1
 8006810:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e00e      	b.n	8006834 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e006      	b.n	8006834 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3724      	adds	r7, #36	; 0x24
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006850:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d002      	beq.n	800685e <HAL_CAN_AbortTxRequest+0x1e>
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d128      	bne.n	80068b0 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006876:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006890:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80068aa:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e006      	b.n	80068be <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d002      	beq.n	80068ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d11d      	bne.n	8006926 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006948:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d003      	beq.n	8006958 <HAL_CAN_GetRxMessage+0x24>
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b02      	cmp	r3, #2
 8006954:	f040 80f3 	bne.w	8006b3e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10e      	bne.n	800697c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d116      	bne.n	800699a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0e7      	b.n	8006b4c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e0d8      	b.n	8006b4c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	331b      	adds	r3, #27
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	4413      	add	r3, r2
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0204 	and.w	r2, r3, #4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	331b      	adds	r3, #27
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	4413      	add	r3, r2
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	0d5b      	lsrs	r3, r3, #21
 80069c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e00b      	b.n	80069ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	331b      	adds	r3, #27
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4413      	add	r3, r2
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	331b      	adds	r3, #27
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	4413      	add	r3, r2
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0202 	and.w	r2, r3, #2
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	331b      	adds	r3, #27
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	331b      	adds	r3, #27
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	4413      	add	r3, r2
 8006a24:	3304      	adds	r3, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	331b      	adds	r3, #27
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	0a1a      	lsrs	r2, r3, #8
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	0c1a      	lsrs	r2, r3, #16
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	0e1a      	lsrs	r2, r3, #24
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	3303      	adds	r3, #3
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	0a1a      	lsrs	r2, r3, #8
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	3305      	adds	r3, #5
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	0c1a      	lsrs	r2, r3, #16
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	3306      	adds	r3, #6
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	0e1a      	lsrs	r2, r3, #24
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3307      	adds	r3, #7
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0220 	orr.w	r2, r2, #32
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	e007      	b.n	8006b3a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0220 	orr.w	r2, r2, #32
 8006b38:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e006      	b.n	8006b4c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b6c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d002      	beq.n	8006b7a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d10f      	bne.n	8006b9a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e005      	b.n	8006b9a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d002      	beq.n	8006bc6 <HAL_CAN_ActivateNotification+0x1e>
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d109      	bne.n	8006bda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6959      	ldr	r1, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e006      	b.n	8006be8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d002      	beq.n	8006c12 <HAL_CAN_DeactivateNotification+0x1e>
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d10a      	bne.n	8006c28 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6959      	ldr	r1, [r3, #20]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	43da      	mvns	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	400a      	ands	r2, r1
 8006c22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e006      	b.n	8006c36 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08a      	sub	sp, #40	; 0x28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d07c      	beq.n	8006d82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d023      	beq.n	8006cda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f983 	bl	8006fb0 <HAL_CAN_TxMailbox0CompleteCallback>
 8006caa:	e016      	b.n	8006cda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbe:	e00c      	b.n	8006cda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	e002      	b.n	8006cda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f989 	bl	8006fec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d024      	beq.n	8006d2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f963 	bl	8006fc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8006cfe:	e016      	b.n	8006d2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
 8006d12:	e00c      	b.n	8006d2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
 8006d26:	e002      	b.n	8006d2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f969 	bl	8007000 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d024      	beq.n	8006d82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f943 	bl	8006fd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8006d52:	e016      	b.n	8006d82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
 8006d66:	e00c      	b.n	8006d82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7a:	e002      	b.n	8006d82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f949 	bl	8007014 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f003 0310 	and.w	r3, r3, #16
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2210      	movs	r2, #16
 8006da4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d006      	beq.n	8006dc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f930 	bl	8007028 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fe f92f 	bl	8005044 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00c      	beq.n	8006e0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f003 0310 	and.w	r3, r3, #16
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2210      	movs	r2, #16
 8006e08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d006      	beq.n	8006e2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2208      	movs	r2, #8
 8006e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f912 	bl	8007050 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8f9 	bl	800703c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2210      	movs	r2, #16
 8006e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8fc 	bl	8007064 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2208      	movs	r2, #8
 8006e86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f8f5 	bl	8007078 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d07b      	beq.n	8006f90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d072      	beq.n	8006f88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d043      	beq.n	8006f88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d03e      	beq.n	8006f88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f10:	2b60      	cmp	r3, #96	; 0x60
 8006f12:	d02b      	beq.n	8006f6c <HAL_CAN_IRQHandler+0x32a>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d82e      	bhi.n	8006f76 <HAL_CAN_IRQHandler+0x334>
 8006f18:	2b50      	cmp	r3, #80	; 0x50
 8006f1a:	d022      	beq.n	8006f62 <HAL_CAN_IRQHandler+0x320>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d82a      	bhi.n	8006f76 <HAL_CAN_IRQHandler+0x334>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d019      	beq.n	8006f58 <HAL_CAN_IRQHandler+0x316>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d826      	bhi.n	8006f76 <HAL_CAN_IRQHandler+0x334>
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d010      	beq.n	8006f4e <HAL_CAN_IRQHandler+0x30c>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d822      	bhi.n	8006f76 <HAL_CAN_IRQHandler+0x334>
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d002      	beq.n	8006f3a <HAL_CAN_IRQHandler+0x2f8>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d005      	beq.n	8006f44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006f38:	e01d      	b.n	8006f76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	f043 0308 	orr.w	r3, r3, #8
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f42:	e019      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	f043 0310 	orr.w	r3, r3, #16
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f4c:	e014      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	f043 0320 	orr.w	r3, r3, #32
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f56:	e00f      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f60:	e00a      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f6a:	e005      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f74:	e000      	b.n	8006f78 <HAL_CAN_IRQHandler+0x336>
            break;
 8006f76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f872 	bl	800708c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <__NVIC_SetPriorityGrouping+0x40>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070bc:	4013      	ands	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <__NVIC_SetPriorityGrouping+0x44>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ce:	4a04      	ldr	r2, [pc, #16]	; (80070e0 <__NVIC_SetPriorityGrouping+0x40>)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	60d3      	str	r3, [r2, #12]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	e000ed00 	.word	0xe000ed00
 80070e4:	05fa0000 	.word	0x05fa0000

080070e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <__NVIC_GetPriorityGrouping+0x18>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	f003 0307 	and.w	r3, r3, #7
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	db0b      	blt.n	800712e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <__NVIC_EnableIRQ+0x38>)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	2001      	movs	r0, #1
 8007126:	fa00 f202 	lsl.w	r2, r0, r2
 800712a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e100 	.word	0xe000e100

08007140 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800714a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714e:	2b00      	cmp	r3, #0
 8007150:	db12      	blt.n	8007178 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	f003 021f 	and.w	r2, r3, #31
 8007158:	490a      	ldr	r1, [pc, #40]	; (8007184 <__NVIC_DisableIRQ+0x44>)
 800715a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2001      	movs	r0, #1
 8007162:	fa00 f202 	lsl.w	r2, r0, r2
 8007166:	3320      	adds	r3, #32
 8007168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800716c:	f3bf 8f4f 	dsb	sy
}
 8007170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007172:	f3bf 8f6f 	isb	sy
}
 8007176:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	e000e100 	.word	0xe000e100

08007188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007198:	2b00      	cmp	r3, #0
 800719a:	db0a      	blt.n	80071b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	490c      	ldr	r1, [pc, #48]	; (80071d4 <__NVIC_SetPriority+0x4c>)
 80071a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a6:	0112      	lsls	r2, r2, #4
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	440b      	add	r3, r1
 80071ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071b0:	e00a      	b.n	80071c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	4908      	ldr	r1, [pc, #32]	; (80071d8 <__NVIC_SetPriority+0x50>)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	3b04      	subs	r3, #4
 80071c0:	0112      	lsls	r2, r2, #4
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	440b      	add	r3, r1
 80071c6:	761a      	strb	r2, [r3, #24]
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	e000e100 	.word	0xe000e100
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	; 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f1c3 0307 	rsb	r3, r3, #7
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	bf28      	it	cs
 80071fa:	2304      	movcs	r3, #4
 80071fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	3304      	adds	r3, #4
 8007202:	2b06      	cmp	r3, #6
 8007204:	d902      	bls.n	800720c <NVIC_EncodePriority+0x30>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3b03      	subs	r3, #3
 800720a:	e000      	b.n	800720e <NVIC_EncodePriority+0x32>
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	fa02 f303 	lsl.w	r3, r2, r3
 800721a:	43da      	mvns	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	401a      	ands	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	43d9      	mvns	r1, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007234:	4313      	orrs	r3, r2
         );
}
 8007236:	4618      	mov	r0, r3
 8007238:	3724      	adds	r7, #36	; 0x24
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3b01      	subs	r3, #1
 8007250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007254:	d301      	bcc.n	800725a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007256:	2301      	movs	r3, #1
 8007258:	e00f      	b.n	800727a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800725a:	4a0a      	ldr	r2, [pc, #40]	; (8007284 <SysTick_Config+0x40>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3b01      	subs	r3, #1
 8007260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007262:	210f      	movs	r1, #15
 8007264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007268:	f7ff ff8e 	bl	8007188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <SysTick_Config+0x40>)
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <SysTick_Config+0x40>)
 8007274:	2207      	movs	r2, #7
 8007276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	e000e010 	.word	0xe000e010

08007288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff05 	bl	80070a0 <__NVIC_SetPriorityGrouping>
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	4603      	mov	r3, r0
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072b0:	f7ff ff1a 	bl	80070e8 <__NVIC_GetPriorityGrouping>
 80072b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	6978      	ldr	r0, [r7, #20]
 80072bc:	f7ff ff8e 	bl	80071dc <NVIC_EncodePriority>
 80072c0:	4602      	mov	r2, r0
 80072c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff5d 	bl	8007188 <__NVIC_SetPriority>
}
 80072ce:	bf00      	nop
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	4603      	mov	r3, r0
 80072de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff ff0d 	bl	8007104 <__NVIC_EnableIRQ>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	4603      	mov	r3, r0
 80072fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff ff1d 	bl	8007140 <__NVIC_DisableIRQ>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff94 	bl	8007244 <SysTick_Config>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e175      	b.n	8007634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007348:	2201      	movs	r2, #1
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	429a      	cmp	r2, r3
 8007362:	f040 8164 	bne.w	800762e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d005      	beq.n	800737e <HAL_GPIO_Init+0x56>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d130      	bne.n	80073e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	2203      	movs	r2, #3
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073b4:	2201      	movs	r2, #1
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	f003 0201 	and.w	r2, r3, #1
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d017      	beq.n	800741c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	2203      	movs	r2, #3
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	4013      	ands	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	4313      	orrs	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d123      	bne.n	8007470 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	08da      	lsrs	r2, r3, #3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3208      	adds	r2, #8
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220f      	movs	r2, #15
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	08da      	lsrs	r2, r3, #3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3208      	adds	r2, #8
 800746a:	69b9      	ldr	r1, [r7, #24]
 800746c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	2203      	movs	r2, #3
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	43db      	mvns	r3, r3
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4013      	ands	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4313      	orrs	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80be 	beq.w	800762e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b2:	4b66      	ldr	r3, [pc, #408]	; (800764c <HAL_GPIO_Init+0x324>)
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	4a65      	ldr	r2, [pc, #404]	; (800764c <HAL_GPIO_Init+0x324>)
 80074b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074bc:	6453      	str	r3, [r2, #68]	; 0x44
 80074be:	4b63      	ldr	r3, [pc, #396]	; (800764c <HAL_GPIO_Init+0x324>)
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80074ca:	4a61      	ldr	r2, [pc, #388]	; (8007650 <HAL_GPIO_Init+0x328>)
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	3302      	adds	r3, #2
 80074d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	220f      	movs	r2, #15
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	43db      	mvns	r3, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4013      	ands	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a58      	ldr	r2, [pc, #352]	; (8007654 <HAL_GPIO_Init+0x32c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d037      	beq.n	8007566 <HAL_GPIO_Init+0x23e>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a57      	ldr	r2, [pc, #348]	; (8007658 <HAL_GPIO_Init+0x330>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d031      	beq.n	8007562 <HAL_GPIO_Init+0x23a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a56      	ldr	r2, [pc, #344]	; (800765c <HAL_GPIO_Init+0x334>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d02b      	beq.n	800755e <HAL_GPIO_Init+0x236>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a55      	ldr	r2, [pc, #340]	; (8007660 <HAL_GPIO_Init+0x338>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d025      	beq.n	800755a <HAL_GPIO_Init+0x232>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a54      	ldr	r2, [pc, #336]	; (8007664 <HAL_GPIO_Init+0x33c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01f      	beq.n	8007556 <HAL_GPIO_Init+0x22e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a53      	ldr	r2, [pc, #332]	; (8007668 <HAL_GPIO_Init+0x340>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d019      	beq.n	8007552 <HAL_GPIO_Init+0x22a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a52      	ldr	r2, [pc, #328]	; (800766c <HAL_GPIO_Init+0x344>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <HAL_GPIO_Init+0x226>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a51      	ldr	r2, [pc, #324]	; (8007670 <HAL_GPIO_Init+0x348>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00d      	beq.n	800754a <HAL_GPIO_Init+0x222>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a50      	ldr	r2, [pc, #320]	; (8007674 <HAL_GPIO_Init+0x34c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <HAL_GPIO_Init+0x21e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <HAL_GPIO_Init+0x350>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <HAL_GPIO_Init+0x21a>
 800753e:	2309      	movs	r3, #9
 8007540:	e012      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007542:	230a      	movs	r3, #10
 8007544:	e010      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007546:	2308      	movs	r3, #8
 8007548:	e00e      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800754a:	2307      	movs	r3, #7
 800754c:	e00c      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800754e:	2306      	movs	r3, #6
 8007550:	e00a      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007552:	2305      	movs	r3, #5
 8007554:	e008      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007556:	2304      	movs	r3, #4
 8007558:	e006      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800755a:	2303      	movs	r3, #3
 800755c:	e004      	b.n	8007568 <HAL_GPIO_Init+0x240>
 800755e:	2302      	movs	r3, #2
 8007560:	e002      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <HAL_GPIO_Init+0x240>
 8007566:	2300      	movs	r3, #0
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	f002 0203 	and.w	r2, r2, #3
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	4093      	lsls	r3, r2
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007578:	4935      	ldr	r1, [pc, #212]	; (8007650 <HAL_GPIO_Init+0x328>)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	089b      	lsrs	r3, r3, #2
 800757e:	3302      	adds	r3, #2
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007586:	4b3d      	ldr	r3, [pc, #244]	; (800767c <HAL_GPIO_Init+0x354>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075aa:	4a34      	ldr	r2, [pc, #208]	; (800767c <HAL_GPIO_Init+0x354>)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <HAL_GPIO_Init+0x354>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	43db      	mvns	r3, r3
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	4013      	ands	r3, r2
 80075be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075d4:	4a29      	ldr	r2, [pc, #164]	; (800767c <HAL_GPIO_Init+0x354>)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80075da:	4b28      	ldr	r3, [pc, #160]	; (800767c <HAL_GPIO_Init+0x354>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	43db      	mvns	r3, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	4013      	ands	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_GPIO_Init+0x354>)
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007604:	4b1d      	ldr	r3, [pc, #116]	; (800767c <HAL_GPIO_Init+0x354>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	43db      	mvns	r3, r3
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	4013      	ands	r3, r2
 8007612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <HAL_GPIO_Init+0x354>)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	f67f ae86 	bls.w	8007348 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3724      	adds	r7, #36	; 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800
 8007650:	40013800 	.word	0x40013800
 8007654:	40020000 	.word	0x40020000
 8007658:	40020400 	.word	0x40020400
 800765c:	40020800 	.word	0x40020800
 8007660:	40020c00 	.word	0x40020c00
 8007664:	40021000 	.word	0x40021000
 8007668:	40021400 	.word	0x40021400
 800766c:	40021800 	.word	0x40021800
 8007670:	40021c00 	.word	0x40021c00
 8007674:	40022000 	.word	0x40022000
 8007678:	40022400 	.word	0x40022400
 800767c:	40013c00 	.word	0x40013c00

08007680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	807b      	strh	r3, [r7, #2]
 800768c:	4613      	mov	r3, r2
 800768e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007690:	787b      	ldrb	r3, [r7, #1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007696:	887a      	ldrh	r2, [r7, #2]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800769c:	e003      	b.n	80076a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800769e:	887b      	ldrh	r3, [r7, #2]
 80076a0:	041a      	lsls	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	619a      	str	r2, [r3, #24]
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076c4:	887a      	ldrh	r2, [r7, #2]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4013      	ands	r3, r2
 80076ca:	041a      	lsls	r2, r3, #16
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	43d9      	mvns	r1, r3
 80076d0:	887b      	ldrh	r3, [r7, #2]
 80076d2:	400b      	ands	r3, r1
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	619a      	str	r2, [r3, #24]
}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e07f      	b.n	80077fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fa fafe 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2224      	movs	r2, #36	; 0x24
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007738:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007748:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	e006      	b.n	8007770 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800776e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d104      	bne.n	8007782 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6859      	ldr	r1, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <HAL_I2C_Init+0x11c>)
 800778e:	430b      	orrs	r3, r1
 8007790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1a      	ldr	r2, [r3, #32]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	02008000 	.word	0x02008000

08007808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b20      	cmp	r3, #32
 800781c:	d138      	bne.n	8007890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007828:	2302      	movs	r3, #2
 800782a:	e032      	b.n	8007892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2224      	movs	r2, #36	; 0x24
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800785a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0201 	orr.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	e000      	b.n	8007892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007890:	2302      	movs	r3, #2
  }
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d139      	bne.n	8007928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078be:	2302      	movs	r3, #2
 80078c0:	e033      	b.n	800792a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2224      	movs	r2, #36	; 0x24
 80078ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e000      	b.n	800792a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e041      	b.n	80079cc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007950:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f245 5255 	movw	r2, #21845	; 0x5555
 800795a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6852      	ldr	r2, [r2, #4]
 8007964:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6892      	ldr	r2, [r2, #8]
 800796e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007970:	f7fe fc46 	bl	8006200 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007976:	e00f      	b.n	8007998 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007978:	f7fe fc42 	bl	8006200 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b31      	cmp	r3, #49	; 0x31
 8007984:	d908      	bls.n	8007998 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e019      	b.n	80079cc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e8      	bne.n	8007978 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d005      	beq.n	80079c0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	68d2      	ldr	r2, [r2, #12]
 80079bc:	611a      	str	r2, [r3, #16]
 80079be:	e004      	b.n	80079ca <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80079c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80079e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80079fe:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	4a22      	ldr	r2, [pc, #136]	; (8007a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6413      	str	r3, [r2, #64]	; 0x40
 8007a0a:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007a16:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a22:	f7fe fbed 	bl	8006200 <HAL_GetTick>
 8007a26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a28:	e009      	b.n	8007a3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a2a:	f7fe fbe9 	bl	8006200 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a38:	d901      	bls.n	8007a3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e022      	b.n	8007a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a3e:	4b14      	ldr	r3, [pc, #80]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4a:	d1ee      	bne.n	8007a2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0f      	ldr	r2, [pc, #60]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a58:	f7fe fbd2 	bl	8006200 <HAL_GetTick>
 8007a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a5e:	e009      	b.n	8007a74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a60:	f7fe fbce 	bl	8006200 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a6e:	d901      	bls.n	8007a74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e007      	b.n	8007a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a80:	d1ee      	bne.n	8007a60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	40007000 	.word	0x40007000

08007a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e291      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8087 	beq.w	8007bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ab8:	4b96      	ldr	r3, [pc, #600]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 030c 	and.w	r3, r3, #12
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d00c      	beq.n	8007ade <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ac4:	4b93      	ldr	r3, [pc, #588]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 030c 	and.w	r3, r3, #12
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d112      	bne.n	8007af6 <HAL_RCC_OscConfig+0x62>
 8007ad0:	4b90      	ldr	r3, [pc, #576]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ade:	4b8d      	ldr	r3, [pc, #564]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06c      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x130>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d168      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e26b      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afe:	d106      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7a>
 8007b00:	4b84      	ldr	r3, [pc, #528]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a83      	ldr	r2, [pc, #524]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e02e      	b.n	8007b6c <HAL_RCC_OscConfig+0xd8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x9c>
 8007b16:	4b7f      	ldr	r3, [pc, #508]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a7e      	ldr	r2, [pc, #504]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	4b7c      	ldr	r3, [pc, #496]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a7b      	ldr	r2, [pc, #492]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e01d      	b.n	8007b6c <HAL_RCC_OscConfig+0xd8>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b38:	d10c      	bne.n	8007b54 <HAL_RCC_OscConfig+0xc0>
 8007b3a:	4b76      	ldr	r3, [pc, #472]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a75      	ldr	r2, [pc, #468]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4b73      	ldr	r3, [pc, #460]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a72      	ldr	r2, [pc, #456]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e00b      	b.n	8007b6c <HAL_RCC_OscConfig+0xd8>
 8007b54:	4b6f      	ldr	r3, [pc, #444]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a6e      	ldr	r2, [pc, #440]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4b6c      	ldr	r3, [pc, #432]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a6b      	ldr	r2, [pc, #428]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fe fb44 	bl	8006200 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b7c:	f7fe fb40 	bl	8006200 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b64      	cmp	r3, #100	; 0x64
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e21f      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b8e:	4b61      	ldr	r3, [pc, #388]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0xe8>
 8007b9a:	e014      	b.n	8007bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fe fb30 	bl	8006200 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba4:	f7fe fb2c 	bl	8006200 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b64      	cmp	r3, #100	; 0x64
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e20b      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bb6:	4b57      	ldr	r3, [pc, #348]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x110>
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d069      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bd2:	4b50      	ldr	r3, [pc, #320]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 030c 	and.w	r3, r3, #12
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bde:	4b4d      	ldr	r3, [pc, #308]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 030c 	and.w	r3, r3, #12
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d11c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x190>
 8007bea:	4b4a      	ldr	r3, [pc, #296]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d116      	bne.n	8007c24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf6:	4b47      	ldr	r3, [pc, #284]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x17a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d001      	beq.n	8007c0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e1df      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b41      	ldr	r3, [pc, #260]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	493d      	ldr	r1, [pc, #244]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c22:	e040      	b.n	8007ca6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d023      	beq.n	8007c74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c2c:	4b39      	ldr	r3, [pc, #228]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a38      	ldr	r2, [pc, #224]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fe fae2 	bl	8006200 <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c40:	f7fe fade 	bl	8006200 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e1bd      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c5e:	4b2d      	ldr	r3, [pc, #180]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4929      	ldr	r1, [pc, #164]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	600b      	str	r3, [r1, #0]
 8007c72:	e018      	b.n	8007ca6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c74:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a26      	ldr	r2, [pc, #152]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c80:	f7fe fabe 	bl	8006200 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c88:	f7fe faba 	bl	8006200 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e199      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c9a:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d038      	beq.n	8007d24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d019      	beq.n	8007cee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cba:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cbe:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc6:	f7fe fa9b 	bl	8006200 <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cce:	f7fe fa97 	bl	8006200 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e176      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x23a>
 8007cec:	e01a      	b.n	8007d24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf2:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <HAL_RCC_OscConfig+0x280>)
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfa:	f7fe fa81 	bl	8006200 <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d00:	e00a      	b.n	8007d18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d02:	f7fe fa7d 	bl	8006200 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d903      	bls.n	8007d18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e15c      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
 8007d14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d18:	4b91      	ldr	r3, [pc, #580]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1ee      	bne.n	8007d02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80a4 	beq.w	8007e7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d32:	4b8b      	ldr	r3, [pc, #556]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d3e:	4b88      	ldr	r3, [pc, #544]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	4a87      	ldr	r2, [pc, #540]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d48:	6413      	str	r3, [r2, #64]	; 0x40
 8007d4a:	4b85      	ldr	r3, [pc, #532]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d5a:	4b82      	ldr	r3, [pc, #520]	; (8007f64 <HAL_RCC_OscConfig+0x4d0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d118      	bne.n	8007d98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d66:	4b7f      	ldr	r3, [pc, #508]	; (8007f64 <HAL_RCC_OscConfig+0x4d0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a7e      	ldr	r2, [pc, #504]	; (8007f64 <HAL_RCC_OscConfig+0x4d0>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d72:	f7fe fa45 	bl	8006200 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d7a:	f7fe fa41 	bl	8006200 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b64      	cmp	r3, #100	; 0x64
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e120      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d8c:	4b75      	ldr	r3, [pc, #468]	; (8007f64 <HAL_RCC_OscConfig+0x4d0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0f0      	beq.n	8007d7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d106      	bne.n	8007dae <HAL_RCC_OscConfig+0x31a>
 8007da0:	4b6f      	ldr	r3, [pc, #444]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da4:	4a6e      	ldr	r2, [pc, #440]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dac:	e02d      	b.n	8007e0a <HAL_RCC_OscConfig+0x376>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x33c>
 8007db6:	4b6a      	ldr	r3, [pc, #424]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	4a69      	ldr	r2, [pc, #420]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc2:	4b67      	ldr	r3, [pc, #412]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	4a66      	ldr	r2, [pc, #408]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dc8:	f023 0304 	bic.w	r3, r3, #4
 8007dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dce:	e01c      	b.n	8007e0a <HAL_RCC_OscConfig+0x376>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	d10c      	bne.n	8007df2 <HAL_RCC_OscConfig+0x35e>
 8007dd8:	4b61      	ldr	r3, [pc, #388]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ddc:	4a60      	ldr	r2, [pc, #384]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dde:	f043 0304 	orr.w	r3, r3, #4
 8007de2:	6713      	str	r3, [r2, #112]	; 0x70
 8007de4:	4b5e      	ldr	r3, [pc, #376]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	4a5d      	ldr	r2, [pc, #372]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	6713      	str	r3, [r2, #112]	; 0x70
 8007df0:	e00b      	b.n	8007e0a <HAL_RCC_OscConfig+0x376>
 8007df2:	4b5b      	ldr	r3, [pc, #364]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df6:	4a5a      	ldr	r2, [pc, #360]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dfe:	4b58      	ldr	r3, [pc, #352]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e02:	4a57      	ldr	r2, [pc, #348]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	f023 0304 	bic.w	r3, r3, #4
 8007e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d015      	beq.n	8007e3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e12:	f7fe f9f5 	bl	8006200 <HAL_GetTick>
 8007e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e18:	e00a      	b.n	8007e30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e1a:	f7fe f9f1 	bl	8006200 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0ce      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e30:	4b4b      	ldr	r3, [pc, #300]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0ee      	beq.n	8007e1a <HAL_RCC_OscConfig+0x386>
 8007e3c:	e014      	b.n	8007e68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e3e:	f7fe f9df 	bl	8006200 <HAL_GetTick>
 8007e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e44:	e00a      	b.n	8007e5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e46:	f7fe f9db 	bl	8006200 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d901      	bls.n	8007e5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e0b8      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e5c:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1ee      	bne.n	8007e46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d105      	bne.n	8007e7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e6e:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	4a3b      	ldr	r2, [pc, #236]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80a4 	beq.w	8007fcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e84:	4b36      	ldr	r3, [pc, #216]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 030c 	and.w	r3, r3, #12
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d06b      	beq.n	8007f68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d149      	bne.n	8007f2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e98:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a30      	ldr	r2, [pc, #192]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7fe f9ac 	bl	8006200 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eac:	f7fe f9a8 	bl	8006200 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e087      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ebe:	4b28      	ldr	r3, [pc, #160]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69da      	ldr	r2, [r3, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	019b      	lsls	r3, r3, #6
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ef6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef8:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f04:	f7fe f97c 	bl	8006200 <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fe f978 	bl	8006200 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e057      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x478>
 8007f2a:	e04f      	b.n	8007fcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fe f962 	bl	8006200 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f40:	f7fe f95e 	bl	8006200 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e03d      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f52:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <HAL_RCC_OscConfig+0x4cc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x4ac>
 8007f5e:	e035      	b.n	8007fcc <HAL_RCC_OscConfig+0x538>
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f68:	4b1b      	ldr	r3, [pc, #108]	; (8007fd8 <HAL_RCC_OscConfig+0x544>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d028      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d121      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d11a      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f98:	4013      	ands	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d111      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800

08007fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0d0      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ff4:	4b6a      	ldr	r3, [pc, #424]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d910      	bls.n	8008024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008002:	4b67      	ldr	r3, [pc, #412]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f023 020f 	bic.w	r2, r3, #15
 800800a:	4965      	ldr	r1, [pc, #404]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	4313      	orrs	r3, r2
 8008010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008012:	4b63      	ldr	r3, [pc, #396]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0b8      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d020      	beq.n	8008072 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800803c:	4b59      	ldr	r3, [pc, #356]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4a58      	ldr	r2, [pc, #352]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008046:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008054:	4b53      	ldr	r3, [pc, #332]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	4a52      	ldr	r2, [pc, #328]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800805a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800805e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008060:	4b50      	ldr	r3, [pc, #320]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	494d      	ldr	r1, [pc, #308]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d040      	beq.n	8008100 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008086:	4b47      	ldr	r3, [pc, #284]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d115      	bne.n	80080be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e07f      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d107      	bne.n	80080ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809e:	4b41      	ldr	r3, [pc, #260]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e073      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ae:	4b3d      	ldr	r3, [pc, #244]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e06b      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080be:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f023 0203 	bic.w	r2, r3, #3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4936      	ldr	r1, [pc, #216]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d0:	f7fe f896 	bl	8006200 <HAL_GetTick>
 80080d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d6:	e00a      	b.n	80080ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d8:	f7fe f892 	bl	8006200 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e053      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ee:	4b2d      	ldr	r3, [pc, #180]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 020c 	and.w	r2, r3, #12
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d1eb      	bne.n	80080d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008100:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d210      	bcs.n	8008130 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810e:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f023 020f 	bic.w	r2, r3, #15
 8008116:	4922      	ldr	r1, [pc, #136]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	4313      	orrs	r3, r2
 800811c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d001      	beq.n	8008130 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e032      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4916      	ldr	r1, [pc, #88]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	490e      	ldr	r1, [pc, #56]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 800816a:	4313      	orrs	r3, r2
 800816c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800816e:	f000 f821 	bl	80081b4 <HAL_RCC_GetSysClockFreq>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	091b      	lsrs	r3, r3, #4
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	490a      	ldr	r1, [pc, #40]	; (80081a8 <HAL_RCC_ClockConfig+0x1cc>)
 8008180:	5ccb      	ldrb	r3, [r1, r3]
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	4a09      	ldr	r2, [pc, #36]	; (80081ac <HAL_RCC_ClockConfig+0x1d0>)
 8008188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_RCC_ClockConfig+0x1d4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fff2 	bl	8006178 <HAL_InitTick>

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00
 80081a4:	40023800 	.word	0x40023800
 80081a8:	0800ab4c 	.word	0x0800ab4c
 80081ac:	20000260 	.word	0x20000260
 80081b0:	20000264 	.word	0x20000264

080081b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081b8:	b090      	sub	sp, #64	; 0x40
 80081ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c4:	2300      	movs	r3, #0
 80081c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081cc:	4b59      	ldr	r3, [pc, #356]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f003 030c 	and.w	r3, r3, #12
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d00d      	beq.n	80081f4 <HAL_RCC_GetSysClockFreq+0x40>
 80081d8:	2b08      	cmp	r3, #8
 80081da:	f200 80a1 	bhi.w	8008320 <HAL_RCC_GetSysClockFreq+0x16c>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x34>
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d003      	beq.n	80081ee <HAL_RCC_GetSysClockFreq+0x3a>
 80081e6:	e09b      	b.n	8008320 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081e8:	4b53      	ldr	r3, [pc, #332]	; (8008338 <HAL_RCC_GetSysClockFreq+0x184>)
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081ec:	e09b      	b.n	8008326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ee:	4b53      	ldr	r3, [pc, #332]	; (800833c <HAL_RCC_GetSysClockFreq+0x188>)
 80081f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081f2:	e098      	b.n	8008326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081f4:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081fe:	4b4d      	ldr	r3, [pc, #308]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d028      	beq.n	800825c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800820a:	4b4a      	ldr	r3, [pc, #296]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	099b      	lsrs	r3, r3, #6
 8008210:	2200      	movs	r2, #0
 8008212:	623b      	str	r3, [r7, #32]
 8008214:	627a      	str	r2, [r7, #36]	; 0x24
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800821c:	2100      	movs	r1, #0
 800821e:	4b47      	ldr	r3, [pc, #284]	; (800833c <HAL_RCC_GetSysClockFreq+0x188>)
 8008220:	fb03 f201 	mul.w	r2, r3, r1
 8008224:	2300      	movs	r3, #0
 8008226:	fb00 f303 	mul.w	r3, r0, r3
 800822a:	4413      	add	r3, r2
 800822c:	4a43      	ldr	r2, [pc, #268]	; (800833c <HAL_RCC_GetSysClockFreq+0x188>)
 800822e:	fba0 1202 	umull	r1, r2, r0, r2
 8008232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008234:	460a      	mov	r2, r1
 8008236:	62ba      	str	r2, [r7, #40]	; 0x28
 8008238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800823a:	4413      	add	r3, r2
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	2200      	movs	r2, #0
 8008242:	61bb      	str	r3, [r7, #24]
 8008244:	61fa      	str	r2, [r7, #28]
 8008246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800824a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800824e:	f7f8 fc81 	bl	8000b54 <__aeabi_uldivmod>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4613      	mov	r3, r2
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825a:	e053      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800825c:	4b35      	ldr	r3, [pc, #212]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	099b      	lsrs	r3, r3, #6
 8008262:	2200      	movs	r2, #0
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	617a      	str	r2, [r7, #20]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800826e:	f04f 0b00 	mov.w	fp, #0
 8008272:	4652      	mov	r2, sl
 8008274:	465b      	mov	r3, fp
 8008276:	f04f 0000 	mov.w	r0, #0
 800827a:	f04f 0100 	mov.w	r1, #0
 800827e:	0159      	lsls	r1, r3, #5
 8008280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008284:	0150      	lsls	r0, r2, #5
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	ebb2 080a 	subs.w	r8, r2, sl
 800828e:	eb63 090b 	sbc.w	r9, r3, fp
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800829e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80082a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80082a6:	ebb2 0408 	subs.w	r4, r2, r8
 80082aa:	eb63 0509 	sbc.w	r5, r3, r9
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	00eb      	lsls	r3, r5, #3
 80082b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082bc:	00e2      	lsls	r2, r4, #3
 80082be:	4614      	mov	r4, r2
 80082c0:	461d      	mov	r5, r3
 80082c2:	eb14 030a 	adds.w	r3, r4, sl
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	eb45 030b 	adc.w	r3, r5, fp
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082da:	4629      	mov	r1, r5
 80082dc:	028b      	lsls	r3, r1, #10
 80082de:	4621      	mov	r1, r4
 80082e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082e4:	4621      	mov	r1, r4
 80082e6:	028a      	lsls	r2, r1, #10
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	2200      	movs	r2, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	60fa      	str	r2, [r7, #12]
 80082f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082f8:	f7f8 fc2c 	bl	8000b54 <__aeabi_uldivmod>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4613      	mov	r3, r2
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008304:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <HAL_RCC_GetSysClockFreq+0x180>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	3301      	adds	r3, #1
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800831e:	e002      	b.n	8008326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_RCC_GetSysClockFreq+0x184>)
 8008322:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008328:	4618      	mov	r0, r3
 800832a:	3740      	adds	r7, #64	; 0x40
 800832c:	46bd      	mov	sp, r7
 800832e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008332:	bf00      	nop
 8008334:	40023800 	.word	0x40023800
 8008338:	00f42400 	.word	0x00f42400
 800833c:	00b71b00 	.word	0x00b71b00

08008340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d012      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008368:	4b69      	ldr	r3, [pc, #420]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	4a68      	ldr	r2, [pc, #416]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008372:	6093      	str	r3, [r2, #8]
 8008374:	4b66      	ldr	r3, [pc, #408]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	4964      	ldr	r1, [pc, #400]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837e:	4313      	orrs	r3, r2
 8008380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800838a:	2301      	movs	r3, #1
 800838c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800839a:	4b5d      	ldr	r3, [pc, #372]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	4959      	ldr	r1, [pc, #356]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b8:	d101      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80083c6:	2301      	movs	r3, #1
 80083c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d017      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083d6:	4b4e      	ldr	r3, [pc, #312]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	494a      	ldr	r1, [pc, #296]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f4:	d101      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80083f6:	2301      	movs	r3, #1
 80083f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008402:	2301      	movs	r3, #1
 8008404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 808b 	beq.w	800853a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008424:	4b3a      	ldr	r3, [pc, #232]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	4a39      	ldr	r2, [pc, #228]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800842e:	6413      	str	r3, [r2, #64]	; 0x40
 8008430:	4b37      	ldr	r3, [pc, #220]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800843c:	4b35      	ldr	r3, [pc, #212]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a34      	ldr	r2, [pc, #208]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008448:	f7fd feda 	bl	8006200 <HAL_GetTick>
 800844c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008450:	f7fd fed6 	bl	8006200 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b64      	cmp	r3, #100	; 0x64
 800845c:	d901      	bls.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e357      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008462:	4b2c      	ldr	r3, [pc, #176]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800846e:	4b28      	ldr	r3, [pc, #160]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d035      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	429a      	cmp	r2, r3
 800848a:	d02e      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800848c:	4b20      	ldr	r3, [pc, #128]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008496:	4b1e      	ldr	r3, [pc, #120]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	4a1d      	ldr	r2, [pc, #116]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084a2:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	4a1a      	ldr	r2, [pc, #104]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80084ae:	4a18      	ldr	r2, [pc, #96]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084b4:	4b16      	ldr	r3, [pc, #88]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d114      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fd fe9e 	bl	8006200 <HAL_GetTick>
 80084c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084c6:	e00a      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084c8:	f7fd fe9a 	bl	8006200 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e319      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ee      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084f6:	d111      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008506:	400b      	ands	r3, r1
 8008508:	4901      	ldr	r1, [pc, #4]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850a:	4313      	orrs	r3, r2
 800850c:	608b      	str	r3, [r1, #8]
 800850e:	e00b      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008510:	40023800 	.word	0x40023800
 8008514:	40007000 	.word	0x40007000
 8008518:	0ffffcff 	.word	0x0ffffcff
 800851c:	4baa      	ldr	r3, [pc, #680]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4aa9      	ldr	r2, [pc, #676]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008526:	6093      	str	r3, [r2, #8]
 8008528:	4ba7      	ldr	r3, [pc, #668]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008534:	49a4      	ldr	r1, [pc, #656]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008536:	4313      	orrs	r3, r2
 8008538:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0310 	and.w	r3, r3, #16
 8008542:	2b00      	cmp	r3, #0
 8008544:	d010      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008546:	4ba0      	ldr	r3, [pc, #640]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854c:	4a9e      	ldr	r2, [pc, #632]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008556:	4b9c      	ldr	r3, [pc, #624]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	4999      	ldr	r1, [pc, #612]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008574:	4b94      	ldr	r3, [pc, #592]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008582:	4991      	ldr	r1, [pc, #580]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008596:	4b8c      	ldr	r3, [pc, #560]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a4:	4988      	ldr	r1, [pc, #544]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085b8:	4b83      	ldr	r3, [pc, #524]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c6:	4980      	ldr	r1, [pc, #512]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085da:	4b7b      	ldr	r3, [pc, #492]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e8:	4977      	ldr	r1, [pc, #476]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085fc:	4b72      	ldr	r3, [pc, #456]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008602:	f023 0203 	bic.w	r2, r3, #3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	496f      	ldr	r1, [pc, #444]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800861e:	4b6a      	ldr	r3, [pc, #424]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008624:	f023 020c 	bic.w	r2, r3, #12
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	4966      	ldr	r1, [pc, #408]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008640:	4b61      	ldr	r3, [pc, #388]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864e:	495e      	ldr	r1, [pc, #376]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008662:	4b59      	ldr	r3, [pc, #356]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	4955      	ldr	r1, [pc, #340]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008684:	4b50      	ldr	r3, [pc, #320]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	494d      	ldr	r1, [pc, #308]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80086a6:	4b48      	ldr	r3, [pc, #288]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b4:	4944      	ldr	r1, [pc, #272]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80086c8:	4b3f      	ldr	r3, [pc, #252]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d6:	493c      	ldr	r1, [pc, #240]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80086ea:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f8:	4933      	ldr	r1, [pc, #204]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800870c:	4b2e      	ldr	r3, [pc, #184]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800871a:	492b      	ldr	r1, [pc, #172]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d011      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800872e:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873c:	4922      	ldr	r1, [pc, #136]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800874c:	d101      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0308 	and.w	r3, r3, #8
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800875e:	2301      	movs	r3, #1
 8008760:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877c:	4912      	ldr	r1, [pc, #72]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a0:	4909      	ldr	r1, [pc, #36]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d006      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80d9 	beq.w	800896e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a01      	ldr	r2, [pc, #4]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087c6:	e001      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80087c8:	40023800 	.word	0x40023800
 80087cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ce:	f7fd fd17 	bl	8006200 <HAL_GetTick>
 80087d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087d4:	e008      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087d6:	f7fd fd13 	bl	8006200 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b64      	cmp	r3, #100	; 0x64
 80087e2:	d901      	bls.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e194      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087e8:	4b6c      	ldr	r3, [pc, #432]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d021      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11d      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008808:	4b64      	ldr	r3, [pc, #400]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008816:	4b61      	ldr	r3, [pc, #388]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881c:	0e1b      	lsrs	r3, r3, #24
 800881e:	f003 030f 	and.w	r3, r3, #15
 8008822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	019a      	lsls	r2, r3, #6
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	431a      	orrs	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	061b      	lsls	r3, r3, #24
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	071b      	lsls	r3, r3, #28
 800883c:	4957      	ldr	r1, [pc, #348]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008858:	d00a      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008862:	2b00      	cmp	r3, #0
 8008864:	d02e      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800886e:	d129      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008870:	4b4a      	ldr	r3, [pc, #296]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800887e:	4b47      	ldr	r3, [pc, #284]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008884:	0f1b      	lsrs	r3, r3, #28
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	019a      	lsls	r2, r3, #6
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	431a      	orrs	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	071b      	lsls	r3, r3, #28
 80088a4:	493d      	ldr	r1, [pc, #244]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088ac:	4b3b      	ldr	r3, [pc, #236]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b2:	f023 021f 	bic.w	r2, r3, #31
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	3b01      	subs	r3, #1
 80088bc:	4937      	ldr	r1, [pc, #220]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01d      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088d0:	4b32      	ldr	r3, [pc, #200]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d6:	0e1b      	lsrs	r3, r3, #24
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088de:	4b2f      	ldr	r3, [pc, #188]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e4:	0f1b      	lsrs	r3, r3, #28
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	431a      	orrs	r2, r3
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	431a      	orrs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	071b      	lsls	r3, r3, #28
 8008904:	4925      	ldr	r1, [pc, #148]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	019a      	lsls	r2, r3, #6
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	061b      	lsls	r3, r3, #24
 800892c:	431a      	orrs	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	071b      	lsls	r3, r3, #28
 8008934:	4919      	ldr	r1, [pc, #100]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800893c:	4b17      	ldr	r3, [pc, #92]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a16      	ldr	r2, [pc, #88]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008948:	f7fd fc5a 	bl	8006200 <HAL_GetTick>
 800894c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800894e:	e008      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008950:	f7fd fc56 	bl	8006200 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	; 0x64
 800895c:	d901      	bls.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e0d7      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0f0      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b01      	cmp	r3, #1
 8008972:	f040 80cd 	bne.w	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a08      	ldr	r2, [pc, #32]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800897c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008982:	f7fd fc3d 	bl	8006200 <HAL_GetTick>
 8008986:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008988:	e00a      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800898a:	f7fd fc39 	bl	8006200 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b64      	cmp	r3, #100	; 0x64
 8008996:	d903      	bls.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e0ba      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800899c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089a0:	4b5e      	ldr	r3, [pc, #376]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ac:	d0ed      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d02e      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d12a      	bne.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089d6:	4b51      	ldr	r3, [pc, #324]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089e4:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	0f1b      	lsrs	r3, r3, #28
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	019a      	lsls	r2, r3, #6
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	061b      	lsls	r3, r3, #24
 8008a04:	431a      	orrs	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	071b      	lsls	r3, r3, #28
 8008a0a:	4944      	ldr	r1, [pc, #272]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a12:	4b42      	ldr	r3, [pc, #264]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a20:	3b01      	subs	r3, #1
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	493d      	ldr	r1, [pc, #244]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d022      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a40:	d11d      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a42:	4b36      	ldr	r3, [pc, #216]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a48:	0e1b      	lsrs	r3, r3, #24
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a50:	4b32      	ldr	r3, [pc, #200]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a56:	0f1b      	lsrs	r3, r3, #28
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	019a      	lsls	r2, r3, #6
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	061b      	lsls	r3, r3, #24
 8008a70:	431a      	orrs	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	071b      	lsls	r3, r3, #28
 8008a76:	4929      	ldr	r1, [pc, #164]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d028      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a8a:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a90:	0e1b      	lsrs	r3, r3, #24
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a98:	4b20      	ldr	r3, [pc, #128]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9e:	0c1b      	lsrs	r3, r3, #16
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	019a      	lsls	r2, r3, #6
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	071b      	lsls	r3, r3, #28
 8008abe:	4917      	ldr	r1, [pc, #92]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ac6:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4911      	ldr	r1, [pc, #68]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008adc:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0e      	ldr	r2, [pc, #56]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ae8:	f7fd fb8a 	bl	8006200 <HAL_GetTick>
 8008aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008aee:	e008      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008af0:	f7fd fb86 	bl	8006200 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b64      	cmp	r3, #100	; 0x64
 8008afc:	d901      	bls.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e007      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0e:	d1ef      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40023800 	.word	0x40023800

08008b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e09d      	b.n	8008c6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b42:	d009      	beq.n	8008b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	61da      	str	r2, [r3, #28]
 8008b4a:	e005      	b.n	8008b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fc fc0c 	bl	8005390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b98:	d902      	bls.n	8008ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e002      	b.n	8008ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008bae:	d007      	beq.n	8008bc0 <HAL_SPI_Init+0xa0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bb8:	d002      	beq.n	8008bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	ea42 0103 	orr.w	r1, r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	f003 0204 	and.w	r2, r3, #4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c3c:	ea42 0103 	orr.w	r1, r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b08a      	sub	sp, #40	; 0x28
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c84:	2301      	movs	r3, #1
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x26>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e1fb      	b.n	8009094 <HAL_SPI_TransmitReceive+0x41e>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ca4:	f7fd faac 	bl	8006200 <HAL_GetTick>
 8008ca8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008cb8:	887b      	ldrh	r3, [r7, #2]
 8008cba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008cbc:	887b      	ldrh	r3, [r7, #2]
 8008cbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cc0:	7efb      	ldrb	r3, [r7, #27]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d00e      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x6e>
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ccc:	d106      	bne.n	8008cdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d102      	bne.n	8008cdc <HAL_SPI_TransmitReceive+0x66>
 8008cd6:	7efb      	ldrb	r3, [r7, #27]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d003      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008ce2:	e1cd      	b.n	8009080 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <HAL_SPI_TransmitReceive+0x80>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_SPI_TransmitReceive+0x80>
 8008cf0:	887b      	ldrh	r3, [r7, #2]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008cfc:	e1c0      	b.n	8009080 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d003      	beq.n	8008d12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2205      	movs	r2, #5
 8008d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	887a      	ldrh	r2, [r7, #2]
 8008d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	887a      	ldrh	r2, [r7, #2]
 8008d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	887a      	ldrh	r2, [r7, #2]
 8008d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	887a      	ldrh	r2, [r7, #2]
 8008d3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d54:	d802      	bhi.n	8008d5c <HAL_SPI_TransmitReceive+0xe6>
 8008d56:	8a3b      	ldrh	r3, [r7, #16]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d908      	bls.n	8008d6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	e007      	b.n	8008d7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d007      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008da4:	d97c      	bls.n	8008ea0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x13e>
 8008dae:	8a7b      	ldrh	r3, [r7, #18]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d169      	bne.n	8008e88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	881a      	ldrh	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	1c9a      	adds	r2, r3, #2
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd8:	e056      	b.n	8008e88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d11b      	bne.n	8008e20 <HAL_SPI_TransmitReceive+0x1aa>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d016      	beq.n	8008e20 <HAL_SPI_TransmitReceive+0x1aa>
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d113      	bne.n	8008e20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	881a      	ldrh	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	1c9a      	adds	r2, r3, #2
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d11c      	bne.n	8008e68 <HAL_SPI_TransmitReceive+0x1f2>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d016      	beq.n	8008e68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	b292      	uxth	r2, r2
 8008e46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	1c9a      	adds	r2, r3, #2
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e64:	2301      	movs	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e68:	f7fd f9ca 	bl	8006200 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d807      	bhi.n	8008e88 <HAL_SPI_TransmitReceive+0x212>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e7e:	d003      	beq.n	8008e88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008e86:	e0fb      	b.n	8009080 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1a3      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x164>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d19d      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x164>
 8008e9e:	e0df      	b.n	8009060 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_SPI_TransmitReceive+0x23a>
 8008ea8:	8a7b      	ldrh	r3, [r7, #18]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	f040 80cb 	bne.w	8009046 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d912      	bls.n	8008ee0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	881a      	ldrh	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b02      	subs	r3, #2
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ede:	e0b2      	b.n	8009046 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f06:	e09e      	b.n	8009046 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d134      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x30a>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02f      	beq.n	8008f80 <HAL_SPI_TransmitReceive+0x30a>
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d12c      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d912      	bls.n	8008f56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	881a      	ldrh	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	3b02      	subs	r3, #2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f54:	e012      	b.n	8008f7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	330c      	adds	r3, #12
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d148      	bne.n	8009020 <HAL_SPI_TransmitReceive+0x3aa>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d042      	beq.n	8009020 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d923      	bls.n	8008fee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	1c9a      	adds	r2, r3, #2
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b02      	subs	r3, #2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d81f      	bhi.n	800901c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fea:	605a      	str	r2, [r3, #4]
 8008fec:	e016      	b.n	800901c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f103 020c 	add.w	r2, r3, #12
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800901c:	2301      	movs	r3, #1
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009020:	f7fd f8ee 	bl	8006200 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902c:	429a      	cmp	r2, r3
 800902e:	d803      	bhi.n	8009038 <HAL_SPI_TransmitReceive+0x3c2>
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009036:	d102      	bne.n	800903e <HAL_SPI_TransmitReceive+0x3c8>
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009044:	e01c      	b.n	8009080 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	f47f af5b 	bne.w	8008f08 <HAL_SPI_TransmitReceive+0x292>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009058:	b29b      	uxth	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	f47f af54 	bne.w	8008f08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f937 	bl	80092d8 <SPI_EndRxTxTransaction>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	661a      	str	r2, [r3, #96]	; 0x60
 800907c:	e000      	b.n	8009080 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800907e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009094:	4618      	mov	r0, r3
 8009096:	3728      	adds	r7, #40	; 0x28
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090ac:	f7fd f8a8 	bl	8006200 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4413      	add	r3, r2
 80090ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090bc:	f7fd f8a0 	bl	8006200 <HAL_GetTick>
 80090c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090c2:	4b39      	ldr	r3, [pc, #228]	; (80091a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	015b      	lsls	r3, r3, #5
 80090c8:	0d1b      	lsrs	r3, r3, #20
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090d2:	e054      	b.n	800917e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090da:	d050      	beq.n	800917e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090dc:	f7fd f890 	bl	8006200 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d902      	bls.n	80090f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d13d      	bne.n	800916e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800910a:	d111      	bne.n	8009130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009114:	d004      	beq.n	8009120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911e:	d107      	bne.n	8009130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800912e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009138:	d10f      	bne.n	800915a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e017      	b.n	800919e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3b01      	subs	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4013      	ands	r3, r2
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	429a      	cmp	r2, r3
 800918c:	bf0c      	ite	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	2300      	movne	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	461a      	mov	r2, r3
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	429a      	cmp	r2, r3
 800919a:	d19b      	bne.n	80090d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000260 	.word	0x20000260

080091ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80091be:	f7fd f81f 	bl	8006200 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	1a9b      	subs	r3, r3, r2
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	4413      	add	r3, r2
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80091ce:	f7fd f817 	bl	8006200 <HAL_GetTick>
 80091d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80091dc:	4b3d      	ldr	r3, [pc, #244]	; (80092d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	00da      	lsls	r2, r3, #3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	0d1b      	lsrs	r3, r3, #20
 80091ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
 80091f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80091f4:	e060      	b.n	80092b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80091fc:	d107      	bne.n	800920e <SPI_WaitFifoStateUntilTimeout+0x62>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800920c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009214:	d050      	beq.n	80092b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009216:	f7fc fff3 	bl	8006200 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009222:	429a      	cmp	r2, r3
 8009224:	d902      	bls.n	800922c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d13d      	bne.n	80092a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800923a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009244:	d111      	bne.n	800926a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800924e:	d004      	beq.n	800925a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009258:	d107      	bne.n	800926a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009268:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009272:	d10f      	bne.n	8009294 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009292:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e010      	b.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	4013      	ands	r3, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d196      	bne.n	80091f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3728      	adds	r7, #40	; 0x28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20000260 	.word	0x20000260

080092d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff ff5b 	bl	80091ac <SPI_WaitFifoStateUntilTimeout>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009300:	f043 0220 	orr.w	r2, r3, #32
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e046      	b.n	800939a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <SPI_EndRxTxTransaction+0xcc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a25      	ldr	r2, [pc, #148]	; (80093a8 <SPI_EndRxTxTransaction+0xd0>)
 8009312:	fba2 2303 	umull	r2, r3, r2, r3
 8009316:	0d5b      	lsrs	r3, r3, #21
 8009318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800932a:	d112      	bne.n	8009352 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2200      	movs	r2, #0
 8009334:	2180      	movs	r1, #128	; 0x80
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f7ff feb0 	bl	800909c <SPI_WaitFlagStateUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d016      	beq.n	8009370 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009346:	f043 0220 	orr.w	r2, r3, #32
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e023      	b.n	800939a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3b01      	subs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009368:	2b80      	cmp	r3, #128	; 0x80
 800936a:	d0f2      	beq.n	8009352 <SPI_EndRxTxTransaction+0x7a>
 800936c:	e000      	b.n	8009370 <SPI_EndRxTxTransaction+0x98>
        break;
 800936e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7ff ff15 	bl	80091ac <SPI_WaitFifoStateUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800938c:	f043 0220 	orr.w	r2, r3, #32
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e000      	b.n	800939a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000260 	.word	0x20000260
 80093a8:	165e9f81 	.word	0x165e9f81

080093ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e054      	b.n	8009468 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d111      	bne.n	80093ee <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fdf2 	bl	8009fbc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a23      	ldr	r2, [pc, #140]	; (8009470 <HAL_TIM_Base_Init+0xc4>)
 80093e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4619      	mov	r1, r3
 8009400:	4610      	mov	r0, r2
 8009402:	f000 fca1 	bl	8009d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	08005d2d 	.word	0x08005d2d

08009474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d001      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e054      	b.n	8009536 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a26      	ldr	r2, [pc, #152]	; (8009544 <HAL_TIM_Base_Start_IT+0xd0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d022      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b6:	d01d      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a22      	ldr	r2, [pc, #136]	; (8009548 <HAL_TIM_Base_Start_IT+0xd4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d018      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a21      	ldr	r2, [pc, #132]	; (800954c <HAL_TIM_Base_Start_IT+0xd8>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d013      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <HAL_TIM_Base_Start_IT+0xdc>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00e      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1e      	ldr	r2, [pc, #120]	; (8009554 <HAL_TIM_Base_Start_IT+0xe0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1c      	ldr	r2, [pc, #112]	; (8009558 <HAL_TIM_Base_Start_IT+0xe4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1b      	ldr	r2, [pc, #108]	; (800955c <HAL_TIM_Base_Start_IT+0xe8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d115      	bne.n	8009520 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689a      	ldr	r2, [r3, #8]
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <HAL_TIM_Base_Start_IT+0xec>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b06      	cmp	r3, #6
 8009504:	d015      	beq.n	8009532 <HAL_TIM_Base_Start_IT+0xbe>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800950c:	d011      	beq.n	8009532 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0201 	orr.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951e:	e008      	b.n	8009532 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0201 	orr.w	r2, r2, #1
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	e000      	b.n	8009534 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40010000 	.word	0x40010000
 8009548:	40000400 	.word	0x40000400
 800954c:	40000800 	.word	0x40000800
 8009550:	40000c00 	.word	0x40000c00
 8009554:	40010400 	.word	0x40010400
 8009558:	40014000 	.word	0x40014000
 800955c:	40001800 	.word	0x40001800
 8009560:	00010007 	.word	0x00010007

08009564 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0201 	bic.w	r2, r2, #1
 800957a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a1a      	ldr	r2, [r3, #32]
 8009582:	f241 1311 	movw	r3, #4369	; 0x1111
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10f      	bne.n	80095ac <HAL_TIM_Base_Stop_IT+0x48>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	f240 4344 	movw	r3, #1092	; 0x444
 8009596:	4013      	ands	r3, r2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <HAL_TIM_Base_Stop_IT+0x48>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0201 	bic.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d128      	bne.n	800962a <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d121      	bne.n	800962a <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f06f 0202 	mvn.w	r2, #2
 80095ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d005      	beq.n	8009610 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
 800960e:	e009      	b.n	8009624 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b04      	cmp	r3, #4
 8009636:	d128      	bne.n	800968a <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b04      	cmp	r3, #4
 8009644:	d121      	bne.n	800968a <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f06f 0204 	mvn.w	r2, #4
 800964e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
 800966e:	e009      	b.n	8009684 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f003 0308 	and.w	r3, r3, #8
 8009694:	2b08      	cmp	r3, #8
 8009696:	d128      	bne.n	80096ea <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d121      	bne.n	80096ea <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f06f 0208 	mvn.w	r2, #8
 80096ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2204      	movs	r2, #4
 80096b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
 80096ce:	e009      	b.n	80096e4 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d128      	bne.n	800974a <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f003 0310 	and.w	r3, r3, #16
 8009702:	2b10      	cmp	r3, #16
 8009704:	d121      	bne.n	800974a <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f06f 0210 	mvn.w	r2, #16
 800970e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2208      	movs	r2, #8
 8009714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
 800972e:	e009      	b.n	8009744 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b01      	cmp	r3, #1
 8009756:	d110      	bne.n	800977a <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b01      	cmp	r3, #1
 8009764:	d109      	bne.n	800977a <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f06f 0201 	mvn.w	r2, #1
 800976e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009784:	2b80      	cmp	r3, #128	; 0x80
 8009786:	d110      	bne.n	80097aa <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b80      	cmp	r3, #128	; 0x80
 8009794:	d109      	bne.n	80097aa <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800979e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b8:	d110      	bne.n	80097dc <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c4:	2b80      	cmp	r3, #128	; 0x80
 80097c6:	d109      	bne.n	80097dc <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d110      	bne.n	800980c <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d109      	bne.n	800980c <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b20      	cmp	r3, #32
 8009818:	d110      	bne.n	800983c <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0320 	and.w	r3, r3, #32
 8009824:	2b20      	cmp	r3, #32
 8009826:	d109      	bne.n	800983c <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f06f 0220 	mvn.w	r2, #32
 8009830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_TIM_ConfigClockSource+0x1c>
 800985c:	2302      	movs	r3, #2
 800985e:	e0b4      	b.n	80099ca <HAL_TIM_ConfigClockSource+0x186>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4b56      	ldr	r3, [pc, #344]	; (80099d4 <HAL_TIM_ConfigClockSource+0x190>)
 800987c:	4013      	ands	r3, r2
 800987e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009898:	d03e      	beq.n	8009918 <HAL_TIM_ConfigClockSource+0xd4>
 800989a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800989e:	f200 8087 	bhi.w	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a6:	f000 8086 	beq.w	80099b6 <HAL_TIM_ConfigClockSource+0x172>
 80098aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ae:	d87f      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b0:	2b70      	cmp	r3, #112	; 0x70
 80098b2:	d01a      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0xa6>
 80098b4:	2b70      	cmp	r3, #112	; 0x70
 80098b6:	d87b      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b8:	2b60      	cmp	r3, #96	; 0x60
 80098ba:	d050      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x11a>
 80098bc:	2b60      	cmp	r3, #96	; 0x60
 80098be:	d877      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c0:	2b50      	cmp	r3, #80	; 0x50
 80098c2:	d03c      	beq.n	800993e <HAL_TIM_ConfigClockSource+0xfa>
 80098c4:	2b50      	cmp	r3, #80	; 0x50
 80098c6:	d873      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c8:	2b40      	cmp	r3, #64	; 0x40
 80098ca:	d058      	beq.n	800997e <HAL_TIM_ConfigClockSource+0x13a>
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d86f      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098d0:	2b30      	cmp	r3, #48	; 0x30
 80098d2:	d064      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098d4:	2b30      	cmp	r3, #48	; 0x30
 80098d6:	d86b      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d060      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d867      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d05c      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098e4:	2b10      	cmp	r3, #16
 80098e6:	d05a      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098e8:	e062      	b.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098fa:	f000 fb3f 	bl	8009f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800990c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	609a      	str	r2, [r3, #8]
      break;
 8009916:	e04f      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009928:	f000 fb28 	bl	8009f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800993a:	609a      	str	r2, [r3, #8]
      break;
 800993c:	e03c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994a:	461a      	mov	r2, r3
 800994c:	f000 fa9c 	bl	8009e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2150      	movs	r1, #80	; 0x50
 8009956:	4618      	mov	r0, r3
 8009958:	f000 faf5 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 800995c:	e02c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800996a:	461a      	mov	r2, r3
 800996c:	f000 fabb 	bl	8009ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2160      	movs	r1, #96	; 0x60
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fae5 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 800997c:	e01c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800998a:	461a      	mov	r2, r3
 800998c:	f000 fa7c 	bl	8009e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2140      	movs	r1, #64	; 0x40
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fad5 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 800999c:	e00c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f000 facc 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 80099ae:	e003      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
      break;
 80099b4:	e000      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80099b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	fffeff88 	.word	0xfffeff88

080099d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e13e      	b.n	8009d3a <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_TIM_RegisterCallback+0x2a>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e137      	b.n	8009d3a <HAL_TIM_RegisterCallback+0x29a>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	f040 80c2 	bne.w	8009c64 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	2b1b      	cmp	r3, #27
 8009ae4:	f200 80bb 	bhi.w	8009c5e <HAL_TIM_RegisterCallback+0x1be>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <HAL_TIM_RegisterCallback+0x50>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b61 	.word	0x08009b61
 8009af4:	08009b69 	.word	0x08009b69
 8009af8:	08009b71 	.word	0x08009b71
 8009afc:	08009b79 	.word	0x08009b79
 8009b00:	08009b81 	.word	0x08009b81
 8009b04:	08009b89 	.word	0x08009b89
 8009b08:	08009b91 	.word	0x08009b91
 8009b0c:	08009b99 	.word	0x08009b99
 8009b10:	08009ba1 	.word	0x08009ba1
 8009b14:	08009ba9 	.word	0x08009ba9
 8009b18:	08009bb1 	.word	0x08009bb1
 8009b1c:	08009bb9 	.word	0x08009bb9
 8009b20:	08009bc1 	.word	0x08009bc1
 8009b24:	08009bc9 	.word	0x08009bc9
 8009b28:	08009bd3 	.word	0x08009bd3
 8009b2c:	08009bdd 	.word	0x08009bdd
 8009b30:	08009be7 	.word	0x08009be7
 8009b34:	08009bf1 	.word	0x08009bf1
 8009b38:	08009bfb 	.word	0x08009bfb
 8009b3c:	08009c05 	.word	0x08009c05
 8009b40:	08009c0f 	.word	0x08009c0f
 8009b44:	08009c19 	.word	0x08009c19
 8009b48:	08009c23 	.word	0x08009c23
 8009b4c:	08009c2d 	.word	0x08009c2d
 8009b50:	08009c37 	.word	0x08009c37
 8009b54:	08009c41 	.word	0x08009c41
 8009b58:	08009c4b 	.word	0x08009c4b
 8009b5c:	08009c55 	.word	0x08009c55
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009b66:	e0e3      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009b6e:	e0df      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009b76:	e0db      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009b7e:	e0d7      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009b86:	e0d3      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009b8e:	e0cf      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009b96:	e0cb      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009b9e:	e0c7      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009ba6:	e0c3      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009bae:	e0bf      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009bb6:	e0bb      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009bbe:	e0b7      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009bc6:	e0b3      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009bd0:	e0ae      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009bda:	e0a9      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009be4:	e0a4      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009bee:	e09f      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009bf8:	e09a      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009c02:	e095      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009c0c:	e090      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009c16:	e08b      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009c20:	e086      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009c2a:	e081      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009c34:	e07c      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009c3e:	e077      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009c48:	e072      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8009c52:	e06d      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8009c5c:	e068      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
        break;
 8009c62:	e065      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d15d      	bne.n	8009d2c <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	2b0d      	cmp	r3, #13
 8009c74:	d857      	bhi.n	8009d26 <HAL_TIM_RegisterCallback+0x286>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <HAL_TIM_RegisterCallback+0x1dc>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009cb5 	.word	0x08009cb5
 8009c80:	08009cbd 	.word	0x08009cbd
 8009c84:	08009cc5 	.word	0x08009cc5
 8009c88:	08009ccd 	.word	0x08009ccd
 8009c8c:	08009cd5 	.word	0x08009cd5
 8009c90:	08009cdd 	.word	0x08009cdd
 8009c94:	08009ce5 	.word	0x08009ce5
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009cf5 	.word	0x08009cf5
 8009ca0:	08009cfd 	.word	0x08009cfd
 8009ca4:	08009d05 	.word	0x08009d05
 8009ca8:	08009d0d 	.word	0x08009d0d
 8009cac:	08009d15 	.word	0x08009d15
 8009cb0:	08009d1d 	.word	0x08009d1d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009cba:	e039      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009cc2:	e035      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009cca:	e031      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009cd2:	e02d      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009cda:	e029      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009ce2:	e025      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009cea:	e021      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009cf2:	e01d      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009cfa:	e019      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009d02:	e015      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009d0a:	e011      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009d12:	e00d      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009d1a:	e009      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009d24:	e004      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	75fb      	strb	r3, [r7, #23]
        break;
 8009d2a:	e001      	b.n	8009d30 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	371c      	adds	r7, #28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop

08009d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a40      	ldr	r2, [pc, #256]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d013      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d66:	d00f      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a3d      	ldr	r2, [pc, #244]	; (8009e60 <TIM_Base_SetConfig+0x118>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00b      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a3c      	ldr	r2, [pc, #240]	; (8009e64 <TIM_Base_SetConfig+0x11c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d007      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a3b      	ldr	r2, [pc, #236]	; (8009e68 <TIM_Base_SetConfig+0x120>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a3a      	ldr	r2, [pc, #232]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2f      	ldr	r2, [pc, #188]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d02b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da8:	d027      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a2c      	ldr	r2, [pc, #176]	; (8009e60 <TIM_Base_SetConfig+0x118>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d023      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a2b      	ldr	r2, [pc, #172]	; (8009e64 <TIM_Base_SetConfig+0x11c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d01f      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <TIM_Base_SetConfig+0x120>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d01b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a29      	ldr	r2, [pc, #164]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d017      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a28      	ldr	r2, [pc, #160]	; (8009e70 <TIM_Base_SetConfig+0x128>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d013      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a27      	ldr	r2, [pc, #156]	; (8009e74 <TIM_Base_SetConfig+0x12c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00f      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a26      	ldr	r2, [pc, #152]	; (8009e78 <TIM_Base_SetConfig+0x130>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a25      	ldr	r2, [pc, #148]	; (8009e7c <TIM_Base_SetConfig+0x134>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d007      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a24      	ldr	r2, [pc, #144]	; (8009e80 <TIM_Base_SetConfig+0x138>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d003      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a23      	ldr	r2, [pc, #140]	; (8009e84 <TIM_Base_SetConfig+0x13c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d108      	bne.n	8009e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_Base_SetConfig+0xf8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d103      	bne.n	8009e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	615a      	str	r2, [r3, #20]
}
 8009e4e:	bf00      	nop
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40000400 	.word	0x40000400
 8009e64:	40000800 	.word	0x40000800
 8009e68:	40000c00 	.word	0x40000c00
 8009e6c:	40010400 	.word	0x40010400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800
 8009e7c:	40001800 	.word	0x40001800
 8009e80:	40001c00 	.word	0x40001c00
 8009e84:	40002000 	.word	0x40002000

08009e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	f023 0201 	bic.w	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f023 030a 	bic.w	r3, r3, #10
 8009ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	621a      	str	r2, [r3, #32]
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b087      	sub	sp, #28
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f023 0210 	bic.w	r2, r3, #16
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	031b      	lsls	r3, r3, #12
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f043 0307 	orr.w	r3, r3, #7
 8009f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	609a      	str	r2, [r3, #8]
}
 8009f70:	bf00      	nop
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	021a      	lsls	r2, r3, #8
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	609a      	str	r2, [r3, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	371c      	adds	r7, #28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1e      	ldr	r2, [pc, #120]	; (800a040 <TIM_ResetCallback+0x84>)
 8009fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <TIM_ResetCallback+0x88>)
 8009fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a1c      	ldr	r2, [pc, #112]	; (800a048 <TIM_ResetCallback+0x8c>)
 8009fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1b      	ldr	r2, [pc, #108]	; (800a04c <TIM_ResetCallback+0x90>)
 8009fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a1a      	ldr	r2, [pc, #104]	; (800a050 <TIM_ResetCallback+0x94>)
 8009fe8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a19      	ldr	r2, [pc, #100]	; (800a054 <TIM_ResetCallback+0x98>)
 8009ff0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <TIM_ResetCallback+0x9c>)
 8009ff8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a17      	ldr	r2, [pc, #92]	; (800a05c <TIM_ResetCallback+0xa0>)
 800a000:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a16      	ldr	r2, [pc, #88]	; (800a060 <TIM_ResetCallback+0xa4>)
 800a008:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <TIM_ResetCallback+0xa8>)
 800a010:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a14      	ldr	r2, [pc, #80]	; (800a068 <TIM_ResetCallback+0xac>)
 800a018:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a13      	ldr	r2, [pc, #76]	; (800a06c <TIM_ResetCallback+0xb0>)
 800a020:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a12      	ldr	r2, [pc, #72]	; (800a070 <TIM_ResetCallback+0xb4>)
 800a028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a11      	ldr	r2, [pc, #68]	; (800a074 <TIM_ResetCallback+0xb8>)
 800a030:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	080099d9 	.word	0x080099d9
 800a044:	080099ed 	.word	0x080099ed
 800a048:	08009a65 	.word	0x08009a65
 800a04c:	08009a79 	.word	0x08009a79
 800a050:	08009a15 	.word	0x08009a15
 800a054:	08009a29 	.word	0x08009a29
 800a058:	08009a01 	.word	0x08009a01
 800a05c:	08009a3d 	.word	0x08009a3d
 800a060:	08009a51 	.word	0x08009a51
 800a064:	08009a8d 	.word	0x08009a8d
 800a068:	0800a195 	.word	0x0800a195
 800a06c:	0800a1a9 	.word	0x0800a1a9
 800a070:	0800a1bd 	.word	0x0800a1bd
 800a074:	0800a1d1 	.word	0x0800a1d1

0800a078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e06d      	b.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a30      	ldr	r2, [pc, #192]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a2f      	ldr	r2, [pc, #188]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d108      	bne.n	800a0d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a20      	ldr	r2, [pc, #128]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d022      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a102:	d01d      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a1d      	ldr	r2, [pc, #116]	; (800a180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d018      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d013      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1a      	ldr	r2, [pc, #104]	; (800a188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00e      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a15      	ldr	r2, [pc, #84]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d009      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a16      	ldr	r2, [pc, #88]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d004      	beq.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a15      	ldr	r2, [pc, #84]	; (800a190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d10c      	bne.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	40010000 	.word	0x40010000
 800a17c:	40010400 	.word	0x40010400
 800a180:	40000400 	.word	0x40000400
 800a184:	40000800 	.word	0x40000800
 800a188:	40000c00 	.word	0x40000c00
 800a18c:	40014000 	.word	0x40014000
 800a190:	40001800 	.word	0x40001800

0800a194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <_ZdlPvj>:
 800a1e4:	f000 b811 	b.w	800a20a <_ZdlPv>

0800a1e8 <_Znwj>:
 800a1e8:	2801      	cmp	r0, #1
 800a1ea:	bf38      	it	cc
 800a1ec:	2001      	movcc	r0, #1
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fa90 	bl	800a718 <malloc>
 800a1f8:	b100      	cbz	r0, 800a1fc <_Znwj+0x14>
 800a1fa:	bd10      	pop	{r4, pc}
 800a1fc:	f000 f808 	bl	800a210 <_ZSt15get_new_handlerv>
 800a200:	b908      	cbnz	r0, 800a206 <_Znwj+0x1e>
 800a202:	f000 fa82 	bl	800a70a <abort>
 800a206:	4780      	blx	r0
 800a208:	e7f3      	b.n	800a1f2 <_Znwj+0xa>

0800a20a <_ZdlPv>:
 800a20a:	f000 ba8d 	b.w	800a728 <free>
	...

0800a210 <_ZSt15get_new_handlerv>:
 800a210:	4b02      	ldr	r3, [pc, #8]	; (800a21c <_ZSt15get_new_handlerv+0xc>)
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	f3bf 8f5b 	dmb	ish
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20000580 	.word	0x20000580

0800a220 <atan2>:
 800a220:	f000 b802 	b.w	800a228 <__ieee754_atan2>
 800a224:	0000      	movs	r0, r0
	...

0800a228 <__ieee754_atan2>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	ec57 6b11 	vmov	r6, r7, d1
 800a230:	4273      	negs	r3, r6
 800a232:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a3b0 <__ieee754_atan2+0x188>
 800a236:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a23a:	4333      	orrs	r3, r6
 800a23c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a240:	4543      	cmp	r3, r8
 800a242:	ec51 0b10 	vmov	r0, r1, d0
 800a246:	ee11 5a10 	vmov	r5, s2
 800a24a:	d80a      	bhi.n	800a262 <__ieee754_atan2+0x3a>
 800a24c:	4244      	negs	r4, r0
 800a24e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a252:	4304      	orrs	r4, r0
 800a254:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a258:	4544      	cmp	r4, r8
 800a25a:	ee10 9a10 	vmov	r9, s0
 800a25e:	468e      	mov	lr, r1
 800a260:	d907      	bls.n	800a272 <__ieee754_atan2+0x4a>
 800a262:	4632      	mov	r2, r6
 800a264:	463b      	mov	r3, r7
 800a266:	f7f5 ffd5 	bl	8000214 <__adddf3>
 800a26a:	ec41 0b10 	vmov	d0, r0, r1
 800a26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a272:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a276:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a27a:	4334      	orrs	r4, r6
 800a27c:	d103      	bne.n	800a286 <__ieee754_atan2+0x5e>
 800a27e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a282:	f000 b899 	b.w	800a3b8 <atan>
 800a286:	17bc      	asrs	r4, r7, #30
 800a288:	f004 0402 	and.w	r4, r4, #2
 800a28c:	ea53 0909 	orrs.w	r9, r3, r9
 800a290:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a294:	d107      	bne.n	800a2a6 <__ieee754_atan2+0x7e>
 800a296:	2c02      	cmp	r4, #2
 800a298:	d05f      	beq.n	800a35a <__ieee754_atan2+0x132>
 800a29a:	2c03      	cmp	r4, #3
 800a29c:	d1e5      	bne.n	800a26a <__ieee754_atan2+0x42>
 800a29e:	a140      	add	r1, pc, #256	; (adr r1, 800a3a0 <__ieee754_atan2+0x178>)
 800a2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a4:	e7e1      	b.n	800a26a <__ieee754_atan2+0x42>
 800a2a6:	4315      	orrs	r5, r2
 800a2a8:	d106      	bne.n	800a2b8 <__ieee754_atan2+0x90>
 800a2aa:	f1be 0f00 	cmp.w	lr, #0
 800a2ae:	da5f      	bge.n	800a370 <__ieee754_atan2+0x148>
 800a2b0:	a13d      	add	r1, pc, #244	; (adr r1, 800a3a8 <__ieee754_atan2+0x180>)
 800a2b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b6:	e7d8      	b.n	800a26a <__ieee754_atan2+0x42>
 800a2b8:	4542      	cmp	r2, r8
 800a2ba:	d10f      	bne.n	800a2dc <__ieee754_atan2+0xb4>
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a2c2:	d107      	bne.n	800a2d4 <__ieee754_atan2+0xac>
 800a2c4:	2c02      	cmp	r4, #2
 800a2c6:	d84c      	bhi.n	800a362 <__ieee754_atan2+0x13a>
 800a2c8:	4b33      	ldr	r3, [pc, #204]	; (800a398 <__ieee754_atan2+0x170>)
 800a2ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2d2:	e7ca      	b.n	800a26a <__ieee754_atan2+0x42>
 800a2d4:	2c02      	cmp	r4, #2
 800a2d6:	d848      	bhi.n	800a36a <__ieee754_atan2+0x142>
 800a2d8:	4b30      	ldr	r3, [pc, #192]	; (800a39c <__ieee754_atan2+0x174>)
 800a2da:	e7f6      	b.n	800a2ca <__ieee754_atan2+0xa2>
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	d0e4      	beq.n	800a2aa <__ieee754_atan2+0x82>
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a2e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a2ea:	da1e      	bge.n	800a32a <__ieee754_atan2+0x102>
 800a2ec:	2f00      	cmp	r7, #0
 800a2ee:	da01      	bge.n	800a2f4 <__ieee754_atan2+0xcc>
 800a2f0:	323c      	adds	r2, #60	; 0x3c
 800a2f2:	db1e      	blt.n	800a332 <__ieee754_atan2+0x10a>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f7f6 fa6c 	bl	80007d4 <__aeabi_ddiv>
 800a2fc:	ec41 0b10 	vmov	d0, r0, r1
 800a300:	f000 f9fa 	bl	800a6f8 <fabs>
 800a304:	f000 f858 	bl	800a3b8 <atan>
 800a308:	ec51 0b10 	vmov	r0, r1, d0
 800a30c:	2c01      	cmp	r4, #1
 800a30e:	d013      	beq.n	800a338 <__ieee754_atan2+0x110>
 800a310:	2c02      	cmp	r4, #2
 800a312:	d015      	beq.n	800a340 <__ieee754_atan2+0x118>
 800a314:	2c00      	cmp	r4, #0
 800a316:	d0a8      	beq.n	800a26a <__ieee754_atan2+0x42>
 800a318:	a317      	add	r3, pc, #92	; (adr r3, 800a378 <__ieee754_atan2+0x150>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff77 	bl	8000210 <__aeabi_dsub>
 800a322:	a317      	add	r3, pc, #92	; (adr r3, 800a380 <__ieee754_atan2+0x158>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	e014      	b.n	800a354 <__ieee754_atan2+0x12c>
 800a32a:	a117      	add	r1, pc, #92	; (adr r1, 800a388 <__ieee754_atan2+0x160>)
 800a32c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a330:	e7ec      	b.n	800a30c <__ieee754_atan2+0xe4>
 800a332:	2000      	movs	r0, #0
 800a334:	2100      	movs	r1, #0
 800a336:	e7e9      	b.n	800a30c <__ieee754_atan2+0xe4>
 800a338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a33c:	4619      	mov	r1, r3
 800a33e:	e794      	b.n	800a26a <__ieee754_atan2+0x42>
 800a340:	a30d      	add	r3, pc, #52	; (adr r3, 800a378 <__ieee754_atan2+0x150>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ff63 	bl	8000210 <__aeabi_dsub>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	a10c      	add	r1, pc, #48	; (adr r1, 800a380 <__ieee754_atan2+0x158>)
 800a350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a354:	f7f5 ff5c 	bl	8000210 <__aeabi_dsub>
 800a358:	e787      	b.n	800a26a <__ieee754_atan2+0x42>
 800a35a:	a109      	add	r1, pc, #36	; (adr r1, 800a380 <__ieee754_atan2+0x158>)
 800a35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a360:	e783      	b.n	800a26a <__ieee754_atan2+0x42>
 800a362:	a10b      	add	r1, pc, #44	; (adr r1, 800a390 <__ieee754_atan2+0x168>)
 800a364:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a368:	e77f      	b.n	800a26a <__ieee754_atan2+0x42>
 800a36a:	2000      	movs	r0, #0
 800a36c:	2100      	movs	r1, #0
 800a36e:	e77c      	b.n	800a26a <__ieee754_atan2+0x42>
 800a370:	a105      	add	r1, pc, #20	; (adr r1, 800a388 <__ieee754_atan2+0x160>)
 800a372:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a376:	e778      	b.n	800a26a <__ieee754_atan2+0x42>
 800a378:	33145c07 	.word	0x33145c07
 800a37c:	3ca1a626 	.word	0x3ca1a626
 800a380:	54442d18 	.word	0x54442d18
 800a384:	400921fb 	.word	0x400921fb
 800a388:	54442d18 	.word	0x54442d18
 800a38c:	3ff921fb 	.word	0x3ff921fb
 800a390:	54442d18 	.word	0x54442d18
 800a394:	3fe921fb 	.word	0x3fe921fb
 800a398:	0800ab60 	.word	0x0800ab60
 800a39c:	0800ab78 	.word	0x0800ab78
 800a3a0:	54442d18 	.word	0x54442d18
 800a3a4:	c00921fb 	.word	0xc00921fb
 800a3a8:	54442d18 	.word	0x54442d18
 800a3ac:	bff921fb 	.word	0xbff921fb
 800a3b0:	7ff00000 	.word	0x7ff00000
 800a3b4:	00000000 	.word	0x00000000

0800a3b8 <atan>:
 800a3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	ec55 4b10 	vmov	r4, r5, d0
 800a3c0:	4bc3      	ldr	r3, [pc, #780]	; (800a6d0 <atan+0x318>)
 800a3c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a3c6:	429e      	cmp	r6, r3
 800a3c8:	46ab      	mov	fp, r5
 800a3ca:	dd18      	ble.n	800a3fe <atan+0x46>
 800a3cc:	4bc1      	ldr	r3, [pc, #772]	; (800a6d4 <atan+0x31c>)
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	dc01      	bgt.n	800a3d6 <atan+0x1e>
 800a3d2:	d109      	bne.n	800a3e8 <atan+0x30>
 800a3d4:	b144      	cbz	r4, 800a3e8 <atan+0x30>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7f5 ff19 	bl	8000214 <__adddf3>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	e006      	b.n	800a3f6 <atan+0x3e>
 800a3e8:	f1bb 0f00 	cmp.w	fp, #0
 800a3ec:	f300 8131 	bgt.w	800a652 <atan+0x29a>
 800a3f0:	a59b      	add	r5, pc, #620	; (adr r5, 800a660 <atan+0x2a8>)
 800a3f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3f6:	ec45 4b10 	vmov	d0, r4, r5
 800a3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fe:	4bb6      	ldr	r3, [pc, #728]	; (800a6d8 <atan+0x320>)
 800a400:	429e      	cmp	r6, r3
 800a402:	dc14      	bgt.n	800a42e <atan+0x76>
 800a404:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a408:	429e      	cmp	r6, r3
 800a40a:	dc0d      	bgt.n	800a428 <atan+0x70>
 800a40c:	a396      	add	r3, pc, #600	; (adr r3, 800a668 <atan+0x2b0>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	ee10 0a10 	vmov	r0, s0
 800a416:	4629      	mov	r1, r5
 800a418:	f7f5 fefc 	bl	8000214 <__adddf3>
 800a41c:	4baf      	ldr	r3, [pc, #700]	; (800a6dc <atan+0x324>)
 800a41e:	2200      	movs	r2, #0
 800a420:	f7f6 fb3e 	bl	8000aa0 <__aeabi_dcmpgt>
 800a424:	2800      	cmp	r0, #0
 800a426:	d1e6      	bne.n	800a3f6 <atan+0x3e>
 800a428:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a42c:	e02b      	b.n	800a486 <atan+0xce>
 800a42e:	f000 f963 	bl	800a6f8 <fabs>
 800a432:	4bab      	ldr	r3, [pc, #684]	; (800a6e0 <atan+0x328>)
 800a434:	429e      	cmp	r6, r3
 800a436:	ec55 4b10 	vmov	r4, r5, d0
 800a43a:	f300 80bf 	bgt.w	800a5bc <atan+0x204>
 800a43e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a442:	429e      	cmp	r6, r3
 800a444:	f300 80a0 	bgt.w	800a588 <atan+0x1d0>
 800a448:	ee10 2a10 	vmov	r2, s0
 800a44c:	ee10 0a10 	vmov	r0, s0
 800a450:	462b      	mov	r3, r5
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 fede 	bl	8000214 <__adddf3>
 800a458:	4ba0      	ldr	r3, [pc, #640]	; (800a6dc <atan+0x324>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	f7f5 fed8 	bl	8000210 <__aeabi_dsub>
 800a460:	2200      	movs	r2, #0
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a46a:	4620      	mov	r0, r4
 800a46c:	4629      	mov	r1, r5
 800a46e:	f7f5 fed1 	bl	8000214 <__adddf3>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4630      	mov	r0, r6
 800a478:	4639      	mov	r1, r7
 800a47a:	f7f6 f9ab 	bl	80007d4 <__aeabi_ddiv>
 800a47e:	f04f 0a00 	mov.w	sl, #0
 800a482:	4604      	mov	r4, r0
 800a484:	460d      	mov	r5, r1
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	4620      	mov	r0, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7f6 f877 	bl	8000580 <__aeabi_dmul>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	f7f6 f871 	bl	8000580 <__aeabi_dmul>
 800a49e:	a374      	add	r3, pc, #464	; (adr r3, 800a670 <atan+0x2b8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	460f      	mov	r7, r1
 800a4a8:	f7f6 f86a 	bl	8000580 <__aeabi_dmul>
 800a4ac:	a372      	add	r3, pc, #456	; (adr r3, 800a678 <atan+0x2c0>)
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f7f5 feaf 	bl	8000214 <__adddf3>
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	463b      	mov	r3, r7
 800a4ba:	f7f6 f861 	bl	8000580 <__aeabi_dmul>
 800a4be:	a370      	add	r3, pc, #448	; (adr r3, 800a680 <atan+0x2c8>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f7f5 fea6 	bl	8000214 <__adddf3>
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	f7f6 f858 	bl	8000580 <__aeabi_dmul>
 800a4d0:	a36d      	add	r3, pc, #436	; (adr r3, 800a688 <atan+0x2d0>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fe9d 	bl	8000214 <__adddf3>
 800a4da:	4632      	mov	r2, r6
 800a4dc:	463b      	mov	r3, r7
 800a4de:	f7f6 f84f 	bl	8000580 <__aeabi_dmul>
 800a4e2:	a36b      	add	r3, pc, #428	; (adr r3, 800a690 <atan+0x2d8>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f5 fe94 	bl	8000214 <__adddf3>
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	f7f6 f846 	bl	8000580 <__aeabi_dmul>
 800a4f4:	a368      	add	r3, pc, #416	; (adr r3, 800a698 <atan+0x2e0>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fe8b 	bl	8000214 <__adddf3>
 800a4fe:	4642      	mov	r2, r8
 800a500:	464b      	mov	r3, r9
 800a502:	f7f6 f83d 	bl	8000580 <__aeabi_dmul>
 800a506:	a366      	add	r3, pc, #408	; (adr r3, 800a6a0 <atan+0x2e8>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f6 f834 	bl	8000580 <__aeabi_dmul>
 800a518:	a363      	add	r3, pc, #396	; (adr r3, 800a6a8 <atan+0x2f0>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 fe77 	bl	8000210 <__aeabi_dsub>
 800a522:	4632      	mov	r2, r6
 800a524:	463b      	mov	r3, r7
 800a526:	f7f6 f82b 	bl	8000580 <__aeabi_dmul>
 800a52a:	a361      	add	r3, pc, #388	; (adr r3, 800a6b0 <atan+0x2f8>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 fe6e 	bl	8000210 <__aeabi_dsub>
 800a534:	4632      	mov	r2, r6
 800a536:	463b      	mov	r3, r7
 800a538:	f7f6 f822 	bl	8000580 <__aeabi_dmul>
 800a53c:	a35e      	add	r3, pc, #376	; (adr r3, 800a6b8 <atan+0x300>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f5 fe65 	bl	8000210 <__aeabi_dsub>
 800a546:	4632      	mov	r2, r6
 800a548:	463b      	mov	r3, r7
 800a54a:	f7f6 f819 	bl	8000580 <__aeabi_dmul>
 800a54e:	a35c      	add	r3, pc, #368	; (adr r3, 800a6c0 <atan+0x308>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f5 fe5c 	bl	8000210 <__aeabi_dsub>
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	f7f6 f810 	bl	8000580 <__aeabi_dmul>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f5 fe54 	bl	8000214 <__adddf3>
 800a56c:	4622      	mov	r2, r4
 800a56e:	462b      	mov	r3, r5
 800a570:	f7f6 f806 	bl	8000580 <__aeabi_dmul>
 800a574:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	d14b      	bne.n	800a616 <atan+0x25e>
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f7f5 fe45 	bl	8000210 <__aeabi_dsub>
 800a586:	e72c      	b.n	800a3e2 <atan+0x2a>
 800a588:	ee10 0a10 	vmov	r0, s0
 800a58c:	4b53      	ldr	r3, [pc, #332]	; (800a6dc <atan+0x324>)
 800a58e:	2200      	movs	r2, #0
 800a590:	4629      	mov	r1, r5
 800a592:	f7f5 fe3d 	bl	8000210 <__aeabi_dsub>
 800a596:	4b51      	ldr	r3, [pc, #324]	; (800a6dc <atan+0x324>)
 800a598:	4606      	mov	r6, r0
 800a59a:	460f      	mov	r7, r1
 800a59c:	2200      	movs	r2, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f5 fe37 	bl	8000214 <__adddf3>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 f911 	bl	80007d4 <__aeabi_ddiv>
 800a5b2:	f04f 0a01 	mov.w	sl, #1
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	e764      	b.n	800a486 <atan+0xce>
 800a5bc:	4b49      	ldr	r3, [pc, #292]	; (800a6e4 <atan+0x32c>)
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	da1d      	bge.n	800a5fe <atan+0x246>
 800a5c2:	ee10 0a10 	vmov	r0, s0
 800a5c6:	4b48      	ldr	r3, [pc, #288]	; (800a6e8 <atan+0x330>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f5 fe20 	bl	8000210 <__aeabi_dsub>
 800a5d0:	4b45      	ldr	r3, [pc, #276]	; (800a6e8 <atan+0x330>)
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7f5 ffd0 	bl	8000580 <__aeabi_dmul>
 800a5e0:	4b3e      	ldr	r3, [pc, #248]	; (800a6dc <atan+0x324>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f7f5 fe16 	bl	8000214 <__adddf3>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f7f6 f8f0 	bl	80007d4 <__aeabi_ddiv>
 800a5f4:	f04f 0a02 	mov.w	sl, #2
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	e743      	b.n	800a486 <atan+0xce>
 800a5fe:	462b      	mov	r3, r5
 800a600:	ee10 2a10 	vmov	r2, s0
 800a604:	4939      	ldr	r1, [pc, #228]	; (800a6ec <atan+0x334>)
 800a606:	2000      	movs	r0, #0
 800a608:	f7f6 f8e4 	bl	80007d4 <__aeabi_ddiv>
 800a60c:	f04f 0a03 	mov.w	sl, #3
 800a610:	4604      	mov	r4, r0
 800a612:	460d      	mov	r5, r1
 800a614:	e737      	b.n	800a486 <atan+0xce>
 800a616:	4b36      	ldr	r3, [pc, #216]	; (800a6f0 <atan+0x338>)
 800a618:	4e36      	ldr	r6, [pc, #216]	; (800a6f4 <atan+0x33c>)
 800a61a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 fdf5 	bl	8000210 <__aeabi_dsub>
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	f7f5 fdf1 	bl	8000210 <__aeabi_dsub>
 800a62e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a63a:	f7f5 fde9 	bl	8000210 <__aeabi_dsub>
 800a63e:	f1bb 0f00 	cmp.w	fp, #0
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	f6bf aed6 	bge.w	800a3f6 <atan+0x3e>
 800a64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a64e:	461d      	mov	r5, r3
 800a650:	e6d1      	b.n	800a3f6 <atan+0x3e>
 800a652:	a51d      	add	r5, pc, #116	; (adr r5, 800a6c8 <atan+0x310>)
 800a654:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a658:	e6cd      	b.n	800a3f6 <atan+0x3e>
 800a65a:	bf00      	nop
 800a65c:	f3af 8000 	nop.w
 800a660:	54442d18 	.word	0x54442d18
 800a664:	bff921fb 	.word	0xbff921fb
 800a668:	8800759c 	.word	0x8800759c
 800a66c:	7e37e43c 	.word	0x7e37e43c
 800a670:	e322da11 	.word	0xe322da11
 800a674:	3f90ad3a 	.word	0x3f90ad3a
 800a678:	24760deb 	.word	0x24760deb
 800a67c:	3fa97b4b 	.word	0x3fa97b4b
 800a680:	a0d03d51 	.word	0xa0d03d51
 800a684:	3fb10d66 	.word	0x3fb10d66
 800a688:	c54c206e 	.word	0xc54c206e
 800a68c:	3fb745cd 	.word	0x3fb745cd
 800a690:	920083ff 	.word	0x920083ff
 800a694:	3fc24924 	.word	0x3fc24924
 800a698:	5555550d 	.word	0x5555550d
 800a69c:	3fd55555 	.word	0x3fd55555
 800a6a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a6a4:	bfa2b444 	.word	0xbfa2b444
 800a6a8:	52defd9a 	.word	0x52defd9a
 800a6ac:	3fadde2d 	.word	0x3fadde2d
 800a6b0:	af749a6d 	.word	0xaf749a6d
 800a6b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a6b8:	fe231671 	.word	0xfe231671
 800a6bc:	3fbc71c6 	.word	0x3fbc71c6
 800a6c0:	9998ebc4 	.word	0x9998ebc4
 800a6c4:	3fc99999 	.word	0x3fc99999
 800a6c8:	54442d18 	.word	0x54442d18
 800a6cc:	3ff921fb 	.word	0x3ff921fb
 800a6d0:	440fffff 	.word	0x440fffff
 800a6d4:	7ff00000 	.word	0x7ff00000
 800a6d8:	3fdbffff 	.word	0x3fdbffff
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	3ff2ffff 	.word	0x3ff2ffff
 800a6e4:	40038000 	.word	0x40038000
 800a6e8:	3ff80000 	.word	0x3ff80000
 800a6ec:	bff00000 	.word	0xbff00000
 800a6f0:	0800abb0 	.word	0x0800abb0
 800a6f4:	0800ab90 	.word	0x0800ab90

0800a6f8 <fabs>:
 800a6f8:	ec51 0b10 	vmov	r0, r1, d0
 800a6fc:	ee10 2a10 	vmov	r2, s0
 800a700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a704:	ec43 2b10 	vmov	d0, r2, r3
 800a708:	4770      	bx	lr

0800a70a <abort>:
 800a70a:	b508      	push	{r3, lr}
 800a70c:	2006      	movs	r0, #6
 800a70e:	f000 f8ef 	bl	800a8f0 <raise>
 800a712:	2001      	movs	r0, #1
 800a714:	f7fa fefa 	bl	800550c <_exit>

0800a718 <malloc>:
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <malloc+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f000 b82b 	b.w	800a778 <_malloc_r>
 800a722:	bf00      	nop
 800a724:	200002b8 	.word	0x200002b8

0800a728 <free>:
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <free+0xc>)
 800a72a:	4601      	mov	r1, r0
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	f000 b945 	b.w	800a9bc <_free_r>
 800a732:	bf00      	nop
 800a734:	200002b8 	.word	0x200002b8

0800a738 <sbrk_aligned>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	4e0e      	ldr	r6, [pc, #56]	; (800a774 <sbrk_aligned+0x3c>)
 800a73c:	460c      	mov	r4, r1
 800a73e:	6831      	ldr	r1, [r6, #0]
 800a740:	4605      	mov	r5, r0
 800a742:	b911      	cbnz	r1, 800a74a <sbrk_aligned+0x12>
 800a744:	f000 f8f0 	bl	800a928 <_sbrk_r>
 800a748:	6030      	str	r0, [r6, #0]
 800a74a:	4621      	mov	r1, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 f8eb 	bl	800a928 <_sbrk_r>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	d00a      	beq.n	800a76c <sbrk_aligned+0x34>
 800a756:	1cc4      	adds	r4, r0, #3
 800a758:	f024 0403 	bic.w	r4, r4, #3
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d007      	beq.n	800a770 <sbrk_aligned+0x38>
 800a760:	1a21      	subs	r1, r4, r0
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f8e0 	bl	800a928 <_sbrk_r>
 800a768:	3001      	adds	r0, #1
 800a76a:	d101      	bne.n	800a770 <sbrk_aligned+0x38>
 800a76c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a770:	4620      	mov	r0, r4
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	20000588 	.word	0x20000588

0800a778 <_malloc_r>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	1ccd      	adds	r5, r1, #3
 800a77e:	f025 0503 	bic.w	r5, r5, #3
 800a782:	3508      	adds	r5, #8
 800a784:	2d0c      	cmp	r5, #12
 800a786:	bf38      	it	cc
 800a788:	250c      	movcc	r5, #12
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	4607      	mov	r7, r0
 800a78e:	db01      	blt.n	800a794 <_malloc_r+0x1c>
 800a790:	42a9      	cmp	r1, r5
 800a792:	d905      	bls.n	800a7a0 <_malloc_r+0x28>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	2600      	movs	r6, #0
 800a79a:	4630      	mov	r0, r6
 800a79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a874 <_malloc_r+0xfc>
 800a7a4:	f000 f868 	bl	800a878 <__malloc_lock>
 800a7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ac:	461c      	mov	r4, r3
 800a7ae:	bb5c      	cbnz	r4, 800a808 <_malloc_r+0x90>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	f7ff ffc0 	bl	800a738 <sbrk_aligned>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	d155      	bne.n	800a86a <_malloc_r+0xf2>
 800a7be:	f8d8 4000 	ldr.w	r4, [r8]
 800a7c2:	4626      	mov	r6, r4
 800a7c4:	2e00      	cmp	r6, #0
 800a7c6:	d145      	bne.n	800a854 <_malloc_r+0xdc>
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d048      	beq.n	800a85e <_malloc_r+0xe6>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	eb04 0903 	add.w	r9, r4, r3
 800a7d6:	f000 f8a7 	bl	800a928 <_sbrk_r>
 800a7da:	4581      	cmp	r9, r0
 800a7dc:	d13f      	bne.n	800a85e <_malloc_r+0xe6>
 800a7de:	6821      	ldr	r1, [r4, #0]
 800a7e0:	1a6d      	subs	r5, r5, r1
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7ff ffa7 	bl	800a738 <sbrk_aligned>
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d037      	beq.n	800a85e <_malloc_r+0xe6>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	442b      	add	r3, r5
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d038      	beq.n	800a86e <_malloc_r+0xf6>
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	42a2      	cmp	r2, r4
 800a800:	d12b      	bne.n	800a85a <_malloc_r+0xe2>
 800a802:	2200      	movs	r2, #0
 800a804:	605a      	str	r2, [r3, #4]
 800a806:	e00f      	b.n	800a828 <_malloc_r+0xb0>
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	1b52      	subs	r2, r2, r5
 800a80c:	d41f      	bmi.n	800a84e <_malloc_r+0xd6>
 800a80e:	2a0b      	cmp	r2, #11
 800a810:	d917      	bls.n	800a842 <_malloc_r+0xca>
 800a812:	1961      	adds	r1, r4, r5
 800a814:	42a3      	cmp	r3, r4
 800a816:	6025      	str	r5, [r4, #0]
 800a818:	bf18      	it	ne
 800a81a:	6059      	strne	r1, [r3, #4]
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	bf08      	it	eq
 800a820:	f8c8 1000 	streq.w	r1, [r8]
 800a824:	5162      	str	r2, [r4, r5]
 800a826:	604b      	str	r3, [r1, #4]
 800a828:	4638      	mov	r0, r7
 800a82a:	f104 060b 	add.w	r6, r4, #11
 800a82e:	f000 f829 	bl	800a884 <__malloc_unlock>
 800a832:	f026 0607 	bic.w	r6, r6, #7
 800a836:	1d23      	adds	r3, r4, #4
 800a838:	1af2      	subs	r2, r6, r3
 800a83a:	d0ae      	beq.n	800a79a <_malloc_r+0x22>
 800a83c:	1b9b      	subs	r3, r3, r6
 800a83e:	50a3      	str	r3, [r4, r2]
 800a840:	e7ab      	b.n	800a79a <_malloc_r+0x22>
 800a842:	42a3      	cmp	r3, r4
 800a844:	6862      	ldr	r2, [r4, #4]
 800a846:	d1dd      	bne.n	800a804 <_malloc_r+0x8c>
 800a848:	f8c8 2000 	str.w	r2, [r8]
 800a84c:	e7ec      	b.n	800a828 <_malloc_r+0xb0>
 800a84e:	4623      	mov	r3, r4
 800a850:	6864      	ldr	r4, [r4, #4]
 800a852:	e7ac      	b.n	800a7ae <_malloc_r+0x36>
 800a854:	4634      	mov	r4, r6
 800a856:	6876      	ldr	r6, [r6, #4]
 800a858:	e7b4      	b.n	800a7c4 <_malloc_r+0x4c>
 800a85a:	4613      	mov	r3, r2
 800a85c:	e7cc      	b.n	800a7f8 <_malloc_r+0x80>
 800a85e:	230c      	movs	r3, #12
 800a860:	603b      	str	r3, [r7, #0]
 800a862:	4638      	mov	r0, r7
 800a864:	f000 f80e 	bl	800a884 <__malloc_unlock>
 800a868:	e797      	b.n	800a79a <_malloc_r+0x22>
 800a86a:	6025      	str	r5, [r4, #0]
 800a86c:	e7dc      	b.n	800a828 <_malloc_r+0xb0>
 800a86e:	605b      	str	r3, [r3, #4]
 800a870:	deff      	udf	#255	; 0xff
 800a872:	bf00      	nop
 800a874:	20000584 	.word	0x20000584

0800a878 <__malloc_lock>:
 800a878:	4801      	ldr	r0, [pc, #4]	; (800a880 <__malloc_lock+0x8>)
 800a87a:	f000 b88f 	b.w	800a99c <__retarget_lock_acquire_recursive>
 800a87e:	bf00      	nop
 800a880:	200006c8 	.word	0x200006c8

0800a884 <__malloc_unlock>:
 800a884:	4801      	ldr	r0, [pc, #4]	; (800a88c <__malloc_unlock+0x8>)
 800a886:	f000 b88a 	b.w	800a99e <__retarget_lock_release_recursive>
 800a88a:	bf00      	nop
 800a88c:	200006c8 	.word	0x200006c8

0800a890 <memset>:
 800a890:	4402      	add	r2, r0
 800a892:	4603      	mov	r3, r0
 800a894:	4293      	cmp	r3, r2
 800a896:	d100      	bne.n	800a89a <memset+0xa>
 800a898:	4770      	bx	lr
 800a89a:	f803 1b01 	strb.w	r1, [r3], #1
 800a89e:	e7f9      	b.n	800a894 <memset+0x4>

0800a8a0 <_raise_r>:
 800a8a0:	291f      	cmp	r1, #31
 800a8a2:	b538      	push	{r3, r4, r5, lr}
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	d904      	bls.n	800a8b4 <_raise_r+0x14>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8b6:	b112      	cbz	r2, 800a8be <_raise_r+0x1e>
 800a8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8bc:	b94b      	cbnz	r3, 800a8d2 <_raise_r+0x32>
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f830 	bl	800a924 <_getpid_r>
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ce:	f000 b817 	b.w	800a900 <_kill_r>
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d00a      	beq.n	800a8ec <_raise_r+0x4c>
 800a8d6:	1c59      	adds	r1, r3, #1
 800a8d8:	d103      	bne.n	800a8e2 <_raise_r+0x42>
 800a8da:	2316      	movs	r3, #22
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e7e7      	b.n	800a8b2 <_raise_r+0x12>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	4798      	blx	r3
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e7e0      	b.n	800a8b2 <_raise_r+0x12>

0800a8f0 <raise>:
 800a8f0:	4b02      	ldr	r3, [pc, #8]	; (800a8fc <raise+0xc>)
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f7ff bfd3 	b.w	800a8a0 <_raise_r>
 800a8fa:	bf00      	nop
 800a8fc:	200002b8 	.word	0x200002b8

0800a900 <_kill_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_kill_r+0x20>)
 800a904:	2300      	movs	r3, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	f7fa fded 	bl	80054ec <_kill>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d102      	bne.n	800a91c <_kill_r+0x1c>
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	b103      	cbz	r3, 800a91c <_kill_r+0x1c>
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	200006c4 	.word	0x200006c4

0800a924 <_getpid_r>:
 800a924:	f7fa bdda 	b.w	80054dc <_getpid>

0800a928 <_sbrk_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d06      	ldr	r5, [pc, #24]	; (800a944 <_sbrk_r+0x1c>)
 800a92c:	2300      	movs	r3, #0
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f7fa fdf4 	bl	8005520 <_sbrk>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_sbrk_r+0x1a>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_sbrk_r+0x1a>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	200006c4 	.word	0x200006c4

0800a948 <__errno>:
 800a948:	4b01      	ldr	r3, [pc, #4]	; (800a950 <__errno+0x8>)
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	200002b8 	.word	0x200002b8

0800a954 <__libc_init_array>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4d0d      	ldr	r5, [pc, #52]	; (800a98c <__libc_init_array+0x38>)
 800a958:	4c0d      	ldr	r4, [pc, #52]	; (800a990 <__libc_init_array+0x3c>)
 800a95a:	1b64      	subs	r4, r4, r5
 800a95c:	10a4      	asrs	r4, r4, #2
 800a95e:	2600      	movs	r6, #0
 800a960:	42a6      	cmp	r6, r4
 800a962:	d109      	bne.n	800a978 <__libc_init_array+0x24>
 800a964:	4d0b      	ldr	r5, [pc, #44]	; (800a994 <__libc_init_array+0x40>)
 800a966:	4c0c      	ldr	r4, [pc, #48]	; (800a998 <__libc_init_array+0x44>)
 800a968:	f000 f874 	bl	800aa54 <_init>
 800a96c:	1b64      	subs	r4, r4, r5
 800a96e:	10a4      	asrs	r4, r4, #2
 800a970:	2600      	movs	r6, #0
 800a972:	42a6      	cmp	r6, r4
 800a974:	d105      	bne.n	800a982 <__libc_init_array+0x2e>
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97c:	4798      	blx	r3
 800a97e:	3601      	adds	r6, #1
 800a980:	e7ee      	b.n	800a960 <__libc_init_array+0xc>
 800a982:	f855 3b04 	ldr.w	r3, [r5], #4
 800a986:	4798      	blx	r3
 800a988:	3601      	adds	r6, #1
 800a98a:	e7f2      	b.n	800a972 <__libc_init_array+0x1e>
 800a98c:	0800abd8 	.word	0x0800abd8
 800a990:	0800abd8 	.word	0x0800abd8
 800a994:	0800abd8 	.word	0x0800abd8
 800a998:	0800abe0 	.word	0x0800abe0

0800a99c <__retarget_lock_acquire_recursive>:
 800a99c:	4770      	bx	lr

0800a99e <__retarget_lock_release_recursive>:
 800a99e:	4770      	bx	lr

0800a9a0 <memcpy>:
 800a9a0:	440a      	add	r2, r1
 800a9a2:	4291      	cmp	r1, r2
 800a9a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9a8:	d100      	bne.n	800a9ac <memcpy+0xc>
 800a9aa:	4770      	bx	lr
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	d1f9      	bne.n	800a9ae <memcpy+0xe>
 800a9ba:	bd10      	pop	{r4, pc}

0800a9bc <_free_r>:
 800a9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9be:	2900      	cmp	r1, #0
 800a9c0:	d044      	beq.n	800aa4c <_free_r+0x90>
 800a9c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c6:	9001      	str	r0, [sp, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a9ce:	bfb8      	it	lt
 800a9d0:	18e4      	addlt	r4, r4, r3
 800a9d2:	f7ff ff51 	bl	800a878 <__malloc_lock>
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <_free_r+0x94>)
 800a9d8:	9801      	ldr	r0, [sp, #4]
 800a9da:	6813      	ldr	r3, [r2, #0]
 800a9dc:	b933      	cbnz	r3, 800a9ec <_free_r+0x30>
 800a9de:	6063      	str	r3, [r4, #4]
 800a9e0:	6014      	str	r4, [r2, #0]
 800a9e2:	b003      	add	sp, #12
 800a9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9e8:	f7ff bf4c 	b.w	800a884 <__malloc_unlock>
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d908      	bls.n	800aa02 <_free_r+0x46>
 800a9f0:	6825      	ldr	r5, [r4, #0]
 800a9f2:	1961      	adds	r1, r4, r5
 800a9f4:	428b      	cmp	r3, r1
 800a9f6:	bf01      	itttt	eq
 800a9f8:	6819      	ldreq	r1, [r3, #0]
 800a9fa:	685b      	ldreq	r3, [r3, #4]
 800a9fc:	1949      	addeq	r1, r1, r5
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	e7ed      	b.n	800a9de <_free_r+0x22>
 800aa02:	461a      	mov	r2, r3
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	b10b      	cbz	r3, 800aa0c <_free_r+0x50>
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d9fa      	bls.n	800aa02 <_free_r+0x46>
 800aa0c:	6811      	ldr	r1, [r2, #0]
 800aa0e:	1855      	adds	r5, r2, r1
 800aa10:	42a5      	cmp	r5, r4
 800aa12:	d10b      	bne.n	800aa2c <_free_r+0x70>
 800aa14:	6824      	ldr	r4, [r4, #0]
 800aa16:	4421      	add	r1, r4
 800aa18:	1854      	adds	r4, r2, r1
 800aa1a:	42a3      	cmp	r3, r4
 800aa1c:	6011      	str	r1, [r2, #0]
 800aa1e:	d1e0      	bne.n	800a9e2 <_free_r+0x26>
 800aa20:	681c      	ldr	r4, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	6053      	str	r3, [r2, #4]
 800aa26:	440c      	add	r4, r1
 800aa28:	6014      	str	r4, [r2, #0]
 800aa2a:	e7da      	b.n	800a9e2 <_free_r+0x26>
 800aa2c:	d902      	bls.n	800aa34 <_free_r+0x78>
 800aa2e:	230c      	movs	r3, #12
 800aa30:	6003      	str	r3, [r0, #0]
 800aa32:	e7d6      	b.n	800a9e2 <_free_r+0x26>
 800aa34:	6825      	ldr	r5, [r4, #0]
 800aa36:	1961      	adds	r1, r4, r5
 800aa38:	428b      	cmp	r3, r1
 800aa3a:	bf04      	itt	eq
 800aa3c:	6819      	ldreq	r1, [r3, #0]
 800aa3e:	685b      	ldreq	r3, [r3, #4]
 800aa40:	6063      	str	r3, [r4, #4]
 800aa42:	bf04      	itt	eq
 800aa44:	1949      	addeq	r1, r1, r5
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	6054      	str	r4, [r2, #4]
 800aa4a:	e7ca      	b.n	800a9e2 <_free_r+0x26>
 800aa4c:	b003      	add	sp, #12
 800aa4e:	bd30      	pop	{r4, r5, pc}
 800aa50:	20000584 	.word	0x20000584

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
